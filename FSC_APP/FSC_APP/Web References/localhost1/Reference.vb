'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=2.0.50727.3053.
'
Namespace localhost1
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="Gattaca BPM Services 9.0.0.0Soap", [Namespace]:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx")>  _
    Partial Public Class GattacaBPMServices9000
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private TestTransmissionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPackagesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActivityInstancesByUserIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetActivityInstanceByUserIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessInstancesByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CreateProcessXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMCreateProcessInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private WMStartProcessInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StartActivityInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private EndActivityInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConditionsByActivityInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConditionsTypeActivityInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetConditionsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AttachDataToActivityInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AttachFileToActivityInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AttachCommentToProcessInstanceOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessCasesByProcessOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetFormsByProcessCaseOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessAttributeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessAttributeValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetProcessAttributeValueByIdOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UpdateProcessAttributeValueOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.FSC_APP.My.MySettings.Default.FSC_APP_localhost1_Gattaca_x0020_BPM_x0020_Services_x0020_9_0_0_0
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event TestTransmissionCompleted As TestTransmissionCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPackagesCompleted As GetPackagesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessesCompleted As GetProcessesCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessByIdCompleted As GetProcessByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActivityInstancesByUserIdCompleted As GetActivityInstancesByUserIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetActivityInstanceByUserIdCompleted As GetActivityInstanceByUserIdCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessInstancesByIdCompleted As GetProcessInstancesByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event CreateProcessXMLCompleted As CreateProcessXMLCompletedEventHandler
        
        '''<remarks/>
        Public Event WMCreateProcessInstanceCompleted As WMCreateProcessInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event WMStartProcessInstanceCompleted As WMStartProcessInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event StartActivityInstanceCompleted As StartActivityInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event EndActivityInstanceCompleted As EndActivityInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConditionsByActivityInstanceCompleted As GetConditionsByActivityInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConditionsTypeActivityInstanceCompleted As GetConditionsTypeActivityInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetConditionsCompleted As GetConditionsCompletedEventHandler
        
        '''<remarks/>
        Public Event AttachDataToActivityInstanceCompleted As AttachDataToActivityInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event AttachFileToActivityInstanceCompleted As AttachFileToActivityInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event AttachCommentToProcessInstanceCompleted As AttachCommentToProcessInstanceCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessCasesByProcessCompleted As GetProcessCasesByProcessCompletedEventHandler
        
        '''<remarks/>
        Public Event GetFormsByProcessCaseCompleted As GetFormsByProcessCaseCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessAttributeCompleted As GetProcessAttributeCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessAttributeValueCompleted As GetProcessAttributeValueCompletedEventHandler
        
        '''<remarks/>
        Public Event GetProcessAttributeValueByIdCompleted As GetProcessAttributeValueByIdCompletedEventHandler
        
        '''<remarks/>
        Public Event UpdateProcessAttributeValueCompleted As UpdateProcessAttributeValueCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/TestTran"& _ 
            "smission", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestTransmission() As Boolean
            Dim results() As Object = Me.Invoke("TestTransmission", New Object(-1) {})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub TestTransmissionAsync()
            Me.TestTransmissionAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub TestTransmissionAsync(ByVal userState As Object)
            If (Me.TestTransmissionOperationCompleted Is Nothing) Then
                Me.TestTransmissionOperationCompleted = AddressOf Me.OnTestTransmissionOperationCompleted
            End If
            Me.InvokeAsync("TestTransmission", New Object(-1) {}, Me.TestTransmissionOperationCompleted, userState)
        End Sub
        
        Private Sub OnTestTransmissionOperationCompleted(ByVal arg As Object)
            If (Not (Me.TestTransmissionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent TestTransmissionCompleted(Me, New TestTransmissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetPacka"& _ 
            "ges", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPackages(ByVal Client As String, ByVal UserID As Long, ByVal IsOnlyEnabled As Boolean) As String
            Dim results() As Object = Me.Invoke("GetPackages", New Object() {Client, UserID, IsOnlyEnabled})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPackagesAsync(ByVal Client As String, ByVal UserID As Long, ByVal IsOnlyEnabled As Boolean)
            Me.GetPackagesAsync(Client, UserID, IsOnlyEnabled, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPackagesAsync(ByVal Client As String, ByVal UserID As Long, ByVal IsOnlyEnabled As Boolean, ByVal userState As Object)
            If (Me.GetPackagesOperationCompleted Is Nothing) Then
                Me.GetPackagesOperationCompleted = AddressOf Me.OnGetPackagesOperationCompleted
            End If
            Me.InvokeAsync("GetPackages", New Object() {Client, UserID, IsOnlyEnabled}, Me.GetPackagesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPackagesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPackagesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPackagesCompleted(Me, New GetPackagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce"& _ 
            "sses", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcesses(ByVal Client As String, ByVal UserID As Long, ByVal IsOnlyEnabled As Boolean) As String
            Dim results() As Object = Me.Invoke("GetProcesses", New Object() {Client, UserID, IsOnlyEnabled})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessesAsync(ByVal Client As String, ByVal UserID As Long, ByVal IsOnlyEnabled As Boolean)
            Me.GetProcessesAsync(Client, UserID, IsOnlyEnabled, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessesAsync(ByVal Client As String, ByVal UserID As Long, ByVal IsOnlyEnabled As Boolean, ByVal userState As Object)
            If (Me.GetProcessesOperationCompleted Is Nothing) Then
                Me.GetProcessesOperationCompleted = AddressOf Me.OnGetProcessesOperationCompleted
            End If
            Me.InvokeAsync("GetProcesses", New Object() {Client, UserID, IsOnlyEnabled}, Me.GetProcessesOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessesOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessesCompleted(Me, New GetProcessesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce"& _ 
            "ssById", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessById(ByVal Client As String, ByVal UserID As Long, ByVal IdProcess As Long) As String
            Dim results() As Object = Me.Invoke("GetProcessById", New Object() {Client, UserID, IdProcess})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessByIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal IdProcess As Long)
            Me.GetProcessByIdAsync(Client, UserID, IdProcess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessByIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal IdProcess As Long, ByVal userState As Object)
            If (Me.GetProcessByIdOperationCompleted Is Nothing) Then
                Me.GetProcessByIdOperationCompleted = AddressOf Me.OnGetProcessByIdOperationCompleted
            End If
            Me.InvokeAsync("GetProcessById", New Object() {Client, UserID, IdProcess}, Me.GetProcessByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessByIdCompleted(Me, New GetProcessByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetActiv"& _ 
            "ityInstancesByUserId", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActivityInstancesByUserId(ByVal Client As String, ByVal UserID As Long, ByVal Status As Integer, ByVal IdProcessInstance As Long, ByVal MaxInstanceActivity As Integer, ByVal OrderBy As String) As String
            Dim results() As Object = Me.Invoke("GetActivityInstancesByUserId", New Object() {Client, UserID, Status, IdProcessInstance, MaxInstanceActivity, OrderBy})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActivityInstancesByUserIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal Status As Integer, ByVal IdProcessInstance As Long, ByVal MaxInstanceActivity As Integer, ByVal OrderBy As String)
            Me.GetActivityInstancesByUserIdAsync(Client, UserID, Status, IdProcessInstance, MaxInstanceActivity, OrderBy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActivityInstancesByUserIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal Status As Integer, ByVal IdProcessInstance As Long, ByVal MaxInstanceActivity As Integer, ByVal OrderBy As String, ByVal userState As Object)
            If (Me.GetActivityInstancesByUserIdOperationCompleted Is Nothing) Then
                Me.GetActivityInstancesByUserIdOperationCompleted = AddressOf Me.OnGetActivityInstancesByUserIdOperationCompleted
            End If
            Me.InvokeAsync("GetActivityInstancesByUserId", New Object() {Client, UserID, Status, IdProcessInstance, MaxInstanceActivity, OrderBy}, Me.GetActivityInstancesByUserIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActivityInstancesByUserIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActivityInstancesByUserIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActivityInstancesByUserIdCompleted(Me, New GetActivityInstancesByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetActiv"& _ 
            "ityInstanceByUserId", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActivityInstanceByUserId(ByVal Client As String, ByVal UserID As Long, ByVal Status As Integer, ByVal IdActivity As Long, ByVal IdProcessInstance As Long, ByVal OrderBy As String) As String
            Dim results() As Object = Me.Invoke("GetActivityInstanceByUserId", New Object() {Client, UserID, Status, IdActivity, IdProcessInstance, OrderBy})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetActivityInstanceByUserIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal Status As Integer, ByVal IdActivity As Long, ByVal IdProcessInstance As Long, ByVal OrderBy As String)
            Me.GetActivityInstanceByUserIdAsync(Client, UserID, Status, IdActivity, IdProcessInstance, OrderBy, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetActivityInstanceByUserIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal Status As Integer, ByVal IdActivity As Long, ByVal IdProcessInstance As Long, ByVal OrderBy As String, ByVal userState As Object)
            If (Me.GetActivityInstanceByUserIdOperationCompleted Is Nothing) Then
                Me.GetActivityInstanceByUserIdOperationCompleted = AddressOf Me.OnGetActivityInstanceByUserIdOperationCompleted
            End If
            Me.InvokeAsync("GetActivityInstanceByUserId", New Object() {Client, UserID, Status, IdActivity, IdProcessInstance, OrderBy}, Me.GetActivityInstanceByUserIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetActivityInstanceByUserIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetActivityInstanceByUserIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetActivityInstanceByUserIdCompleted(Me, New GetActivityInstanceByUserIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce"& _ 
            "ssInstancesById", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessInstancesById(ByVal Client As String, ByVal UserID As Long, ByVal ProcessInstancesId As Long) As String
            Dim results() As Object = Me.Invoke("GetProcessInstancesById", New Object() {Client, UserID, ProcessInstancesId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessInstancesByIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal ProcessInstancesId As Long)
            Me.GetProcessInstancesByIdAsync(Client, UserID, ProcessInstancesId, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessInstancesByIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal ProcessInstancesId As Long, ByVal userState As Object)
            If (Me.GetProcessInstancesByIdOperationCompleted Is Nothing) Then
                Me.GetProcessInstancesByIdOperationCompleted = AddressOf Me.OnGetProcessInstancesByIdOperationCompleted
            End If
            Me.InvokeAsync("GetProcessInstancesById", New Object() {Client, UserID, ProcessInstancesId}, Me.GetProcessInstancesByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessInstancesByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessInstancesByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessInstancesByIdCompleted(Me, New GetProcessInstancesByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/CreatePr"& _ 
            "ocessXML", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CreateProcessXML(ByVal Client As String, ByVal sXML As String) As String
            Dim results() As Object = Me.Invoke("CreateProcessXML", New Object() {Client, sXML})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CreateProcessXMLAsync(ByVal Client As String, ByVal sXML As String)
            Me.CreateProcessXMLAsync(Client, sXML, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CreateProcessXMLAsync(ByVal Client As String, ByVal sXML As String, ByVal userState As Object)
            If (Me.CreateProcessXMLOperationCompleted Is Nothing) Then
                Me.CreateProcessXMLOperationCompleted = AddressOf Me.OnCreateProcessXMLOperationCompleted
            End If
            Me.InvokeAsync("CreateProcessXML", New Object() {Client, sXML}, Me.CreateProcessXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OnCreateProcessXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.CreateProcessXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CreateProcessXMLCompleted(Me, New CreateProcessXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/WMCreate"& _ 
            "ProcessInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMCreateProcessInstance(ByVal Client As String, ByVal UserID As Long, ByVal IDProcessCase As Long, ByVal Sequence As Long, ByVal EntryDataType As String, ByVal IDEntryData As String, ByVal EntryData As String) As Long
            Dim results() As Object = Me.Invoke("WMCreateProcessInstance", New Object() {Client, UserID, IDProcessCase, Sequence, EntryDataType, IDEntryData, EntryData})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMCreateProcessInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal IDProcessCase As Long, ByVal Sequence As Long, ByVal EntryDataType As String, ByVal IDEntryData As String, ByVal EntryData As String)
            Me.WMCreateProcessInstanceAsync(Client, UserID, IDProcessCase, Sequence, EntryDataType, IDEntryData, EntryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMCreateProcessInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal IDProcessCase As Long, ByVal Sequence As Long, ByVal EntryDataType As String, ByVal IDEntryData As String, ByVal EntryData As String, ByVal userState As Object)
            If (Me.WMCreateProcessInstanceOperationCompleted Is Nothing) Then
                Me.WMCreateProcessInstanceOperationCompleted = AddressOf Me.OnWMCreateProcessInstanceOperationCompleted
            End If
            Me.InvokeAsync("WMCreateProcessInstance", New Object() {Client, UserID, IDProcessCase, Sequence, EntryDataType, IDEntryData, EntryData}, Me.WMCreateProcessInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMCreateProcessInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMCreateProcessInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMCreateProcessInstanceCompleted(Me, New WMCreateProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/WMStartP"& _ 
            "rocessInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WMStartProcessInstance(ByVal Client As String, ByVal UserID As Long, ByVal IDProcessInstance As Long) As Long
            Dim results() As Object = Me.Invoke("WMStartProcessInstance", New Object() {Client, UserID, IDProcessInstance})
            Return CType(results(0),Long)
        End Function
        
        '''<remarks/>
        Public Overloads Sub WMStartProcessInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal IDProcessInstance As Long)
            Me.WMStartProcessInstanceAsync(Client, UserID, IDProcessInstance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub WMStartProcessInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal IDProcessInstance As Long, ByVal userState As Object)
            If (Me.WMStartProcessInstanceOperationCompleted Is Nothing) Then
                Me.WMStartProcessInstanceOperationCompleted = AddressOf Me.OnWMStartProcessInstanceOperationCompleted
            End If
            Me.InvokeAsync("WMStartProcessInstance", New Object() {Client, UserID, IDProcessInstance}, Me.WMStartProcessInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnWMStartProcessInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.WMStartProcessInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent WMStartProcessInstanceCompleted(Me, New WMStartProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/StartAct"& _ 
            "ivityInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StartActivityInstance(ByVal Client As String, ByVal activityInstanceID As Long) As Boolean
            Dim results() As Object = Me.Invoke("StartActivityInstance", New Object() {Client, activityInstanceID})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StartActivityInstanceAsync(ByVal Client As String, ByVal activityInstanceID As Long)
            Me.StartActivityInstanceAsync(Client, activityInstanceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StartActivityInstanceAsync(ByVal Client As String, ByVal activityInstanceID As Long, ByVal userState As Object)
            If (Me.StartActivityInstanceOperationCompleted Is Nothing) Then
                Me.StartActivityInstanceOperationCompleted = AddressOf Me.OnStartActivityInstanceOperationCompleted
            End If
            Me.InvokeAsync("StartActivityInstance", New Object() {Client, activityInstanceID}, Me.StartActivityInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnStartActivityInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.StartActivityInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StartActivityInstanceCompleted(Me, New StartActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/EndActiv"& _ 
            "ityInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function EndActivityInstance(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal selectedCondition As String, ByVal comments As String, ByVal outComments As String, ByVal entryDataType As String, ByVal entryData As String, ByVal idEntryData As String) As String
            Dim results() As Object = Me.Invoke("EndActivityInstance", New Object() {Client, UserID, activityInstanceID, processInstanceID, selectedCondition, comments, outComments, entryDataType, entryData, idEntryData})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub EndActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal selectedCondition As String, ByVal comments As String, ByVal outComments As String, ByVal entryDataType As String, ByVal entryData As String, ByVal idEntryData As String)
            Me.EndActivityInstanceAsync(Client, UserID, activityInstanceID, processInstanceID, selectedCondition, comments, outComments, entryDataType, entryData, idEntryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub EndActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal selectedCondition As String, ByVal comments As String, ByVal outComments As String, ByVal entryDataType As String, ByVal entryData As String, ByVal idEntryData As String, ByVal userState As Object)
            If (Me.EndActivityInstanceOperationCompleted Is Nothing) Then
                Me.EndActivityInstanceOperationCompleted = AddressOf Me.OnEndActivityInstanceOperationCompleted
            End If
            Me.InvokeAsync("EndActivityInstance", New Object() {Client, UserID, activityInstanceID, processInstanceID, selectedCondition, comments, outComments, entryDataType, entryData, idEntryData}, Me.EndActivityInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnEndActivityInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.EndActivityInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent EndActivityInstanceCompleted(Me, New EndActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetCondi"& _ 
            "tionsByActivityInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConditionsByActivityInstance(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long) As ListItem()
            Dim results() As Object = Me.Invoke("GetConditionsByActivityInstance", New Object() {Client, UserID, ActivityInstanceID})
            Return CType(results(0),ListItem())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConditionsByActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long)
            Me.GetConditionsByActivityInstanceAsync(Client, UserID, ActivityInstanceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConditionsByActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long, ByVal userState As Object)
            If (Me.GetConditionsByActivityInstanceOperationCompleted Is Nothing) Then
                Me.GetConditionsByActivityInstanceOperationCompleted = AddressOf Me.OnGetConditionsByActivityInstanceOperationCompleted
            End If
            Me.InvokeAsync("GetConditionsByActivityInstance", New Object() {Client, UserID, ActivityInstanceID}, Me.GetConditionsByActivityInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConditionsByActivityInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConditionsByActivityInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConditionsByActivityInstanceCompleted(Me, New GetConditionsByActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetCondi"& _ 
            "tionsTypeActivityInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConditionsTypeActivityInstance(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long) As String
            Dim results() As Object = Me.Invoke("GetConditionsTypeActivityInstance", New Object() {Client, UserID, ActivityInstanceID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConditionsTypeActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long)
            Me.GetConditionsTypeActivityInstanceAsync(Client, UserID, ActivityInstanceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConditionsTypeActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long, ByVal userState As Object)
            If (Me.GetConditionsTypeActivityInstanceOperationCompleted Is Nothing) Then
                Me.GetConditionsTypeActivityInstanceOperationCompleted = AddressOf Me.OnGetConditionsTypeActivityInstanceOperationCompleted
            End If
            Me.InvokeAsync("GetConditionsTypeActivityInstance", New Object() {Client, UserID, ActivityInstanceID}, Me.GetConditionsTypeActivityInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConditionsTypeActivityInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConditionsTypeActivityInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConditionsTypeActivityInstanceCompleted(Me, New GetConditionsTypeActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetCondi"& _ 
            "tions", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConditions(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long) As String
            Dim results() As Object = Me.Invoke("GetConditions", New Object() {Client, UserID, ActivityInstanceID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetConditionsAsync(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long)
            Me.GetConditionsAsync(Client, UserID, ActivityInstanceID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetConditionsAsync(ByVal Client As String, ByVal UserID As Long, ByVal ActivityInstanceID As Long, ByVal userState As Object)
            If (Me.GetConditionsOperationCompleted Is Nothing) Then
                Me.GetConditionsOperationCompleted = AddressOf Me.OnGetConditionsOperationCompleted
            End If
            Me.InvokeAsync("GetConditions", New Object() {Client, UserID, ActivityInstanceID}, Me.GetConditionsOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetConditionsOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetConditionsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetConditionsCompleted(Me, New GetConditionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/AttachDa"& _ 
            "taToActivityInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AttachDataToActivityInstance(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal entryDataType As String, ByVal entryData As String, ByVal idEntryData As String) As Boolean
            Dim results() As Object = Me.Invoke("AttachDataToActivityInstance", New Object() {Client, UserID, activityInstanceID, processInstanceID, entryDataType, entryData, idEntryData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AttachDataToActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal entryDataType As String, ByVal entryData As String, ByVal idEntryData As String)
            Me.AttachDataToActivityInstanceAsync(Client, UserID, activityInstanceID, processInstanceID, entryDataType, entryData, idEntryData, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AttachDataToActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal entryDataType As String, ByVal entryData As String, ByVal idEntryData As String, ByVal userState As Object)
            If (Me.AttachDataToActivityInstanceOperationCompleted Is Nothing) Then
                Me.AttachDataToActivityInstanceOperationCompleted = AddressOf Me.OnAttachDataToActivityInstanceOperationCompleted
            End If
            Me.InvokeAsync("AttachDataToActivityInstance", New Object() {Client, UserID, activityInstanceID, processInstanceID, entryDataType, entryData, idEntryData}, Me.AttachDataToActivityInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAttachDataToActivityInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AttachDataToActivityInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AttachDataToActivityInstanceCompleted(Me, New AttachDataToActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/AttachFi"& _ 
            "leToActivityInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AttachFileToActivityInstance(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal FullFileName As String) As Boolean
            Dim results() As Object = Me.Invoke("AttachFileToActivityInstance", New Object() {Client, UserID, activityInstanceID, processInstanceID, FullFileName})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AttachFileToActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal FullFileName As String)
            Me.AttachFileToActivityInstanceAsync(Client, UserID, activityInstanceID, processInstanceID, FullFileName, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AttachFileToActivityInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal activityInstanceID As Long, ByVal processInstanceID As Long, ByVal FullFileName As String, ByVal userState As Object)
            If (Me.AttachFileToActivityInstanceOperationCompleted Is Nothing) Then
                Me.AttachFileToActivityInstanceOperationCompleted = AddressOf Me.OnAttachFileToActivityInstanceOperationCompleted
            End If
            Me.InvokeAsync("AttachFileToActivityInstance", New Object() {Client, UserID, activityInstanceID, processInstanceID, FullFileName}, Me.AttachFileToActivityInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAttachFileToActivityInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AttachFileToActivityInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AttachFileToActivityInstanceCompleted(Me, New AttachFileToActivityInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/AttachCo"& _ 
            "mmentToProcessInstance", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AttachCommentToProcessInstance(ByVal Client As String, ByVal UserID As Long, ByVal processInstanceID As Long, ByVal Comment As String) As Boolean
            Dim results() As Object = Me.Invoke("AttachCommentToProcessInstance", New Object() {Client, UserID, processInstanceID, Comment})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AttachCommentToProcessInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal processInstanceID As Long, ByVal Comment As String)
            Me.AttachCommentToProcessInstanceAsync(Client, UserID, processInstanceID, Comment, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AttachCommentToProcessInstanceAsync(ByVal Client As String, ByVal UserID As Long, ByVal processInstanceID As Long, ByVal Comment As String, ByVal userState As Object)
            If (Me.AttachCommentToProcessInstanceOperationCompleted Is Nothing) Then
                Me.AttachCommentToProcessInstanceOperationCompleted = AddressOf Me.OnAttachCommentToProcessInstanceOperationCompleted
            End If
            Me.InvokeAsync("AttachCommentToProcessInstance", New Object() {Client, UserID, processInstanceID, Comment}, Me.AttachCommentToProcessInstanceOperationCompleted, userState)
        End Sub
        
        Private Sub OnAttachCommentToProcessInstanceOperationCompleted(ByVal arg As Object)
            If (Not (Me.AttachCommentToProcessInstanceCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AttachCommentToProcessInstanceCompleted(Me, New AttachCommentToProcessInstanceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce"& _ 
            "ssCasesByProcess", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessCasesByProcess(ByVal Client As String, ByVal UserID As Long, ByVal IdProcess As Long, ByVal IsOnlyEnabled As Boolean) As String
            Dim results() As Object = Me.Invoke("GetProcessCasesByProcess", New Object() {Client, UserID, IdProcess, IsOnlyEnabled})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessCasesByProcessAsync(ByVal Client As String, ByVal UserID As Long, ByVal IdProcess As Long, ByVal IsOnlyEnabled As Boolean)
            Me.GetProcessCasesByProcessAsync(Client, UserID, IdProcess, IsOnlyEnabled, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessCasesByProcessAsync(ByVal Client As String, ByVal UserID As Long, ByVal IdProcess As Long, ByVal IsOnlyEnabled As Boolean, ByVal userState As Object)
            If (Me.GetProcessCasesByProcessOperationCompleted Is Nothing) Then
                Me.GetProcessCasesByProcessOperationCompleted = AddressOf Me.OnGetProcessCasesByProcessOperationCompleted
            End If
            Me.InvokeAsync("GetProcessCasesByProcess", New Object() {Client, UserID, IdProcess, IsOnlyEnabled}, Me.GetProcessCasesByProcessOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessCasesByProcessOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessCasesByProcessCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessCasesByProcessCompleted(Me, New GetProcessCasesByProcessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetForms"& _ 
            "ByProcessCase", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFormsByProcessCase(ByVal Client As String, ByVal UserID As Long, ByVal IdProcessCase As Long) As String
            Dim results() As Object = Me.Invoke("GetFormsByProcessCase", New Object() {Client, UserID, IdProcessCase})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetFormsByProcessCaseAsync(ByVal Client As String, ByVal UserID As Long, ByVal IdProcessCase As Long)
            Me.GetFormsByProcessCaseAsync(Client, UserID, IdProcessCase, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetFormsByProcessCaseAsync(ByVal Client As String, ByVal UserID As Long, ByVal IdProcessCase As Long, ByVal userState As Object)
            If (Me.GetFormsByProcessCaseOperationCompleted Is Nothing) Then
                Me.GetFormsByProcessCaseOperationCompleted = AddressOf Me.OnGetFormsByProcessCaseOperationCompleted
            End If
            Me.InvokeAsync("GetFormsByProcessCase", New Object() {Client, UserID, IdProcessCase}, Me.GetFormsByProcessCaseOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetFormsByProcessCaseOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetFormsByProcessCaseCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetFormsByProcessCaseCompleted(Me, New GetFormsByProcessCaseCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce"& _ 
            "ssAttribute", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessAttribute(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcess As Long) As ProcessAttributeEntity()
            Dim results() As Object = Me.Invoke("GetProcessAttribute", New Object() {Client, UserID, lIdProcess})
            Return CType(results(0),ProcessAttributeEntity())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessAttributeAsync(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcess As Long)
            Me.GetProcessAttributeAsync(Client, UserID, lIdProcess, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessAttributeAsync(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcess As Long, ByVal userState As Object)
            If (Me.GetProcessAttributeOperationCompleted Is Nothing) Then
                Me.GetProcessAttributeOperationCompleted = AddressOf Me.OnGetProcessAttributeOperationCompleted
            End If
            Me.InvokeAsync("GetProcessAttribute", New Object() {Client, UserID, lIdProcess}, Me.GetProcessAttributeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessAttributeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessAttributeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessAttributeCompleted(Me, New GetProcessAttributeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce"& _ 
            "ssAttributeValue", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessAttributeValue(ByVal Client As String, ByVal UserID As Long, ByVal IdProcessInstance As Long) As ProcessAttributeEntity()
            Dim results() As Object = Me.Invoke("GetProcessAttributeValue", New Object() {Client, UserID, IdProcessInstance})
            Return CType(results(0),ProcessAttributeEntity())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessAttributeValueAsync(ByVal Client As String, ByVal UserID As Long, ByVal IdProcessInstance As Long)
            Me.GetProcessAttributeValueAsync(Client, UserID, IdProcessInstance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessAttributeValueAsync(ByVal Client As String, ByVal UserID As Long, ByVal IdProcessInstance As Long, ByVal userState As Object)
            If (Me.GetProcessAttributeValueOperationCompleted Is Nothing) Then
                Me.GetProcessAttributeValueOperationCompleted = AddressOf Me.OnGetProcessAttributeValueOperationCompleted
            End If
            Me.InvokeAsync("GetProcessAttributeValue", New Object() {Client, UserID, IdProcessInstance}, Me.GetProcessAttributeValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessAttributeValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessAttributeValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessAttributeValueCompleted(Me, New GetProcessAttributeValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/GetProce"& _ 
            "ssAttributeValueById", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetProcessAttributeValueById(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcessInstance As Long, ByVal lIdProcessAttribute As Long) As ProcessAttributeEntity()
            Dim results() As Object = Me.Invoke("GetProcessAttributeValueById", New Object() {Client, UserID, lIdProcessInstance, lIdProcessAttribute})
            Return CType(results(0),ProcessAttributeEntity())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetProcessAttributeValueByIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcessInstance As Long, ByVal lIdProcessAttribute As Long)
            Me.GetProcessAttributeValueByIdAsync(Client, UserID, lIdProcessInstance, lIdProcessAttribute, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetProcessAttributeValueByIdAsync(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcessInstance As Long, ByVal lIdProcessAttribute As Long, ByVal userState As Object)
            If (Me.GetProcessAttributeValueByIdOperationCompleted Is Nothing) Then
                Me.GetProcessAttributeValueByIdOperationCompleted = AddressOf Me.OnGetProcessAttributeValueByIdOperationCompleted
            End If
            Me.InvokeAsync("GetProcessAttributeValueById", New Object() {Client, UserID, lIdProcessInstance, lIdProcessAttribute}, Me.GetProcessAttributeValueByIdOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetProcessAttributeValueByIdOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetProcessAttributeValueByIdCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetProcessAttributeValueByIdCompleted(Me, New GetProcessAttributeValueByIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx/UpdatePr"& _ 
            "ocessAttributeValue", RequestNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", ResponseNamespace:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UpdateProcessAttributeValue(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcessInstance As Long, ByVal lIdProcessAttribute As Long, ByVal Value As String) As Boolean
            Dim results() As Object = Me.Invoke("UpdateProcessAttributeValue", New Object() {Client, UserID, lIdProcessInstance, lIdProcessAttribute, Value})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub UpdateProcessAttributeValueAsync(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcessInstance As Long, ByVal lIdProcessAttribute As Long, ByVal Value As String)
            Me.UpdateProcessAttributeValueAsync(Client, UserID, lIdProcessInstance, lIdProcessAttribute, Value, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UpdateProcessAttributeValueAsync(ByVal Client As String, ByVal UserID As Long, ByVal lIdProcessInstance As Long, ByVal lIdProcessAttribute As Long, ByVal Value As String, ByVal userState As Object)
            If (Me.UpdateProcessAttributeValueOperationCompleted Is Nothing) Then
                Me.UpdateProcessAttributeValueOperationCompleted = AddressOf Me.OnUpdateProcessAttributeValueOperationCompleted
            End If
            Me.InvokeAsync("UpdateProcessAttributeValue", New Object() {Client, UserID, lIdProcessInstance, lIdProcessAttribute, Value}, Me.UpdateProcessAttributeValueOperationCompleted, userState)
        End Sub
        
        Private Sub OnUpdateProcessAttributeValueOperationCompleted(ByVal arg As Object)
            If (Not (Me.UpdateProcessAttributeValueCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UpdateProcessAttributeValueCompleted(Me, New UpdateProcessAttributeValueCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx")>  _
    Partial Public Class ListItem
        
        Private enabledField As Boolean
        
        Private selectedField As Boolean
        
        Private textField As String
        
        Private valueField As String
        
        Public Sub New()
            MyBase.New
            Me.enabledField = true
            Me.selectedField = false
            Me.textField = ""
            Me.valueField = ""
        End Sub
        
        '''<comentarios/>
        <System.ComponentModel.DefaultValueAttribute(true)>  _
        Public Property Enabled() As Boolean
            Get
                Return Me.enabledField
            End Get
            Set
                Me.enabledField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.ComponentModel.DefaultValueAttribute(false)>  _
        Public Property Selected() As Boolean
            Get
                Return Me.selectedField
            End Get
            Set
                Me.selectedField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.ComponentModel.DefaultValueAttribute("")>  _
        Public Property Text() As String
            Get
                Return Me.textField
            End Get
            Set
                Me.textField = value
            End Set
        End Property
        
        '''<comentarios/>
        <System.ComponentModel.DefaultValueAttribute("")>  _
        Public Property Value() As String
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<comentarios/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.3053"),  _
     System.SerializableAttribute(),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Xml.Serialization.XmlTypeAttribute([Namespace]:="http://www.workflowcolombia.com/eworkflow/Services/WorkFlowServices.asmx")>  _
    Partial Public Class ProcessAttributeEntity
        
        Private idField As Integer
        
        Private idProcessField As Long
        
        Private idProcessInstanceField As Long
        
        Private nameField As String
        
        Private valueField As String
        
        '''<comentarios/>
        Public Property Id() As Integer
            Get
                Return Me.idField
            End Get
            Set
                Me.idField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property IdProcess() As Long
            Get
                Return Me.idProcessField
            End Get
            Set
                Me.idProcessField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property IdProcessInstance() As Long
            Get
                Return Me.idProcessInstanceField
            End Get
            Set
                Me.idProcessInstanceField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Name() As String
            Get
                Return Me.nameField
            End Get
            Set
                Me.nameField = value
            End Set
        End Property
        
        '''<comentarios/>
        Public Property Value() As String
            Get
                Return Me.valueField
            End Get
            Set
                Me.valueField = value
            End Set
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub TestTransmissionCompletedEventHandler(ByVal sender As Object, ByVal e As TestTransmissionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class TestTransmissionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetPackagesCompletedEventHandler(ByVal sender As Object, ByVal e As GetPackagesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPackagesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetProcessesCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetProcessByIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetActivityInstancesByUserIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetActivityInstancesByUserIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActivityInstancesByUserIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetActivityInstanceByUserIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetActivityInstanceByUserIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetActivityInstanceByUserIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetProcessInstancesByIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessInstancesByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessInstancesByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub CreateProcessXMLCompletedEventHandler(ByVal sender As Object, ByVal e As CreateProcessXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CreateProcessXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub WMCreateProcessInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As WMCreateProcessInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMCreateProcessInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub WMStartProcessInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As WMStartProcessInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class WMStartProcessInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Long
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Long)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub StartActivityInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As StartActivityInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StartActivityInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub EndActivityInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As EndActivityInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class EndActivityInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetConditionsByActivityInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetConditionsByActivityInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConditionsByActivityInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ListItem()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ListItem())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetConditionsTypeActivityInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As GetConditionsTypeActivityInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConditionsTypeActivityInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetConditionsCompletedEventHandler(ByVal sender As Object, ByVal e As GetConditionsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetConditionsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AttachDataToActivityInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As AttachDataToActivityInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AttachDataToActivityInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AttachFileToActivityInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As AttachFileToActivityInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AttachFileToActivityInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub AttachCommentToProcessInstanceCompletedEventHandler(ByVal sender As Object, ByVal e As AttachCommentToProcessInstanceCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AttachCommentToProcessInstanceCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetProcessCasesByProcessCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessCasesByProcessCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessCasesByProcessCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetFormsByProcessCaseCompletedEventHandler(ByVal sender As Object, ByVal e As GetFormsByProcessCaseCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetFormsByProcessCaseCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetProcessAttributeCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessAttributeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessAttributeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessAttributeEntity()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessAttributeEntity())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetProcessAttributeValueCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessAttributeValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessAttributeValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessAttributeEntity()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessAttributeEntity())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub GetProcessAttributeValueByIdCompletedEventHandler(ByVal sender As Object, ByVal e As GetProcessAttributeValueByIdCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetProcessAttributeValueByIdCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As ProcessAttributeEntity()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),ProcessAttributeEntity())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053")>  _
    Public Delegate Sub UpdateProcessAttributeValueCompletedEventHandler(ByVal sender As Object, ByVal e As UpdateProcessAttributeValueCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.3053"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UpdateProcessAttributeValueCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
End Namespace
