'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsRptGeneralListContracts"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsRptGeneralListContracts
    Inherits Global.System.Data.DataSet
    
    Private tablevReportGeneralListContracts As vReportGeneralListContractsDataTable
    
    Private tablevReportContractorByGeneralListContracts As vReportContractorByGeneralListContractsDataTable
    
    Private tablevReportPaymentsListByGeneralListContracts As vReportPaymentsListByGeneralListContractsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("vReportGeneralListContracts")) Is Nothing) Then
                MyBase.Tables.Add(New vReportGeneralListContractsDataTable(ds.Tables("vReportGeneralListContracts")))
            End If
            If (Not (ds.Tables("vReportContractorByGeneralListContracts")) Is Nothing) Then
                MyBase.Tables.Add(New vReportContractorByGeneralListContractsDataTable(ds.Tables("vReportContractorByGeneralListContracts")))
            End If
            If (Not (ds.Tables("vReportPaymentsListByGeneralListContracts")) Is Nothing) Then
                MyBase.Tables.Add(New vReportPaymentsListByGeneralListContractsDataTable(ds.Tables("vReportPaymentsListByGeneralListContracts")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vReportGeneralListContracts() As vReportGeneralListContractsDataTable
        Get
            Return Me.tablevReportGeneralListContracts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vReportContractorByGeneralListContracts() As vReportContractorByGeneralListContractsDataTable
        Get
            Return Me.tablevReportContractorByGeneralListContracts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vReportPaymentsListByGeneralListContracts() As vReportPaymentsListByGeneralListContractsDataTable
        Get
            Return Me.tablevReportPaymentsListByGeneralListContracts
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsRptGeneralListContracts = CType(MyBase.Clone,dsRptGeneralListContracts)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("vReportGeneralListContracts")) Is Nothing) Then
                MyBase.Tables.Add(New vReportGeneralListContractsDataTable(ds.Tables("vReportGeneralListContracts")))
            End If
            If (Not (ds.Tables("vReportContractorByGeneralListContracts")) Is Nothing) Then
                MyBase.Tables.Add(New vReportContractorByGeneralListContractsDataTable(ds.Tables("vReportContractorByGeneralListContracts")))
            End If
            If (Not (ds.Tables("vReportPaymentsListByGeneralListContracts")) Is Nothing) Then
                MyBase.Tables.Add(New vReportPaymentsListByGeneralListContractsDataTable(ds.Tables("vReportPaymentsListByGeneralListContracts")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablevReportGeneralListContracts = CType(MyBase.Tables("vReportGeneralListContracts"),vReportGeneralListContractsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevReportGeneralListContracts) Is Nothing) Then
                Me.tablevReportGeneralListContracts.InitVars
            End If
        End If
        Me.tablevReportContractorByGeneralListContracts = CType(MyBase.Tables("vReportContractorByGeneralListContracts"),vReportContractorByGeneralListContractsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevReportContractorByGeneralListContracts) Is Nothing) Then
                Me.tablevReportContractorByGeneralListContracts.InitVars
            End If
        End If
        Me.tablevReportPaymentsListByGeneralListContracts = CType(MyBase.Tables("vReportPaymentsListByGeneralListContracts"),vReportPaymentsListByGeneralListContractsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevReportPaymentsListByGeneralListContracts) Is Nothing) Then
                Me.tablevReportPaymentsListByGeneralListContracts.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsRptGeneralListContracts"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsRptGeneralListContracts.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablevReportGeneralListContracts = New vReportGeneralListContractsDataTable
        MyBase.Tables.Add(Me.tablevReportGeneralListContracts)
        Me.tablevReportContractorByGeneralListContracts = New vReportContractorByGeneralListContractsDataTable
        MyBase.Tables.Add(Me.tablevReportContractorByGeneralListContracts)
        Me.tablevReportPaymentsListByGeneralListContracts = New vReportPaymentsListByGeneralListContractsDataTable
        MyBase.Tables.Add(Me.tablevReportPaymentsListByGeneralListContracts)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevReportGeneralListContracts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevReportContractorByGeneralListContracts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevReportPaymentsListByGeneralListContracts() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsRptGeneralListContracts = New dsRptGeneralListContracts
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub vReportGeneralListContractsRowChangeEventHandler(ByVal sender As Object, ByVal e As vReportGeneralListContractsRowChangeEvent)
    
    Public Delegate Sub vReportContractorByGeneralListContractsRowChangeEventHandler(ByVal sender As Object, ByVal e As vReportContractorByGeneralListContractsRowChangeEvent)
    
    Public Delegate Sub vReportPaymentsListByGeneralListContractsRowChangeEventHandler(ByVal sender As Object, ByVal e As vReportPaymentsListByGeneralListContractsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vReportGeneralListContractsDataTable
        Inherits Global.System.Data.TypedTableBase(Of vReportGeneralListContractsRow)
        
        Private columnRequestNumber As Global.System.Data.DataColumn
        
        Private columnContractNumber As Global.System.Data.DataColumn
        
        Private columnIdManagement As Global.System.Data.DataColumn
        
        Private columnManagementName As Global.System.Data.DataColumn
        
        Private columnIdStrategicLine As Global.System.Data.DataColumn
        
        Private columnStrategicLineName As Global.System.Data.DataColumn
        
        Private columnIdProject As Global.System.Data.DataColumn
        
        Private columnProjectName As Global.System.Data.DataColumn
        
        Private columnContractValue As Global.System.Data.DataColumn
        
        Private columnSubjectContract As Global.System.Data.DataColumn
        
        Private columnClosingDate As Global.System.Data.DataColumn
        
        Private columnIdContractNature As Global.System.Data.DataColumn
        
        Private columnContractNumberAdjusted As Global.System.Data.DataColumn
        
        Private columnProductsOrDeliverables As Global.System.Data.DataColumn
        
        Private columnSupervisor As Global.System.Data.DataColumn
        
        Private columnStartDate As Global.System.Data.DataColumn
        
        Private columnEndDate As Global.System.Data.DataColumn
        
        Private columnContractState As Global.System.Data.DataColumn
        
        Private columnEffectiveBudget As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vReportGeneralListContracts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContractNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdManagementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdManagement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManagementNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManagementName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdStrategicLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdStrategicLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StrategicLineNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStrategicLineName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContractValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubjectContractColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubjectContract
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClosingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClosingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdContractNatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdContractNature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContractNumberAdjustedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractNumberAdjusted
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProductsOrDeliverablesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProductsOrDeliverables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SupervisorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSupervisor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContractStateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EffectiveBudgetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEffectiveBudget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vReportGeneralListContractsRow
            Get
                Return CType(Me.Rows(index),vReportGeneralListContractsRow)
            End Get
        End Property
        
        Public Event vReportGeneralListContractsRowChanging As vReportGeneralListContractsRowChangeEventHandler
        
        Public Event vReportGeneralListContractsRowChanged As vReportGeneralListContractsRowChangeEventHandler
        
        Public Event vReportGeneralListContractsRowDeleting As vReportGeneralListContractsRowChangeEventHandler
        
        Public Event vReportGeneralListContractsRowDeleted As vReportGeneralListContractsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvReportGeneralListContractsRow(ByVal row As vReportGeneralListContractsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvReportGeneralListContractsRow( _
                    ByVal RequestNumber As Integer,  _
                    ByVal ContractNumber As String,  _
                    ByVal IdManagement As Integer,  _
                    ByVal ManagementName As String,  _
                    ByVal IdStrategicLine As Integer,  _
                    ByVal StrategicLineName As String,  _
                    ByVal IdProject As Integer,  _
                    ByVal ProjectName As String,  _
                    ByVal ContractValue As Decimal,  _
                    ByVal SubjectContract As String,  _
                    ByVal ClosingDate As Date,  _
                    ByVal IdContractNature As Integer,  _
                    ByVal ContractNumberAdjusted As String,  _
                    ByVal ProductsOrDeliverables As String,  _
                    ByVal Supervisor As String,  _
                    ByVal StartDate As Date,  _
                    ByVal EndDate As Date,  _
                    ByVal ContractState As String,  _
                    ByVal EffectiveBudget As Integer) As vReportGeneralListContractsRow
            Dim rowvReportGeneralListContractsRow As vReportGeneralListContractsRow = CType(Me.NewRow,vReportGeneralListContractsRow)
            Dim columnValuesArray() As Object = New Object() {RequestNumber, ContractNumber, IdManagement, ManagementName, IdStrategicLine, StrategicLineName, IdProject, ProjectName, ContractValue, SubjectContract, ClosingDate, IdContractNature, ContractNumberAdjusted, ProductsOrDeliverables, Supervisor, StartDate, EndDate, ContractState, EffectiveBudget}
            rowvReportGeneralListContractsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowvReportGeneralListContractsRow)
            Return rowvReportGeneralListContractsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As vReportGeneralListContractsDataTable = CType(MyBase.Clone,vReportGeneralListContractsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New vReportGeneralListContractsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRequestNumber = MyBase.Columns("RequestNumber")
            Me.columnContractNumber = MyBase.Columns("ContractNumber")
            Me.columnIdManagement = MyBase.Columns("IdManagement")
            Me.columnManagementName = MyBase.Columns("ManagementName")
            Me.columnIdStrategicLine = MyBase.Columns("IdStrategicLine")
            Me.columnStrategicLineName = MyBase.Columns("StrategicLineName")
            Me.columnIdProject = MyBase.Columns("IdProject")
            Me.columnProjectName = MyBase.Columns("ProjectName")
            Me.columnContractValue = MyBase.Columns("ContractValue")
            Me.columnSubjectContract = MyBase.Columns("SubjectContract")
            Me.columnClosingDate = MyBase.Columns("ClosingDate")
            Me.columnIdContractNature = MyBase.Columns("IdContractNature")
            Me.columnContractNumberAdjusted = MyBase.Columns("ContractNumberAdjusted")
            Me.columnProductsOrDeliverables = MyBase.Columns("ProductsOrDeliverables")
            Me.columnSupervisor = MyBase.Columns("Supervisor")
            Me.columnStartDate = MyBase.Columns("StartDate")
            Me.columnEndDate = MyBase.Columns("EndDate")
            Me.columnContractState = MyBase.Columns("ContractState")
            Me.columnEffectiveBudget = MyBase.Columns("EffectiveBudget")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRequestNumber = New Global.System.Data.DataColumn("RequestNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestNumber)
            Me.columnContractNumber = New Global.System.Data.DataColumn("ContractNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNumber)
            Me.columnIdManagement = New Global.System.Data.DataColumn("IdManagement", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdManagement)
            Me.columnManagementName = New Global.System.Data.DataColumn("ManagementName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManagementName)
            Me.columnIdStrategicLine = New Global.System.Data.DataColumn("IdStrategicLine", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdStrategicLine)
            Me.columnStrategicLineName = New Global.System.Data.DataColumn("StrategicLineName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStrategicLineName)
            Me.columnIdProject = New Global.System.Data.DataColumn("IdProject", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProject)
            Me.columnProjectName = New Global.System.Data.DataColumn("ProjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectName)
            Me.columnContractValue = New Global.System.Data.DataColumn("ContractValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractValue)
            Me.columnSubjectContract = New Global.System.Data.DataColumn("SubjectContract", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubjectContract)
            Me.columnClosingDate = New Global.System.Data.DataColumn("ClosingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClosingDate)
            Me.columnIdContractNature = New Global.System.Data.DataColumn("IdContractNature", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdContractNature)
            Me.columnContractNumberAdjusted = New Global.System.Data.DataColumn("ContractNumberAdjusted", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractNumberAdjusted)
            Me.columnProductsOrDeliverables = New Global.System.Data.DataColumn("ProductsOrDeliverables", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProductsOrDeliverables)
            Me.columnSupervisor = New Global.System.Data.DataColumn("Supervisor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSupervisor)
            Me.columnStartDate = New Global.System.Data.DataColumn("StartDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartDate)
            Me.columnEndDate = New Global.System.Data.DataColumn("EndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDate)
            Me.columnContractState = New Global.System.Data.DataColumn("ContractState", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractState)
            Me.columnEffectiveBudget = New Global.System.Data.DataColumn("EffectiveBudget", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEffectiveBudget)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnRequestNumber, Me.columnIdStrategicLine}, false))
            Me.columnRequestNumber.AllowDBNull = false
            Me.columnContractNumber.MaxLength = 50
            Me.columnManagementName.AllowDBNull = false
            Me.columnManagementName.MaxLength = 255
            Me.columnStrategicLineName.MaxLength = 255
            Me.columnProjectName.AllowDBNull = false
            Me.columnProjectName.MaxLength = 255
            Me.columnSubjectContract.MaxLength = 255
            Me.columnContractNumberAdjusted.MaxLength = 50
            Me.columnProductsOrDeliverables.MaxLength = 255
            Me.columnSupervisor.MaxLength = 255
            Me.columnContractState.ReadOnly = true
            Me.columnContractState.MaxLength = 7
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvReportGeneralListContractsRow() As vReportGeneralListContractsRow
            Return CType(Me.NewRow,vReportGeneralListContractsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New vReportGeneralListContractsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(vReportGeneralListContractsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vReportGeneralListContractsRowChangedEvent) Is Nothing) Then
                RaiseEvent vReportGeneralListContractsRowChanged(Me, New vReportGeneralListContractsRowChangeEvent(CType(e.Row,vReportGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vReportGeneralListContractsRowChangingEvent) Is Nothing) Then
                RaiseEvent vReportGeneralListContractsRowChanging(Me, New vReportGeneralListContractsRowChangeEvent(CType(e.Row,vReportGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vReportGeneralListContractsRowDeletedEvent) Is Nothing) Then
                RaiseEvent vReportGeneralListContractsRowDeleted(Me, New vReportGeneralListContractsRowChangeEvent(CType(e.Row,vReportGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vReportGeneralListContractsRowDeletingEvent) Is Nothing) Then
                RaiseEvent vReportGeneralListContractsRowDeleting(Me, New vReportGeneralListContractsRowChangeEvent(CType(e.Row,vReportGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevReportGeneralListContractsRow(ByVal row As vReportGeneralListContractsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRptGeneralListContracts = New dsRptGeneralListContracts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vReportGeneralListContractsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vReportContractorByGeneralListContractsDataTable
        Inherits Global.System.Data.TypedTableBase(Of vReportContractorByGeneralListContractsRow)
        
        Private columnIdContractRequest As Global.System.Data.DataColumn
        
        Private columnContractorName As Global.System.Data.DataColumn
        
        Private columnNit As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vReportContractorByGeneralListContracts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdContractRequestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdContractRequest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContractorNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContractorName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NitColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNit
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vReportContractorByGeneralListContractsRow
            Get
                Return CType(Me.Rows(index),vReportContractorByGeneralListContractsRow)
            End Get
        End Property
        
        Public Event vReportContractorByGeneralListContractsRowChanging As vReportContractorByGeneralListContractsRowChangeEventHandler
        
        Public Event vReportContractorByGeneralListContractsRowChanged As vReportContractorByGeneralListContractsRowChangeEventHandler
        
        Public Event vReportContractorByGeneralListContractsRowDeleting As vReportContractorByGeneralListContractsRowChangeEventHandler
        
        Public Event vReportContractorByGeneralListContractsRowDeleted As vReportContractorByGeneralListContractsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvReportContractorByGeneralListContractsRow(ByVal row As vReportContractorByGeneralListContractsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvReportContractorByGeneralListContractsRow(ByVal IdContractRequest As Integer, ByVal ContractorName As String, ByVal Nit As String) As vReportContractorByGeneralListContractsRow
            Dim rowvReportContractorByGeneralListContractsRow As vReportContractorByGeneralListContractsRow = CType(Me.NewRow,vReportContractorByGeneralListContractsRow)
            Dim columnValuesArray() As Object = New Object() {IdContractRequest, ContractorName, Nit}
            rowvReportContractorByGeneralListContractsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowvReportContractorByGeneralListContractsRow)
            Return rowvReportContractorByGeneralListContractsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As vReportContractorByGeneralListContractsDataTable = CType(MyBase.Clone,vReportContractorByGeneralListContractsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New vReportContractorByGeneralListContractsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdContractRequest = MyBase.Columns("IdContractRequest")
            Me.columnContractorName = MyBase.Columns("ContractorName")
            Me.columnNit = MyBase.Columns("Nit")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdContractRequest = New Global.System.Data.DataColumn("IdContractRequest", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdContractRequest)
            Me.columnContractorName = New Global.System.Data.DataColumn("ContractorName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContractorName)
            Me.columnNit = New Global.System.Data.DataColumn("Nit", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNit)
            Me.columnIdContractRequest.AllowDBNull = false
            Me.columnContractorName.MaxLength = 150
            Me.columnNit.AllowDBNull = false
            Me.columnNit.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvReportContractorByGeneralListContractsRow() As vReportContractorByGeneralListContractsRow
            Return CType(Me.NewRow,vReportContractorByGeneralListContractsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New vReportContractorByGeneralListContractsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(vReportContractorByGeneralListContractsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vReportContractorByGeneralListContractsRowChangedEvent) Is Nothing) Then
                RaiseEvent vReportContractorByGeneralListContractsRowChanged(Me, New vReportContractorByGeneralListContractsRowChangeEvent(CType(e.Row,vReportContractorByGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vReportContractorByGeneralListContractsRowChangingEvent) Is Nothing) Then
                RaiseEvent vReportContractorByGeneralListContractsRowChanging(Me, New vReportContractorByGeneralListContractsRowChangeEvent(CType(e.Row,vReportContractorByGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vReportContractorByGeneralListContractsRowDeletedEvent) Is Nothing) Then
                RaiseEvent vReportContractorByGeneralListContractsRowDeleted(Me, New vReportContractorByGeneralListContractsRowChangeEvent(CType(e.Row,vReportContractorByGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vReportContractorByGeneralListContractsRowDeletingEvent) Is Nothing) Then
                RaiseEvent vReportContractorByGeneralListContractsRowDeleting(Me, New vReportContractorByGeneralListContractsRowChangeEvent(CType(e.Row,vReportContractorByGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevReportContractorByGeneralListContractsRow(ByVal row As vReportContractorByGeneralListContractsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRptGeneralListContracts = New dsRptGeneralListContracts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vReportContractorByGeneralListContractsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vReportPaymentsListByGeneralListContractsDataTable
        Inherits Global.System.Data.TypedTableBase(Of vReportPaymentsListByGeneralListContractsRow)
        
        Private columnIdContractRequest As Global.System.Data.DataColumn
        
        Private columnPercentage As Global.System.Data.DataColumn
        
        Private columnValue As Global.System.Data.DataColumn
        
        Private columnDate As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vReportPaymentsListByGeneralListContracts"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdContractRequestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdContractRequest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PercentageColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPercentage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vReportPaymentsListByGeneralListContractsRow
            Get
                Return CType(Me.Rows(index),vReportPaymentsListByGeneralListContractsRow)
            End Get
        End Property
        
        Public Event vReportPaymentsListByGeneralListContractsRowChanging As vReportPaymentsListByGeneralListContractsRowChangeEventHandler
        
        Public Event vReportPaymentsListByGeneralListContractsRowChanged As vReportPaymentsListByGeneralListContractsRowChangeEventHandler
        
        Public Event vReportPaymentsListByGeneralListContractsRowDeleting As vReportPaymentsListByGeneralListContractsRowChangeEventHandler
        
        Public Event vReportPaymentsListByGeneralListContractsRowDeleted As vReportPaymentsListByGeneralListContractsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvReportPaymentsListByGeneralListContractsRow(ByVal row As vReportPaymentsListByGeneralListContractsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvReportPaymentsListByGeneralListContractsRow(ByVal IdContractRequest As Integer, ByVal Percentage As Decimal, ByVal Value As Decimal, ByVal _Date As Date) As vReportPaymentsListByGeneralListContractsRow
            Dim rowvReportPaymentsListByGeneralListContractsRow As vReportPaymentsListByGeneralListContractsRow = CType(Me.NewRow,vReportPaymentsListByGeneralListContractsRow)
            Dim columnValuesArray() As Object = New Object() {IdContractRequest, Percentage, Value, _Date}
            rowvReportPaymentsListByGeneralListContractsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowvReportPaymentsListByGeneralListContractsRow)
            Return rowvReportPaymentsListByGeneralListContractsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As vReportPaymentsListByGeneralListContractsDataTable = CType(MyBase.Clone,vReportPaymentsListByGeneralListContractsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New vReportPaymentsListByGeneralListContractsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdContractRequest = MyBase.Columns("IdContractRequest")
            Me.columnPercentage = MyBase.Columns("Percentage")
            Me.columnValue = MyBase.Columns("Value")
            Me.columnDate = MyBase.Columns("Date")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdContractRequest = New Global.System.Data.DataColumn("IdContractRequest", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdContractRequest)
            Me.columnPercentage = New Global.System.Data.DataColumn("Percentage", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPercentage)
            Me.columnValue = New Global.System.Data.DataColumn("Value", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValue)
            Me.columnDate = New Global.System.Data.DataColumn("Date", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "DateColumn")
            Me.columnDate.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnDate")
            Me.columnDate.ExtendedProperties.Add("Generator_UserColumnName", "Date")
            MyBase.Columns.Add(Me.columnDate)
            Me.columnIdContractRequest.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvReportPaymentsListByGeneralListContractsRow() As vReportPaymentsListByGeneralListContractsRow
            Return CType(Me.NewRow,vReportPaymentsListByGeneralListContractsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New vReportPaymentsListByGeneralListContractsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(vReportPaymentsListByGeneralListContractsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vReportPaymentsListByGeneralListContractsRowChangedEvent) Is Nothing) Then
                RaiseEvent vReportPaymentsListByGeneralListContractsRowChanged(Me, New vReportPaymentsListByGeneralListContractsRowChangeEvent(CType(e.Row,vReportPaymentsListByGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vReportPaymentsListByGeneralListContractsRowChangingEvent) Is Nothing) Then
                RaiseEvent vReportPaymentsListByGeneralListContractsRowChanging(Me, New vReportPaymentsListByGeneralListContractsRowChangeEvent(CType(e.Row,vReportPaymentsListByGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vReportPaymentsListByGeneralListContractsRowDeletedEvent) Is Nothing) Then
                RaiseEvent vReportPaymentsListByGeneralListContractsRowDeleted(Me, New vReportPaymentsListByGeneralListContractsRowChangeEvent(CType(e.Row,vReportPaymentsListByGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vReportPaymentsListByGeneralListContractsRowDeletingEvent) Is Nothing) Then
                RaiseEvent vReportPaymentsListByGeneralListContractsRowDeleting(Me, New vReportPaymentsListByGeneralListContractsRowChangeEvent(CType(e.Row,vReportPaymentsListByGeneralListContractsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevReportPaymentsListByGeneralListContractsRow(ByVal row As vReportPaymentsListByGeneralListContractsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsRptGeneralListContracts = New dsRptGeneralListContracts
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vReportPaymentsListByGeneralListContractsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vReportGeneralListContractsRow
        Inherits Global.System.Data.DataRow
        
        Private tablevReportGeneralListContracts As vReportGeneralListContractsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevReportGeneralListContracts = CType(Me.Table,vReportGeneralListContractsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestNumber() As Integer
            Get
                Return CType(Me(Me.tablevReportGeneralListContracts.RequestNumberColumn),Integer)
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.RequestNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContractNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.ContractNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ContractNumber' de la tabla 'vReportGeneralListContracts'"& _ 
                            " es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.ContractNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdManagement() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.IdManagementColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdManagement' de la tabla 'vReportGeneralListContracts' e"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.IdManagementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ManagementName() As String
            Get
                Return CType(Me(Me.tablevReportGeneralListContracts.ManagementNameColumn),String)
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.ManagementNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdStrategicLine() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.IdStrategicLineColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdStrategicLine' de la tabla 'vReportGeneralListContracts"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.IdStrategicLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StrategicLineName() As String
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.StrategicLineNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'StrategicLineName' de la tabla 'vReportGeneralListContrac"& _ 
                            "ts' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.StrategicLineNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProject() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.IdProjectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdProject' de la tabla 'vReportGeneralListContracts' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.IdProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectName() As String
            Get
                Return CType(Me(Me.tablevReportGeneralListContracts.ProjectNameColumn),String)
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.ProjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContractValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.ContractValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ContractValue' de la tabla 'vReportGeneralListContracts' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.ContractValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubjectContract() As String
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.SubjectContractColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SubjectContract' de la tabla 'vReportGeneralListContracts"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.SubjectContractColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClosingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.ClosingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClosingDate' de la tabla 'vReportGeneralListContracts' es"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.ClosingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdContractNature() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.IdContractNatureColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdContractNature' de la tabla 'vReportGeneralListContract"& _ 
                            "s' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.IdContractNatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContractNumberAdjusted() As String
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.ContractNumberAdjustedColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ContractNumberAdjusted' de la tabla 'vReportGeneralListCo"& _ 
                            "ntracts' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.ContractNumberAdjustedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProductsOrDeliverables() As String
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.ProductsOrDeliverablesColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ProductsOrDeliverables' de la tabla 'vReportGeneralListCo"& _ 
                            "ntracts' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.ProductsOrDeliverablesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Supervisor() As String
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.SupervisorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Supervisor' de la tabla 'vReportGeneralListContracts' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.SupervisorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.StartDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'StartDate' de la tabla 'vReportGeneralListContracts' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.StartDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.EndDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EndDate' de la tabla 'vReportGeneralListContracts' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.EndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContractState() As String
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.ContractStateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ContractState' de la tabla 'vReportGeneralListContracts' "& _ 
                            "es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.ContractStateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EffectiveBudget() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevReportGeneralListContracts.EffectiveBudgetColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EffectiveBudget' de la tabla 'vReportGeneralListContracts"& _ 
                            "' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportGeneralListContracts.EffectiveBudgetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContractNumberNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.ContractNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContractNumberNull()
            Me(Me.tablevReportGeneralListContracts.ContractNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdManagementNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.IdManagementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdManagementNull()
            Me(Me.tablevReportGeneralListContracts.IdManagementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdStrategicLineNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.IdStrategicLineColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdStrategicLineNull()
            Me(Me.tablevReportGeneralListContracts.IdStrategicLineColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStrategicLineNameNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.StrategicLineNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStrategicLineNameNull()
            Me(Me.tablevReportGeneralListContracts.StrategicLineNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdProjectNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.IdProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdProjectNull()
            Me(Me.tablevReportGeneralListContracts.IdProjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContractValueNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.ContractValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContractValueNull()
            Me(Me.tablevReportGeneralListContracts.ContractValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubjectContractNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.SubjectContractColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubjectContractNull()
            Me(Me.tablevReportGeneralListContracts.SubjectContractColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClosingDateNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.ClosingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClosingDateNull()
            Me(Me.tablevReportGeneralListContracts.ClosingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdContractNatureNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.IdContractNatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdContractNatureNull()
            Me(Me.tablevReportGeneralListContracts.IdContractNatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContractNumberAdjustedNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.ContractNumberAdjustedColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContractNumberAdjustedNull()
            Me(Me.tablevReportGeneralListContracts.ContractNumberAdjustedColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProductsOrDeliverablesNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.ProductsOrDeliverablesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProductsOrDeliverablesNull()
            Me(Me.tablevReportGeneralListContracts.ProductsOrDeliverablesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSupervisorNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.SupervisorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSupervisorNull()
            Me(Me.tablevReportGeneralListContracts.SupervisorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartDateNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.StartDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartDateNull()
            Me(Me.tablevReportGeneralListContracts.StartDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.EndDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndDateNull()
            Me(Me.tablevReportGeneralListContracts.EndDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContractStateNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.ContractStateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContractStateNull()
            Me(Me.tablevReportGeneralListContracts.ContractStateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEffectiveBudgetNull() As Boolean
            Return Me.IsNull(Me.tablevReportGeneralListContracts.EffectiveBudgetColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEffectiveBudgetNull()
            Me(Me.tablevReportGeneralListContracts.EffectiveBudgetColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vReportContractorByGeneralListContractsRow
        Inherits Global.System.Data.DataRow
        
        Private tablevReportContractorByGeneralListContracts As vReportContractorByGeneralListContractsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevReportContractorByGeneralListContracts = CType(Me.Table,vReportContractorByGeneralListContractsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdContractRequest() As Integer
            Get
                Return CType(Me(Me.tablevReportContractorByGeneralListContracts.IdContractRequestColumn),Integer)
            End Get
            Set
                Me(Me.tablevReportContractorByGeneralListContracts.IdContractRequestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContractorName() As String
            Get
                Try 
                    Return CType(Me(Me.tablevReportContractorByGeneralListContracts.ContractorNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ContractorName' de la tabla 'vReportContractorByGeneralLi"& _ 
                            "stContracts' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportContractorByGeneralListContracts.ContractorNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nit() As String
            Get
                Return CType(Me(Me.tablevReportContractorByGeneralListContracts.NitColumn),String)
            End Get
            Set
                Me(Me.tablevReportContractorByGeneralListContracts.NitColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContractorNameNull() As Boolean
            Return Me.IsNull(Me.tablevReportContractorByGeneralListContracts.ContractorNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContractorNameNull()
            Me(Me.tablevReportContractorByGeneralListContracts.ContractorNameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vReportPaymentsListByGeneralListContractsRow
        Inherits Global.System.Data.DataRow
        
        Private tablevReportPaymentsListByGeneralListContracts As vReportPaymentsListByGeneralListContractsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevReportPaymentsListByGeneralListContracts = CType(Me.Table,vReportPaymentsListByGeneralListContractsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdContractRequest() As Integer
            Get
                Return CType(Me(Me.tablevReportPaymentsListByGeneralListContracts.IdContractRequestColumn),Integer)
            End Get
            Set
                Me(Me.tablevReportPaymentsListByGeneralListContracts.IdContractRequestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Percentage() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevReportPaymentsListByGeneralListContracts.PercentageColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Percentage' de la tabla 'vReportPaymentsListByGeneralList"& _ 
                            "Contracts' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportPaymentsListByGeneralListContracts.PercentageColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Value() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tablevReportPaymentsListByGeneralListContracts.ValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Value' de la tabla 'vReportPaymentsListByGeneralListContr"& _ 
                            "acts' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportPaymentsListByGeneralListContracts.ValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Date() As Date
            Get
                Try 
                    Return CType(Me(Me.tablevReportPaymentsListByGeneralListContracts.DateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Date' de la tabla 'vReportPaymentsListByGeneralListContra"& _ 
                            "cts' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevReportPaymentsListByGeneralListContracts.DateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPercentageNull() As Boolean
            Return Me.IsNull(Me.tablevReportPaymentsListByGeneralListContracts.PercentageColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPercentageNull()
            Me(Me.tablevReportPaymentsListByGeneralListContracts.PercentageColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsValueNull() As Boolean
            Return Me.IsNull(Me.tablevReportPaymentsListByGeneralListContracts.ValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetValueNull()
            Me(Me.tablevReportPaymentsListByGeneralListContracts.ValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_DateNull() As Boolean
            Return Me.IsNull(Me.tablevReportPaymentsListByGeneralListContracts.DateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_DateNull()
            Me(Me.tablevReportPaymentsListByGeneralListContracts.DateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vReportGeneralListContractsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As vReportGeneralListContractsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vReportGeneralListContractsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vReportGeneralListContractsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vReportContractorByGeneralListContractsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As vReportContractorByGeneralListContractsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vReportContractorByGeneralListContractsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vReportContractorByGeneralListContractsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vReportPaymentsListByGeneralListContractsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As vReportPaymentsListByGeneralListContractsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vReportPaymentsListByGeneralListContractsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vReportPaymentsListByGeneralListContractsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace dsRptGeneralListContractsTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vReportGeneralListContractsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vReportGeneralListContracts"
            tableMapping.ColumnMappings.Add("RequestNumber", "RequestNumber")
            tableMapping.ColumnMappings.Add("ContractNumber", "ContractNumber")
            tableMapping.ColumnMappings.Add("IdManagement", "IdManagement")
            tableMapping.ColumnMappings.Add("ManagementName", "ManagementName")
            tableMapping.ColumnMappings.Add("IdStrategicLine", "IdStrategicLine")
            tableMapping.ColumnMappings.Add("StrategicLineName", "StrategicLineName")
            tableMapping.ColumnMappings.Add("IdProject", "IdProject")
            tableMapping.ColumnMappings.Add("ProjectName", "ProjectName")
            tableMapping.ColumnMappings.Add("ContractValue", "ContractValue")
            tableMapping.ColumnMappings.Add("SubjectContract", "SubjectContract")
            tableMapping.ColumnMappings.Add("ClosingDate", "ClosingDate")
            tableMapping.ColumnMappings.Add("IdContractNature", "IdContractNature")
            tableMapping.ColumnMappings.Add("ContractNumberAdjusted", "ContractNumberAdjusted")
            tableMapping.ColumnMappings.Add("ProductsOrDeliverables", "ProductsOrDeliverables")
            tableMapping.ColumnMappings.Add("Supervisor", "Supervisor")
            tableMapping.ColumnMappings.Add("StartDate", "StartDate")
            tableMapping.ColumnMappings.Add("EndDate", "EndDate")
            tableMapping.ColumnMappings.Add("ContractState", "ContractState")
            tableMapping.ColumnMappings.Add("EffectiveBudget", "EffectiveBudget")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("FSC_eSecurity_DevConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT RequestNumber, ContractNumber, IdManagement, ManagementName, IdStrategicLi"& _ 
                "ne, StrategicLineName, IdProject, ProjectName, ContractValue, SubjectContract, C"& _ 
                "losingDate, IdContractNature, ContractNumberAdjusted, ProductsOrDeliverables, Su"& _ 
                "pervisor, StartDate, EndDate, ContractState, EffectiveBudget FROM dbo.vReportGen"& _ 
                "eralListContracts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRptGeneralListContracts.vReportGeneralListContractsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRptGeneralListContracts.vReportGeneralListContractsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRptGeneralListContracts.vReportGeneralListContractsDataTable = New dsRptGeneralListContracts.vReportGeneralListContractsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vReportContractorByGeneralListContractsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vReportContractorByGeneralListContracts"
            tableMapping.ColumnMappings.Add("IdContractRequest", "IdContractRequest")
            tableMapping.ColumnMappings.Add("ContractorName", "ContractorName")
            tableMapping.ColumnMappings.Add("Nit", "Nit")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("FSC_eSecurity_DevConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IdContractRequest, ContractorName, Nit FROM dbo.vReportContractorByGeneral"& _ 
                "ListContracts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRptGeneralListContracts.vReportContractorByGeneralListContractsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRptGeneralListContracts.vReportContractorByGeneralListContractsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRptGeneralListContracts.vReportContractorByGeneralListContractsDataTable = New dsRptGeneralListContracts.vReportContractorByGeneralListContractsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class vReportPaymentsListByGeneralListContractsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "vReportPaymentsListByGeneralListContracts"
            tableMapping.ColumnMappings.Add("IdContractRequest", "IdContractRequest")
            tableMapping.ColumnMappings.Add("Percentage", "Percentage")
            tableMapping.ColumnMappings.Add("Value", "Value")
            tableMapping.ColumnMappings.Add("Date", "Date")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = System.Configuration.ConfigurationManager.ConnectionStrings("FSC_eSecurity_DevConnectionString").ConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT IdContractRequest, Percentage, Value, Date FROM dbo.vReportPaymentsListByG"& _ 
                "eneralListContracts"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As dsRptGeneralListContracts.vReportPaymentsListByGeneralListContractsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As dsRptGeneralListContracts.vReportPaymentsListByGeneralListContractsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As dsRptGeneralListContracts.vReportPaymentsListByGeneralListContractsDataTable = New dsRptGeneralListContracts.vReportPaymentsListByGeneralListContractsDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
