'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsFormulation"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsFormulation
    Inherits Global.System.Data.DataSet
    
    Private tableBasicProjectData As BasicProjectDataDataTable
    
    Private tableMatrixIndicator As MatrixIndicatorDataTable
    
    Private tableMeasurementDateByIndicator As MeasurementDateByIndicatorDataTable
    
    Private tabledtExecutionPlan As dtExecutionPlanDataTable
    
    Private tableRisk As RiskDataTable
    
    Private tableComponentByRisk As ComponentByRiskDataTable
    
    Private tableMitigationByRisk As MitigationByRiskDataTable
    
    Private tabledtReportLearning As dtReportLearningDataTable
    
    Private tabledtReportTestimonyList As dtReportTestimonyListDataTable
    
    Private tabledtReportOperatorList As dtReportOperatorListDataTable
    
    Private tabledtReportCloseRegistry As dtReportCloseRegistryDataTable
    
    Private tabledtOperatorByProject As dtOperatorByProjectDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("BasicProjectData")) Is Nothing) Then
                MyBase.Tables.Add(New BasicProjectDataDataTable(ds.Tables("BasicProjectData")))
            End If
            If (Not (ds.Tables("MatrixIndicator")) Is Nothing) Then
                MyBase.Tables.Add(New MatrixIndicatorDataTable(ds.Tables("MatrixIndicator")))
            End If
            If (Not (ds.Tables("MeasurementDateByIndicator")) Is Nothing) Then
                MyBase.Tables.Add(New MeasurementDateByIndicatorDataTable(ds.Tables("MeasurementDateByIndicator")))
            End If
            If (Not (ds.Tables("dtExecutionPlan")) Is Nothing) Then
                MyBase.Tables.Add(New dtExecutionPlanDataTable(ds.Tables("dtExecutionPlan")))
            End If
            If (Not (ds.Tables("Risk")) Is Nothing) Then
                MyBase.Tables.Add(New RiskDataTable(ds.Tables("Risk")))
            End If
            If (Not (ds.Tables("ComponentByRisk")) Is Nothing) Then
                MyBase.Tables.Add(New ComponentByRiskDataTable(ds.Tables("ComponentByRisk")))
            End If
            If (Not (ds.Tables("MitigationByRisk")) Is Nothing) Then
                MyBase.Tables.Add(New MitigationByRiskDataTable(ds.Tables("MitigationByRisk")))
            End If
            If (Not (ds.Tables("dtReportLearning")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportLearningDataTable(ds.Tables("dtReportLearning")))
            End If
            If (Not (ds.Tables("dtReportTestimonyList")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportTestimonyListDataTable(ds.Tables("dtReportTestimonyList")))
            End If
            If (Not (ds.Tables("dtReportOperatorList")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportOperatorListDataTable(ds.Tables("dtReportOperatorList")))
            End If
            If (Not (ds.Tables("dtReportCloseRegistry")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportCloseRegistryDataTable(ds.Tables("dtReportCloseRegistry")))
            End If
            If (Not (ds.Tables("dtOperatorByProject")) Is Nothing) Then
                MyBase.Tables.Add(New dtOperatorByProjectDataTable(ds.Tables("dtOperatorByProject")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property BasicProjectData() As BasicProjectDataDataTable
        Get
            Return Me.tableBasicProjectData
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MatrixIndicator() As MatrixIndicatorDataTable
        Get
            Return Me.tableMatrixIndicator
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MeasurementDateByIndicator() As MeasurementDateByIndicatorDataTable
        Get
            Return Me.tableMeasurementDateByIndicator
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtExecutionPlan() As dtExecutionPlanDataTable
        Get
            Return Me.tabledtExecutionPlan
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Risk() As RiskDataTable
        Get
            Return Me.tableRisk
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ComponentByRisk() As ComponentByRiskDataTable
        Get
            Return Me.tableComponentByRisk
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MitigationByRisk() As MitigationByRiskDataTable
        Get
            Return Me.tableMitigationByRisk
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportLearning() As dtReportLearningDataTable
        Get
            Return Me.tabledtReportLearning
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportTestimonyList() As dtReportTestimonyListDataTable
        Get
            Return Me.tabledtReportTestimonyList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportOperatorList() As dtReportOperatorListDataTable
        Get
            Return Me.tabledtReportOperatorList
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportCloseRegistry() As dtReportCloseRegistryDataTable
        Get
            Return Me.tabledtReportCloseRegistry
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtOperatorByProject() As dtOperatorByProjectDataTable
        Get
            Return Me.tabledtOperatorByProject
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsFormulation = CType(MyBase.Clone,dsFormulation)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("BasicProjectData")) Is Nothing) Then
                MyBase.Tables.Add(New BasicProjectDataDataTable(ds.Tables("BasicProjectData")))
            End If
            If (Not (ds.Tables("MatrixIndicator")) Is Nothing) Then
                MyBase.Tables.Add(New MatrixIndicatorDataTable(ds.Tables("MatrixIndicator")))
            End If
            If (Not (ds.Tables("MeasurementDateByIndicator")) Is Nothing) Then
                MyBase.Tables.Add(New MeasurementDateByIndicatorDataTable(ds.Tables("MeasurementDateByIndicator")))
            End If
            If (Not (ds.Tables("dtExecutionPlan")) Is Nothing) Then
                MyBase.Tables.Add(New dtExecutionPlanDataTable(ds.Tables("dtExecutionPlan")))
            End If
            If (Not (ds.Tables("Risk")) Is Nothing) Then
                MyBase.Tables.Add(New RiskDataTable(ds.Tables("Risk")))
            End If
            If (Not (ds.Tables("ComponentByRisk")) Is Nothing) Then
                MyBase.Tables.Add(New ComponentByRiskDataTable(ds.Tables("ComponentByRisk")))
            End If
            If (Not (ds.Tables("MitigationByRisk")) Is Nothing) Then
                MyBase.Tables.Add(New MitigationByRiskDataTable(ds.Tables("MitigationByRisk")))
            End If
            If (Not (ds.Tables("dtReportLearning")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportLearningDataTable(ds.Tables("dtReportLearning")))
            End If
            If (Not (ds.Tables("dtReportTestimonyList")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportTestimonyListDataTable(ds.Tables("dtReportTestimonyList")))
            End If
            If (Not (ds.Tables("dtReportOperatorList")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportOperatorListDataTable(ds.Tables("dtReportOperatorList")))
            End If
            If (Not (ds.Tables("dtReportCloseRegistry")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportCloseRegistryDataTable(ds.Tables("dtReportCloseRegistry")))
            End If
            If (Not (ds.Tables("dtOperatorByProject")) Is Nothing) Then
                MyBase.Tables.Add(New dtOperatorByProjectDataTable(ds.Tables("dtOperatorByProject")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableBasicProjectData = CType(MyBase.Tables("BasicProjectData"),BasicProjectDataDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBasicProjectData) Is Nothing) Then
                Me.tableBasicProjectData.InitVars
            End If
        End If
        Me.tableMatrixIndicator = CType(MyBase.Tables("MatrixIndicator"),MatrixIndicatorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMatrixIndicator) Is Nothing) Then
                Me.tableMatrixIndicator.InitVars
            End If
        End If
        Me.tableMeasurementDateByIndicator = CType(MyBase.Tables("MeasurementDateByIndicator"),MeasurementDateByIndicatorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMeasurementDateByIndicator) Is Nothing) Then
                Me.tableMeasurementDateByIndicator.InitVars
            End If
        End If
        Me.tabledtExecutionPlan = CType(MyBase.Tables("dtExecutionPlan"),dtExecutionPlanDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtExecutionPlan) Is Nothing) Then
                Me.tabledtExecutionPlan.InitVars
            End If
        End If
        Me.tableRisk = CType(MyBase.Tables("Risk"),RiskDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRisk) Is Nothing) Then
                Me.tableRisk.InitVars
            End If
        End If
        Me.tableComponentByRisk = CType(MyBase.Tables("ComponentByRisk"),ComponentByRiskDataTable)
        If (initTable = true) Then
            If (Not (Me.tableComponentByRisk) Is Nothing) Then
                Me.tableComponentByRisk.InitVars
            End If
        End If
        Me.tableMitigationByRisk = CType(MyBase.Tables("MitigationByRisk"),MitigationByRiskDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMitigationByRisk) Is Nothing) Then
                Me.tableMitigationByRisk.InitVars
            End If
        End If
        Me.tabledtReportLearning = CType(MyBase.Tables("dtReportLearning"),dtReportLearningDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportLearning) Is Nothing) Then
                Me.tabledtReportLearning.InitVars
            End If
        End If
        Me.tabledtReportTestimonyList = CType(MyBase.Tables("dtReportTestimonyList"),dtReportTestimonyListDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportTestimonyList) Is Nothing) Then
                Me.tabledtReportTestimonyList.InitVars
            End If
        End If
        Me.tabledtReportOperatorList = CType(MyBase.Tables("dtReportOperatorList"),dtReportOperatorListDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportOperatorList) Is Nothing) Then
                Me.tabledtReportOperatorList.InitVars
            End If
        End If
        Me.tabledtReportCloseRegistry = CType(MyBase.Tables("dtReportCloseRegistry"),dtReportCloseRegistryDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportCloseRegistry) Is Nothing) Then
                Me.tabledtReportCloseRegistry.InitVars
            End If
        End If
        Me.tabledtOperatorByProject = CType(MyBase.Tables("dtOperatorByProject"),dtOperatorByProjectDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtOperatorByProject) Is Nothing) Then
                Me.tabledtOperatorByProject.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsFormulation"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsFormulation.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableBasicProjectData = New BasicProjectDataDataTable
        MyBase.Tables.Add(Me.tableBasicProjectData)
        Me.tableMatrixIndicator = New MatrixIndicatorDataTable
        MyBase.Tables.Add(Me.tableMatrixIndicator)
        Me.tableMeasurementDateByIndicator = New MeasurementDateByIndicatorDataTable
        MyBase.Tables.Add(Me.tableMeasurementDateByIndicator)
        Me.tabledtExecutionPlan = New dtExecutionPlanDataTable
        MyBase.Tables.Add(Me.tabledtExecutionPlan)
        Me.tableRisk = New RiskDataTable
        MyBase.Tables.Add(Me.tableRisk)
        Me.tableComponentByRisk = New ComponentByRiskDataTable
        MyBase.Tables.Add(Me.tableComponentByRisk)
        Me.tableMitigationByRisk = New MitigationByRiskDataTable
        MyBase.Tables.Add(Me.tableMitigationByRisk)
        Me.tabledtReportLearning = New dtReportLearningDataTable
        MyBase.Tables.Add(Me.tabledtReportLearning)
        Me.tabledtReportTestimonyList = New dtReportTestimonyListDataTable
        MyBase.Tables.Add(Me.tabledtReportTestimonyList)
        Me.tabledtReportOperatorList = New dtReportOperatorListDataTable
        MyBase.Tables.Add(Me.tabledtReportOperatorList)
        Me.tabledtReportCloseRegistry = New dtReportCloseRegistryDataTable
        MyBase.Tables.Add(Me.tabledtReportCloseRegistry)
        Me.tabledtOperatorByProject = New dtOperatorByProjectDataTable
        MyBase.Tables.Add(Me.tabledtOperatorByProject)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeBasicProjectData() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMatrixIndicator() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMeasurementDateByIndicator() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtExecutionPlan() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRisk() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeComponentByRisk() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMitigationByRisk() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportLearning() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportTestimonyList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportOperatorList() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportCloseRegistry() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtOperatorByProject() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsFormulation = New dsFormulation
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub BasicProjectDataRowChangeEventHandler(ByVal sender As Object, ByVal e As BasicProjectDataRowChangeEvent)
    
    Public Delegate Sub MatrixIndicatorRowChangeEventHandler(ByVal sender As Object, ByVal e As MatrixIndicatorRowChangeEvent)
    
    Public Delegate Sub MeasurementDateByIndicatorRowChangeEventHandler(ByVal sender As Object, ByVal e As MeasurementDateByIndicatorRowChangeEvent)
    
    Public Delegate Sub dtExecutionPlanRowChangeEventHandler(ByVal sender As Object, ByVal e As dtExecutionPlanRowChangeEvent)
    
    Public Delegate Sub RiskRowChangeEventHandler(ByVal sender As Object, ByVal e As RiskRowChangeEvent)
    
    Public Delegate Sub ComponentByRiskRowChangeEventHandler(ByVal sender As Object, ByVal e As ComponentByRiskRowChangeEvent)
    
    Public Delegate Sub MitigationByRiskRowChangeEventHandler(ByVal sender As Object, ByVal e As MitigationByRiskRowChangeEvent)
    
    Public Delegate Sub dtReportLearningRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportLearningRowChangeEvent)
    
    Public Delegate Sub dtReportTestimonyListRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportTestimonyListRowChangeEvent)
    
    Public Delegate Sub dtReportOperatorListRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportOperatorListRowChangeEvent)
    
    Public Delegate Sub dtReportCloseRegistryRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportCloseRegistryRowChangeEvent)
    
    Public Delegate Sub dtOperatorByProjectRowChangeEventHandler(ByVal sender As Object, ByVal e As dtOperatorByProjectRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class BasicProjectDataDataTable
        Inherits Global.System.Data.TypedTableBase(Of BasicProjectDataRow)
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnObjective As Global.System.Data.DataColumn
        
        Private columnAntecedent As Global.System.Data.DataColumn
        
        Private columnJustification As Global.System.Data.DataColumn
        
        Private columnBeginDate As Global.System.Data.DataColumn
        
        Private columnDuration As Global.System.Data.DataColumn
        
        Private columnZoneDescription As Global.System.Data.DataColumn
        
        Private columnPopulation As Global.System.Data.DataColumn
        
        Private columnStrategicDescription As Global.System.Data.DataColumn
        
        Private columnResults As Global.System.Data.DataColumn
        
        Private columnSource As Global.System.Data.DataColumn
        
        Private columnPurpose As Global.System.Data.DataColumn
        
        Private columnTotalCost As Global.System.Data.DataColumn
        
        Private columnFSCContribution As Global.System.Data.DataColumn
        
        Private columnCounterpartValue As Global.System.Data.DataColumn
        
        Private columnEffectiveBudget As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnideaName As Global.System.Data.DataColumn
        
        Private columnuserName As Global.System.Data.DataColumn
        
        Private columnphaseName As Global.System.Data.DataColumn
        
        Private columnId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "BasicProjectData"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjective
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AntecedentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAntecedent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JustificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJustification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeginDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeginDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DurationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ZoneDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnZoneDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PopulationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPopulation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StrategicDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStrategicDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResultsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResults
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PurposeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPurpose
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FSCContributionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFSCContribution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CounterpartValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCounterpartValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EffectiveBudgetColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEffectiveBudget
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ideaNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnideaName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property userNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnuserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property phaseNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnphaseName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As BasicProjectDataRow
            Get
                Return CType(Me.Rows(index),BasicProjectDataRow)
            End Get
        End Property
        
        Public Event BasicProjectDataRowChanging As BasicProjectDataRowChangeEventHandler
        
        Public Event BasicProjectDataRowChanged As BasicProjectDataRowChangeEventHandler
        
        Public Event BasicProjectDataRowDeleting As BasicProjectDataRowChangeEventHandler
        
        Public Event BasicProjectDataRowDeleted As BasicProjectDataRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddBasicProjectDataRow(ByVal row As BasicProjectDataRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddBasicProjectDataRow( _
                    ByVal Code As String,  _
                    ByVal Name As String,  _
                    ByVal Objective As String,  _
                    ByVal Antecedent As String,  _
                    ByVal Justification As String,  _
                    ByVal BeginDate As Date,  _
                    ByVal Duration As String,  _
                    ByVal ZoneDescription As String,  _
                    ByVal Population As String,  _
                    ByVal StrategicDescription As String,  _
                    ByVal Results As String,  _
                    ByVal Source As String,  _
                    ByVal Purpose As String,  _
                    ByVal TotalCost As Decimal,  _
                    ByVal FSCContribution As Decimal,  _
                    ByVal CounterpartValue As Decimal,  _
                    ByVal EffectiveBudget As Integer,  _
                    ByVal CreateDate As Date,  _
                    ByVal ideaName As String,  _
                    ByVal userName As String,  _
                    ByVal phaseName As String,  _
                    ByVal Id As String) As BasicProjectDataRow
            Dim rowBasicProjectDataRow As BasicProjectDataRow = CType(Me.NewRow,BasicProjectDataRow)
            Dim columnValuesArray() As Object = New Object() {Code, Name, Objective, Antecedent, Justification, BeginDate, Duration, ZoneDescription, Population, StrategicDescription, Results, Source, Purpose, TotalCost, FSCContribution, CounterpartValue, EffectiveBudget, CreateDate, ideaName, userName, phaseName, Id}
            rowBasicProjectDataRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowBasicProjectDataRow)
            Return rowBasicProjectDataRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As BasicProjectDataDataTable = CType(MyBase.Clone,BasicProjectDataDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New BasicProjectDataDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCode = MyBase.Columns("Code")
            Me.columnName = MyBase.Columns("Name")
            Me.columnObjective = MyBase.Columns("Objective")
            Me.columnAntecedent = MyBase.Columns("Antecedent")
            Me.columnJustification = MyBase.Columns("Justification")
            Me.columnBeginDate = MyBase.Columns("BeginDate")
            Me.columnDuration = MyBase.Columns("Duration")
            Me.columnZoneDescription = MyBase.Columns("ZoneDescription")
            Me.columnPopulation = MyBase.Columns("Population")
            Me.columnStrategicDescription = MyBase.Columns("StrategicDescription")
            Me.columnResults = MyBase.Columns("Results")
            Me.columnSource = MyBase.Columns("Source")
            Me.columnPurpose = MyBase.Columns("Purpose")
            Me.columnTotalCost = MyBase.Columns("TotalCost")
            Me.columnFSCContribution = MyBase.Columns("FSCContribution")
            Me.columnCounterpartValue = MyBase.Columns("CounterpartValue")
            Me.columnEffectiveBudget = MyBase.Columns("EffectiveBudget")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnideaName = MyBase.Columns("ideaName")
            Me.columnuserName = MyBase.Columns("userName")
            Me.columnphaseName = MyBase.Columns("phaseName")
            Me.columnId = MyBase.Columns("Id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnObjective = New Global.System.Data.DataColumn("Objective", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjective)
            Me.columnAntecedent = New Global.System.Data.DataColumn("Antecedent", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAntecedent)
            Me.columnJustification = New Global.System.Data.DataColumn("Justification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJustification)
            Me.columnBeginDate = New Global.System.Data.DataColumn("BeginDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeginDate)
            Me.columnDuration = New Global.System.Data.DataColumn("Duration", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDuration)
            Me.columnZoneDescription = New Global.System.Data.DataColumn("ZoneDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZoneDescription)
            Me.columnPopulation = New Global.System.Data.DataColumn("Population", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPopulation)
            Me.columnStrategicDescription = New Global.System.Data.DataColumn("StrategicDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStrategicDescription)
            Me.columnResults = New Global.System.Data.DataColumn("Results", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResults)
            Me.columnSource = New Global.System.Data.DataColumn("Source", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSource)
            Me.columnPurpose = New Global.System.Data.DataColumn("Purpose", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPurpose)
            Me.columnTotalCost = New Global.System.Data.DataColumn("TotalCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCost)
            Me.columnFSCContribution = New Global.System.Data.DataColumn("FSCContribution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFSCContribution)
            Me.columnCounterpartValue = New Global.System.Data.DataColumn("CounterpartValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCounterpartValue)
            Me.columnEffectiveBudget = New Global.System.Data.DataColumn("EffectiveBudget", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEffectiveBudget)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnideaName = New Global.System.Data.DataColumn("ideaName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnideaName)
            Me.columnuserName = New Global.System.Data.DataColumn("userName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnuserName)
            Me.columnphaseName = New Global.System.Data.DataColumn("phaseName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnphaseName)
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnCode.AllowDBNull = false
            Me.columnCode.MaxLength = 50
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 255
            Me.columnObjective.MaxLength = 800
            Me.columnAntecedent.MaxLength = 800
            Me.columnJustification.MaxLength = 800
            Me.columnDuration.MaxLength = 50
            Me.columnZoneDescription.MaxLength = 800
            Me.columnPopulation.AllowDBNull = false
            Me.columnPopulation.MaxLength = 800
            Me.columnStrategicDescription.MaxLength = 800
            Me.columnResults.MaxLength = 800
            Me.columnSource.MaxLength = 800
            Me.columnPurpose.MaxLength = 800
            Me.columnEffectiveBudget.AllowDBNull = false
            Me.columnCreateDate.AllowDBNull = false
            Me.columnideaName.MaxLength = 50
            Me.columnuserName.AllowDBNull = false
            Me.columnuserName.MaxLength = 140
            Me.columnphaseName.ReadOnly = true
            Me.columnphaseName.MaxLength = 11
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewBasicProjectDataRow() As BasicProjectDataRow
            Return CType(Me.NewRow,BasicProjectDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New BasicProjectDataRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(BasicProjectDataRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BasicProjectDataRowChangedEvent) Is Nothing) Then
                RaiseEvent BasicProjectDataRowChanged(Me, New BasicProjectDataRowChangeEvent(CType(e.Row,BasicProjectDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BasicProjectDataRowChangingEvent) Is Nothing) Then
                RaiseEvent BasicProjectDataRowChanging(Me, New BasicProjectDataRowChangeEvent(CType(e.Row,BasicProjectDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BasicProjectDataRowDeletedEvent) Is Nothing) Then
                RaiseEvent BasicProjectDataRowDeleted(Me, New BasicProjectDataRowChangeEvent(CType(e.Row,BasicProjectDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BasicProjectDataRowDeletingEvent) Is Nothing) Then
                RaiseEvent BasicProjectDataRowDeleting(Me, New BasicProjectDataRowChangeEvent(CType(e.Row,BasicProjectDataRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveBasicProjectDataRow(ByVal row As BasicProjectDataRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BasicProjectDataDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MatrixIndicatorDataTable
        Inherits Global.System.Data.TypedTableBase(Of MatrixIndicatorRow)
        
        Private columnType As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnGoal As Global.System.Data.DataColumn
        
        Private columnGreenValue As Global.System.Data.DataColumn
        
        Private columnYellowValue As Global.System.Data.DataColumn
        
        Private columnRedValue As Global.System.Data.DataColumn
        
        Private columnSourceVerification As Global.System.Data.DataColumn
        
        Private columnAssumptions As Global.System.Data.DataColumn
        
        Private columnProjectId As Global.System.Data.DataColumn
        
        Private columnprojectName As Global.System.Data.DataColumn
        
        Private columnId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MatrixIndicator"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GreenValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGreenValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YellowValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYellowValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RedValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRedValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SourceVerificationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSourceVerification
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssumptionsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssumptions
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property projectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnprojectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MatrixIndicatorRow
            Get
                Return CType(Me.Rows(index),MatrixIndicatorRow)
            End Get
        End Property
        
        Public Event MatrixIndicatorRowChanging As MatrixIndicatorRowChangeEventHandler
        
        Public Event MatrixIndicatorRowChanged As MatrixIndicatorRowChangeEventHandler
        
        Public Event MatrixIndicatorRowDeleting As MatrixIndicatorRowChangeEventHandler
        
        Public Event MatrixIndicatorRowDeleted As MatrixIndicatorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMatrixIndicatorRow(ByVal row As MatrixIndicatorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMatrixIndicatorRow(ByVal Type As String, ByVal Description As String, ByVal Goal As String, ByVal GreenValue As String, ByVal YellowValue As String, ByVal RedValue As String, ByVal SourceVerification As String, ByVal Assumptions As String, ByVal projectName As String, ByVal Id As Integer) As MatrixIndicatorRow
            Dim rowMatrixIndicatorRow As MatrixIndicatorRow = CType(Me.NewRow,MatrixIndicatorRow)
            Dim columnValuesArray() As Object = New Object() {Type, Description, Goal, GreenValue, YellowValue, RedValue, SourceVerification, Assumptions, Nothing, projectName, Id}
            rowMatrixIndicatorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMatrixIndicatorRow)
            Return rowMatrixIndicatorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByProjectId(ByVal ProjectId As Integer) As MatrixIndicatorRow
            Return CType(Me.Rows.Find(New Object() {ProjectId}),MatrixIndicatorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MatrixIndicatorDataTable = CType(MyBase.Clone,MatrixIndicatorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MatrixIndicatorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnType = MyBase.Columns("Type")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnGoal = MyBase.Columns("Goal")
            Me.columnGreenValue = MyBase.Columns("GreenValue")
            Me.columnYellowValue = MyBase.Columns("YellowValue")
            Me.columnRedValue = MyBase.Columns("RedValue")
            Me.columnSourceVerification = MyBase.Columns("SourceVerification")
            Me.columnAssumptions = MyBase.Columns("Assumptions")
            Me.columnProjectId = MyBase.Columns("ProjectId")
            Me.columnprojectName = MyBase.Columns("projectName")
            Me.columnId = MyBase.Columns("Id")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnType)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnGoal = New Global.System.Data.DataColumn("Goal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoal)
            Me.columnGreenValue = New Global.System.Data.DataColumn("GreenValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGreenValue)
            Me.columnYellowValue = New Global.System.Data.DataColumn("YellowValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYellowValue)
            Me.columnRedValue = New Global.System.Data.DataColumn("RedValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRedValue)
            Me.columnSourceVerification = New Global.System.Data.DataColumn("SourceVerification", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSourceVerification)
            Me.columnAssumptions = New Global.System.Data.DataColumn("Assumptions", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssumptions)
            Me.columnProjectId = New Global.System.Data.DataColumn("ProjectId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectId)
            Me.columnprojectName = New Global.System.Data.DataColumn("projectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnprojectName)
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnProjectId}, true))
            Me.columnType.ReadOnly = true
            Me.columnType.MaxLength = 10
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 255
            Me.columnGoal.MaxLength = 50
            Me.columnGreenValue.MaxLength = 50
            Me.columnYellowValue.MaxLength = 50
            Me.columnRedValue.MaxLength = 50
            Me.columnSourceVerification.MaxLength = 50
            Me.columnAssumptions.MaxLength = 50
            Me.columnProjectId.AutoIncrement = true
            Me.columnProjectId.AutoIncrementSeed = -1
            Me.columnProjectId.AutoIncrementStep = -1
            Me.columnProjectId.AllowDBNull = false
            Me.columnProjectId.ReadOnly = true
            Me.columnProjectId.Unique = true
            Me.columnprojectName.AllowDBNull = false
            Me.columnprojectName.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMatrixIndicatorRow() As MatrixIndicatorRow
            Return CType(Me.NewRow,MatrixIndicatorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MatrixIndicatorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MatrixIndicatorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MatrixIndicatorRowChangedEvent) Is Nothing) Then
                RaiseEvent MatrixIndicatorRowChanged(Me, New MatrixIndicatorRowChangeEvent(CType(e.Row,MatrixIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MatrixIndicatorRowChangingEvent) Is Nothing) Then
                RaiseEvent MatrixIndicatorRowChanging(Me, New MatrixIndicatorRowChangeEvent(CType(e.Row,MatrixIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MatrixIndicatorRowDeletedEvent) Is Nothing) Then
                RaiseEvent MatrixIndicatorRowDeleted(Me, New MatrixIndicatorRowChangeEvent(CType(e.Row,MatrixIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MatrixIndicatorRowDeletingEvent) Is Nothing) Then
                RaiseEvent MatrixIndicatorRowDeleting(Me, New MatrixIndicatorRowChangeEvent(CType(e.Row,MatrixIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMatrixIndicatorRow(ByVal row As MatrixIndicatorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MatrixIndicatorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MeasurementDateByIndicatorDataTable
        Inherits Global.System.Data.TypedTableBase(Of MeasurementDateByIndicatorRow)
        
        Private columnmeasurementDate As Global.System.Data.DataColumn
        
        Private columnIdIndicator As Global.System.Data.DataColumn
        
        Private columnProjectId As Global.System.Data.DataColumn
        
        Private columnmeasure As Global.System.Data.DataColumn
        
        Private columnmeasuretype As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MeasurementDateByIndicator"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property measurementDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdIndicatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdIndicator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property measureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property measuretypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasuretype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MeasurementDateByIndicatorRow
            Get
                Return CType(Me.Rows(index),MeasurementDateByIndicatorRow)
            End Get
        End Property
        
        Public Event MeasurementDateByIndicatorRowChanging As MeasurementDateByIndicatorRowChangeEventHandler
        
        Public Event MeasurementDateByIndicatorRowChanged As MeasurementDateByIndicatorRowChangeEventHandler
        
        Public Event MeasurementDateByIndicatorRowDeleting As MeasurementDateByIndicatorRowChangeEventHandler
        
        Public Event MeasurementDateByIndicatorRowDeleted As MeasurementDateByIndicatorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMeasurementDateByIndicatorRow(ByVal row As MeasurementDateByIndicatorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMeasurementDateByIndicatorRow(ByVal measurementDate As Date, ByVal IdIndicator As Integer, ByVal ProjectId As Integer, ByVal measure As String, ByVal measuretype As String) As MeasurementDateByIndicatorRow
            Dim rowMeasurementDateByIndicatorRow As MeasurementDateByIndicatorRow = CType(Me.NewRow,MeasurementDateByIndicatorRow)
            Dim columnValuesArray() As Object = New Object() {measurementDate, IdIndicator, ProjectId, measure, measuretype}
            rowMeasurementDateByIndicatorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMeasurementDateByIndicatorRow)
            Return rowMeasurementDateByIndicatorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MeasurementDateByIndicatorDataTable = CType(MyBase.Clone,MeasurementDateByIndicatorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MeasurementDateByIndicatorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmeasurementDate = MyBase.Columns("measurementDate")
            Me.columnIdIndicator = MyBase.Columns("IdIndicator")
            Me.columnProjectId = MyBase.Columns("ProjectId")
            Me.columnmeasure = MyBase.Columns("measure")
            Me.columnmeasuretype = MyBase.Columns("measuretype")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmeasurementDate = New Global.System.Data.DataColumn("measurementDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementDate)
            Me.columnIdIndicator = New Global.System.Data.DataColumn("IdIndicator", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdIndicator)
            Me.columnProjectId = New Global.System.Data.DataColumn("ProjectId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectId)
            Me.columnmeasure = New Global.System.Data.DataColumn("measure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasure)
            Me.columnmeasuretype = New Global.System.Data.DataColumn("measuretype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasuretype)
            Me.columnmeasurementDate.AllowDBNull = false
            Me.columnIdIndicator.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMeasurementDateByIndicatorRow() As MeasurementDateByIndicatorRow
            Return CType(Me.NewRow,MeasurementDateByIndicatorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MeasurementDateByIndicatorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MeasurementDateByIndicatorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MeasurementDateByIndicatorRowChangedEvent) Is Nothing) Then
                RaiseEvent MeasurementDateByIndicatorRowChanged(Me, New MeasurementDateByIndicatorRowChangeEvent(CType(e.Row,MeasurementDateByIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MeasurementDateByIndicatorRowChangingEvent) Is Nothing) Then
                RaiseEvent MeasurementDateByIndicatorRowChanging(Me, New MeasurementDateByIndicatorRowChangeEvent(CType(e.Row,MeasurementDateByIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MeasurementDateByIndicatorRowDeletedEvent) Is Nothing) Then
                RaiseEvent MeasurementDateByIndicatorRowDeleted(Me, New MeasurementDateByIndicatorRowChangeEvent(CType(e.Row,MeasurementDateByIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MeasurementDateByIndicatorRowDeletingEvent) Is Nothing) Then
                RaiseEvent MeasurementDateByIndicatorRowDeleting(Me, New MeasurementDateByIndicatorRowChangeEvent(CType(e.Row,MeasurementDateByIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMeasurementDateByIndicatorRow(ByVal row As MeasurementDateByIndicatorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MeasurementDateByIndicatorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtExecutionPlanDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtExecutionPlanRow)
        
        Private columnIdComponent As Global.System.Data.DataColumn
        
        Private columnComponentName As Global.System.Data.DataColumn
        
        Private columnActivityName As Global.System.Data.DataColumn
        
        Private columnIdActivity As Global.System.Data.DataColumn
        
        Private columnSubActivityName As Global.System.Data.DataColumn
        
        Private columnIdSubActivity As Global.System.Data.DataColumn
        
        Private columnResponsible As Global.System.Data.DataColumn
        
        Private columnBeginDate As Global.System.Data.DataColumn
        
        Private columnEndDate As Global.System.Data.DataColumn
        
        Private columnDuration As Global.System.Data.DataColumn
        
        Private columnTotalCost As Global.System.Data.DataColumn
        
        Private columnFSCContribution As Global.System.Data.DataColumn
        
        Private columnOFContribution As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtExecutionPlan"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdComponentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdComponent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComponentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComponentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActivityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnActivityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdActivityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdActivity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SubActivityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSubActivityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdSubActivityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdSubActivity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResponsibleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResponsible
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeginDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeginDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EndDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEndDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DurationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDuration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FSCContributionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFSCContribution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OFContributionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOFContribution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtExecutionPlanRow
            Get
                Return CType(Me.Rows(index),dtExecutionPlanRow)
            End Get
        End Property
        
        Public Event dtExecutionPlanRowChanging As dtExecutionPlanRowChangeEventHandler
        
        Public Event dtExecutionPlanRowChanged As dtExecutionPlanRowChangeEventHandler
        
        Public Event dtExecutionPlanRowDeleting As dtExecutionPlanRowChangeEventHandler
        
        Public Event dtExecutionPlanRowDeleted As dtExecutionPlanRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtExecutionPlanRow(ByVal row As dtExecutionPlanRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtExecutionPlanRow(ByVal IdComponent As Integer, ByVal ComponentName As String, ByVal ActivityName As String, ByVal IdActivity As Integer, ByVal SubActivityName As String, ByVal IdSubActivity As Integer, ByVal Responsible As String, ByVal BeginDate As Date, ByVal EndDate As Date, ByVal Duration As Integer, ByVal TotalCost As Decimal, ByVal FSCContribution As Decimal, ByVal OFContribution As Decimal) As dtExecutionPlanRow
            Dim rowdtExecutionPlanRow As dtExecutionPlanRow = CType(Me.NewRow,dtExecutionPlanRow)
            Dim columnValuesArray() As Object = New Object() {IdComponent, ComponentName, ActivityName, IdActivity, SubActivityName, IdSubActivity, Responsible, BeginDate, EndDate, Duration, TotalCost, FSCContribution, OFContribution}
            rowdtExecutionPlanRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtExecutionPlanRow)
            Return rowdtExecutionPlanRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtExecutionPlanDataTable = CType(MyBase.Clone,dtExecutionPlanDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtExecutionPlanDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdComponent = MyBase.Columns("IdComponent")
            Me.columnComponentName = MyBase.Columns("ComponentName")
            Me.columnActivityName = MyBase.Columns("ActivityName")
            Me.columnIdActivity = MyBase.Columns("IdActivity")
            Me.columnSubActivityName = MyBase.Columns("SubActivityName")
            Me.columnIdSubActivity = MyBase.Columns("IdSubActivity")
            Me.columnResponsible = MyBase.Columns("Responsible")
            Me.columnBeginDate = MyBase.Columns("BeginDate")
            Me.columnEndDate = MyBase.Columns("EndDate")
            Me.columnDuration = MyBase.Columns("Duration")
            Me.columnTotalCost = MyBase.Columns("TotalCost")
            Me.columnFSCContribution = MyBase.Columns("FSCContribution")
            Me.columnOFContribution = MyBase.Columns("OFContribution")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdComponent = New Global.System.Data.DataColumn("IdComponent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdComponent)
            Me.columnComponentName = New Global.System.Data.DataColumn("ComponentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComponentName)
            Me.columnActivityName = New Global.System.Data.DataColumn("ActivityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnActivityName)
            Me.columnIdActivity = New Global.System.Data.DataColumn("IdActivity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdActivity)
            Me.columnSubActivityName = New Global.System.Data.DataColumn("SubActivityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSubActivityName)
            Me.columnIdSubActivity = New Global.System.Data.DataColumn("IdSubActivity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdSubActivity)
            Me.columnResponsible = New Global.System.Data.DataColumn("Responsible", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResponsible)
            Me.columnBeginDate = New Global.System.Data.DataColumn("BeginDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeginDate)
            Me.columnEndDate = New Global.System.Data.DataColumn("EndDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEndDate)
            Me.columnDuration = New Global.System.Data.DataColumn("Duration", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDuration)
            Me.columnTotalCost = New Global.System.Data.DataColumn("TotalCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCost)
            Me.columnFSCContribution = New Global.System.Data.DataColumn("FSCContribution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFSCContribution)
            Me.columnOFContribution = New Global.System.Data.DataColumn("OFContribution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOFContribution)
            Me.columnIdComponent.AllowDBNull = false
            Me.columnComponentName.AllowDBNull = false
            Me.columnComponentName.MaxLength = 255
            Me.columnActivityName.MaxLength = 100
            Me.columnSubActivityName.MaxLength = 255
            Me.columnResponsible.MaxLength = 140
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtExecutionPlanRow() As dtExecutionPlanRow
            Return CType(Me.NewRow,dtExecutionPlanRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtExecutionPlanRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtExecutionPlanRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtExecutionPlanRowChangedEvent) Is Nothing) Then
                RaiseEvent dtExecutionPlanRowChanged(Me, New dtExecutionPlanRowChangeEvent(CType(e.Row,dtExecutionPlanRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtExecutionPlanRowChangingEvent) Is Nothing) Then
                RaiseEvent dtExecutionPlanRowChanging(Me, New dtExecutionPlanRowChangeEvent(CType(e.Row,dtExecutionPlanRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtExecutionPlanRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtExecutionPlanRowDeleted(Me, New dtExecutionPlanRowChangeEvent(CType(e.Row,dtExecutionPlanRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtExecutionPlanRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtExecutionPlanRowDeleting(Me, New dtExecutionPlanRowChangeEvent(CType(e.Row,dtExecutionPlanRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtExecutionPlanRow(ByVal row As dtExecutionPlanRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtExecutionPlanDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RiskDataTable
        Inherits Global.System.Data.TypedTableBase(Of RiskRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnWhatCanHappen As Global.System.Data.DataColumn
        
        Private columnRiskImpact As Global.System.Data.DataColumn
        
        Private columnOcurrenceProbability As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Risk"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WhatCanHappenColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWhatCanHappen
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RiskImpactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRiskImpact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OcurrenceProbabilityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOcurrenceProbability
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RiskRow
            Get
                Return CType(Me.Rows(index),RiskRow)
            End Get
        End Property
        
        Public Event RiskRowChanging As RiskRowChangeEventHandler
        
        Public Event RiskRowChanged As RiskRowChangeEventHandler
        
        Public Event RiskRowDeleting As RiskRowChangeEventHandler
        
        Public Event RiskRowDeleted As RiskRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRiskRow(ByVal row As RiskRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRiskRow(ByVal Code As String, ByVal Name As String, ByVal Description As String, ByVal WhatCanHappen As String, ByVal RiskImpact As String, ByVal OcurrenceProbability As String) As RiskRow
            Dim rowRiskRow As RiskRow = CType(Me.NewRow,RiskRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, Code, Name, Description, WhatCanHappen, RiskImpact, OcurrenceProbability}
            rowRiskRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRiskRow)
            Return rowRiskRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindById(ByVal Id As Integer) As RiskRow
            Return CType(Me.Rows.Find(New Object() {Id}),RiskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RiskDataTable = CType(MyBase.Clone,RiskDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RiskDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnCode = MyBase.Columns("Code")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnWhatCanHappen = MyBase.Columns("WhatCanHappen")
            Me.columnRiskImpact = MyBase.Columns("RiskImpact")
            Me.columnOcurrenceProbability = MyBase.Columns("OcurrenceProbability")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnWhatCanHappen = New Global.System.Data.DataColumn("WhatCanHappen", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWhatCanHappen)
            Me.columnRiskImpact = New Global.System.Data.DataColumn("RiskImpact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRiskImpact)
            Me.columnOcurrenceProbability = New Global.System.Data.DataColumn("OcurrenceProbability", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOcurrenceProbability)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnId}, true))
            Me.columnId.AutoIncrement = true
            Me.columnId.AutoIncrementSeed = -1
            Me.columnId.AutoIncrementStep = -1
            Me.columnId.AllowDBNull = false
            Me.columnId.ReadOnly = true
            Me.columnId.Unique = true
            Me.columnCode.AllowDBNull = false
            Me.columnCode.MaxLength = 50
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 255
            Me.columnDescription.MaxLength = 50
            Me.columnWhatCanHappen.MaxLength = 500
            Me.columnRiskImpact.AllowDBNull = false
            Me.columnOcurrenceProbability.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRiskRow() As RiskRow
            Return CType(Me.NewRow,RiskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RiskRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RiskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RiskRowChangedEvent) Is Nothing) Then
                RaiseEvent RiskRowChanged(Me, New RiskRowChangeEvent(CType(e.Row,RiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RiskRowChangingEvent) Is Nothing) Then
                RaiseEvent RiskRowChanging(Me, New RiskRowChangeEvent(CType(e.Row,RiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RiskRowDeletedEvent) Is Nothing) Then
                RaiseEvent RiskRowDeleted(Me, New RiskRowChangeEvent(CType(e.Row,RiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RiskRowDeletingEvent) Is Nothing) Then
                RaiseEvent RiskRowDeleting(Me, New RiskRowChangeEvent(CType(e.Row,RiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRiskRow(ByVal row As RiskRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RiskDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ComponentByRiskDataTable
        Inherits Global.System.Data.TypedTableBase(Of ComponentByRiskRow)
        
        Private columnIdRisk As Global.System.Data.DataColumn
        
        Private columnIdComponent As Global.System.Data.DataColumn
        
        Private columnComponentName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ComponentByRisk"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdRiskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdRisk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdComponentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdComponent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ComponentNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnComponentName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ComponentByRiskRow
            Get
                Return CType(Me.Rows(index),ComponentByRiskRow)
            End Get
        End Property
        
        Public Event ComponentByRiskRowChanging As ComponentByRiskRowChangeEventHandler
        
        Public Event ComponentByRiskRowChanged As ComponentByRiskRowChangeEventHandler
        
        Public Event ComponentByRiskRowDeleting As ComponentByRiskRowChangeEventHandler
        
        Public Event ComponentByRiskRowDeleted As ComponentByRiskRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddComponentByRiskRow(ByVal row As ComponentByRiskRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddComponentByRiskRow(ByVal IdRisk As Integer, ByVal IdComponent As Integer, ByVal ComponentName As String) As ComponentByRiskRow
            Dim rowComponentByRiskRow As ComponentByRiskRow = CType(Me.NewRow,ComponentByRiskRow)
            Dim columnValuesArray() As Object = New Object() {IdRisk, IdComponent, ComponentName}
            rowComponentByRiskRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowComponentByRiskRow)
            Return rowComponentByRiskRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ComponentByRiskDataTable = CType(MyBase.Clone,ComponentByRiskDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ComponentByRiskDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdRisk = MyBase.Columns("IdRisk")
            Me.columnIdComponent = MyBase.Columns("IdComponent")
            Me.columnComponentName = MyBase.Columns("ComponentName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdRisk = New Global.System.Data.DataColumn("IdRisk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdRisk)
            Me.columnIdComponent = New Global.System.Data.DataColumn("IdComponent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdComponent)
            Me.columnComponentName = New Global.System.Data.DataColumn("ComponentName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnComponentName)
            Me.columnIdRisk.AllowDBNull = false
            Me.columnIdComponent.AllowDBNull = false
            Me.columnComponentName.AllowDBNull = false
            Me.columnComponentName.MaxLength = 50
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewComponentByRiskRow() As ComponentByRiskRow
            Return CType(Me.NewRow,ComponentByRiskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ComponentByRiskRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ComponentByRiskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ComponentByRiskRowChangedEvent) Is Nothing) Then
                RaiseEvent ComponentByRiskRowChanged(Me, New ComponentByRiskRowChangeEvent(CType(e.Row,ComponentByRiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ComponentByRiskRowChangingEvent) Is Nothing) Then
                RaiseEvent ComponentByRiskRowChanging(Me, New ComponentByRiskRowChangeEvent(CType(e.Row,ComponentByRiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ComponentByRiskRowDeletedEvent) Is Nothing) Then
                RaiseEvent ComponentByRiskRowDeleted(Me, New ComponentByRiskRowChangeEvent(CType(e.Row,ComponentByRiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ComponentByRiskRowDeletingEvent) Is Nothing) Then
                RaiseEvent ComponentByRiskRowDeleting(Me, New ComponentByRiskRowChangeEvent(CType(e.Row,ComponentByRiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveComponentByRiskRow(ByVal row As ComponentByRiskRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ComponentByRiskDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MitigationByRiskDataTable
        Inherits Global.System.Data.TypedTableBase(Of MitigationByRiskRow)
        
        Private columnCode As Global.System.Data.DataColumn
        
        Private columnIdRisk As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnImpactOnRisk As Global.System.Data.DataColumn
        
        Private columnResponsibleName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MitigationByRisk"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdRiskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdRisk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ImpactOnRiskColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnImpactOnRisk
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ResponsibleNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnResponsibleName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MitigationByRiskRow
            Get
                Return CType(Me.Rows(index),MitigationByRiskRow)
            End Get
        End Property
        
        Public Event MitigationByRiskRowChanging As MitigationByRiskRowChangeEventHandler
        
        Public Event MitigationByRiskRowChanged As MitigationByRiskRowChangeEventHandler
        
        Public Event MitigationByRiskRowDeleting As MitigationByRiskRowChangeEventHandler
        
        Public Event MitigationByRiskRowDeleted As MitigationByRiskRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMitigationByRiskRow(ByVal row As MitigationByRiskRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMitigationByRiskRow(ByVal Code As String, ByVal IdRisk As Integer, ByVal Name As String, ByVal Description As String, ByVal ImpactOnRisk As String, ByVal ResponsibleName As String) As MitigationByRiskRow
            Dim rowMitigationByRiskRow As MitigationByRiskRow = CType(Me.NewRow,MitigationByRiskRow)
            Dim columnValuesArray() As Object = New Object() {Code, IdRisk, Name, Description, ImpactOnRisk, ResponsibleName}
            rowMitigationByRiskRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMitigationByRiskRow)
            Return rowMitigationByRiskRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MitigationByRiskDataTable = CType(MyBase.Clone,MitigationByRiskDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MitigationByRiskDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCode = MyBase.Columns("Code")
            Me.columnIdRisk = MyBase.Columns("IdRisk")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnImpactOnRisk = MyBase.Columns("ImpactOnRisk")
            Me.columnResponsibleName = MyBase.Columns("ResponsibleName")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCode = New Global.System.Data.DataColumn("Code", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCode)
            Me.columnIdRisk = New Global.System.Data.DataColumn("IdRisk", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdRisk)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnImpactOnRisk = New Global.System.Data.DataColumn("ImpactOnRisk", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnImpactOnRisk)
            Me.columnResponsibleName = New Global.System.Data.DataColumn("ResponsibleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnResponsibleName)
            Me.columnCode.AllowDBNull = false
            Me.columnCode.MaxLength = 50
            Me.columnIdRisk.AllowDBNull = false
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 255
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 255
            Me.columnImpactOnRisk.AllowDBNull = false
            Me.columnResponsibleName.AllowDBNull = false
            Me.columnResponsibleName.MaxLength = 140
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMitigationByRiskRow() As MitigationByRiskRow
            Return CType(Me.NewRow,MitigationByRiskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MitigationByRiskRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MitigationByRiskRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MitigationByRiskRowChangedEvent) Is Nothing) Then
                RaiseEvent MitigationByRiskRowChanged(Me, New MitigationByRiskRowChangeEvent(CType(e.Row,MitigationByRiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MitigationByRiskRowChangingEvent) Is Nothing) Then
                RaiseEvent MitigationByRiskRowChanging(Me, New MitigationByRiskRowChangeEvent(CType(e.Row,MitigationByRiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MitigationByRiskRowDeletedEvent) Is Nothing) Then
                RaiseEvent MitigationByRiskRowDeleted(Me, New MitigationByRiskRowChangeEvent(CType(e.Row,MitigationByRiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MitigationByRiskRowDeletingEvent) Is Nothing) Then
                RaiseEvent MitigationByRiskRowDeleting(Me, New MitigationByRiskRowChangeEvent(CType(e.Row,MitigationByRiskRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMitigationByRiskRow(ByVal row As MitigationByRiskRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MitigationByRiskDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportLearningDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtReportLearningRow)
        
        Private columnProject As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnUserName As Global.System.Data.DataColumn
        
        Private columnQualitativeIndicators As Global.System.Data.DataColumn
        
        Private columnLearning As Global.System.Data.DataColumn
        
        Private columnAdjust As Global.System.Data.DataColumn
        
        Private columnachievements As Global.System.Data.DataColumn
        
        Private columnState As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportLearning"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QualitativeIndicatorsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQualitativeIndicators
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LearningColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLearning
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdjustColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdjust
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property achievementsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnachievements
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnState
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportLearningRow
            Get
                Return CType(Me.Rows(index),dtReportLearningRow)
            End Get
        End Property
        
        Public Event dtReportLearningRowChanging As dtReportLearningRowChangeEventHandler
        
        Public Event dtReportLearningRowChanged As dtReportLearningRowChangeEventHandler
        
        Public Event dtReportLearningRowDeleting As dtReportLearningRowChangeEventHandler
        
        Public Event dtReportLearningRowDeleted As dtReportLearningRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportLearningRow(ByVal row As dtReportLearningRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportLearningRow(ByVal Project As String, ByVal CreateDate As Date, ByVal UserName As String, ByVal QualitativeIndicators As String, ByVal Learning As String, ByVal Adjust As String, ByVal achievements As String, ByVal State As String) As dtReportLearningRow
            Dim rowdtReportLearningRow As dtReportLearningRow = CType(Me.NewRow,dtReportLearningRow)
            Dim columnValuesArray() As Object = New Object() {Project, CreateDate, UserName, QualitativeIndicators, Learning, Adjust, achievements, State}
            rowdtReportLearningRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportLearningRow)
            Return rowdtReportLearningRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportLearningDataTable = CType(MyBase.Clone,dtReportLearningDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportLearningDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject = MyBase.Columns("Project")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnQualitativeIndicators = MyBase.Columns("QualitativeIndicators")
            Me.columnLearning = MyBase.Columns("Learning")
            Me.columnAdjust = MyBase.Columns("Adjust")
            Me.columnachievements = MyBase.Columns("achievements")
            Me.columnState = MyBase.Columns("State")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnQualitativeIndicators = New Global.System.Data.DataColumn("QualitativeIndicators", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQualitativeIndicators)
            Me.columnLearning = New Global.System.Data.DataColumn("Learning", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLearning)
            Me.columnAdjust = New Global.System.Data.DataColumn("Adjust", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdjust)
            Me.columnachievements = New Global.System.Data.DataColumn("achievements", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnachievements)
            Me.columnState = New Global.System.Data.DataColumn("State", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnState)
            Me.columnProject.AllowDBNull = false
            Me.columnProject.MaxLength = 255
            Me.columnCreateDate.AllowDBNull = false
            Me.columnUserName.AllowDBNull = false
            Me.columnUserName.MaxLength = 140
            Me.columnQualitativeIndicators.MaxLength = 2000
            Me.columnLearning.MaxLength = 4000
            Me.columnAdjust.MaxLength = 4000
            Me.columnachievements.MaxLength = 4000
            Me.columnState.ReadOnly = true
            Me.columnState.MaxLength = 5
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportLearningRow() As dtReportLearningRow
            Return CType(Me.NewRow,dtReportLearningRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportLearningRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportLearningRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportLearningRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportLearningRowChanged(Me, New dtReportLearningRowChangeEvent(CType(e.Row,dtReportLearningRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportLearningRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportLearningRowChanging(Me, New dtReportLearningRowChangeEvent(CType(e.Row,dtReportLearningRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportLearningRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportLearningRowDeleted(Me, New dtReportLearningRowChangeEvent(CType(e.Row,dtReportLearningRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportLearningRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportLearningRowDeleting(Me, New dtReportLearningRowChangeEvent(CType(e.Row,dtReportLearningRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportLearningRow(ByVal row As dtReportLearningRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportLearningDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportTestimonyListDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtReportTestimonyListRow)
        
        Private columnProject As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnProjectRole As Global.System.Data.DataColumn
        
        Private columnDepto As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnNameTestimony As Global.System.Data.DataColumn
        
        Private columnAge As Global.System.Data.DataColumn
        
        Private columnIdTestimony As Global.System.Data.DataColumn
        
        Private columnSex As Global.System.Data.DataColumn
        
        Private columnPhone As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportTestimonyList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectRoleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectRole
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameTestimonyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNameTestimony
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AgeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAge
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdTestimonyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdTestimony
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SexColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSex
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportTestimonyListRow
            Get
                Return CType(Me.Rows(index),dtReportTestimonyListRow)
            End Get
        End Property
        
        Public Event dtReportTestimonyListRowChanging As dtReportTestimonyListRowChangeEventHandler
        
        Public Event dtReportTestimonyListRowChanged As dtReportTestimonyListRowChangeEventHandler
        
        Public Event dtReportTestimonyListRowDeleting As dtReportTestimonyListRowChangeEventHandler
        
        Public Event dtReportTestimonyListRowDeleted As dtReportTestimonyListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportTestimonyListRow(ByVal row As dtReportTestimonyListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportTestimonyListRow(ByVal Project As String, ByVal CreateDate As Date, ByVal ProjectRole As String, ByVal Depto As String, ByVal City As String, ByVal NameTestimony As String, ByVal Age As String, ByVal IdTestimony As Integer, ByVal Sex As String, ByVal Phone As String, ByVal Email As String, ByVal Description As String) As dtReportTestimonyListRow
            Dim rowdtReportTestimonyListRow As dtReportTestimonyListRow = CType(Me.NewRow,dtReportTestimonyListRow)
            Dim columnValuesArray() As Object = New Object() {Project, CreateDate, ProjectRole, Depto, City, NameTestimony, Age, IdTestimony, Sex, Phone, Email, Description}
            rowdtReportTestimonyListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportTestimonyListRow)
            Return rowdtReportTestimonyListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByIdTestimony(ByVal IdTestimony As Integer) As dtReportTestimonyListRow
            Return CType(Me.Rows.Find(New Object() {IdTestimony}),dtReportTestimonyListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportTestimonyListDataTable = CType(MyBase.Clone,dtReportTestimonyListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportTestimonyListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject = MyBase.Columns("Project")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnProjectRole = MyBase.Columns("ProjectRole")
            Me.columnDepto = MyBase.Columns("Depto")
            Me.columnCity = MyBase.Columns("City")
            Me.columnNameTestimony = MyBase.Columns("NameTestimony")
            Me.columnAge = MyBase.Columns("Age")
            Me.columnIdTestimony = MyBase.Columns("IdTestimony")
            Me.columnSex = MyBase.Columns("Sex")
            Me.columnPhone = MyBase.Columns("Phone")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnDescription = MyBase.Columns("Description")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnProjectRole = New Global.System.Data.DataColumn("ProjectRole", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectRole)
            Me.columnDepto = New Global.System.Data.DataColumn("Depto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepto)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnNameTestimony = New Global.System.Data.DataColumn("NameTestimony", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNameTestimony)
            Me.columnAge = New Global.System.Data.DataColumn("Age", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAge)
            Me.columnIdTestimony = New Global.System.Data.DataColumn("IdTestimony", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdTestimony)
            Me.columnSex = New Global.System.Data.DataColumn("Sex", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSex)
            Me.columnPhone = New Global.System.Data.DataColumn("Phone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPhone)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnIdTestimony}, true))
            Me.columnProject.AllowDBNull = false
            Me.columnProject.MaxLength = 255
            Me.columnCreateDate.AllowDBNull = false
            Me.columnProjectRole.MaxLength = 100
            Me.columnDepto.AllowDBNull = false
            Me.columnDepto.MaxLength = 50
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 50
            Me.columnNameTestimony.MaxLength = 100
            Me.columnAge.MaxLength = 50
            Me.columnIdTestimony.AllowDBNull = false
            Me.columnIdTestimony.Unique = true
            Me.columnSex.MaxLength = 50
            Me.columnPhone.MaxLength = 50
            Me.columnEmail.MaxLength = 50
            Me.columnDescription.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportTestimonyListRow() As dtReportTestimonyListRow
            Return CType(Me.NewRow,dtReportTestimonyListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportTestimonyListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportTestimonyListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportTestimonyListRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportTestimonyListRowChanged(Me, New dtReportTestimonyListRowChangeEvent(CType(e.Row,dtReportTestimonyListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportTestimonyListRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportTestimonyListRowChanging(Me, New dtReportTestimonyListRowChangeEvent(CType(e.Row,dtReportTestimonyListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportTestimonyListRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportTestimonyListRowDeleted(Me, New dtReportTestimonyListRowChangeEvent(CType(e.Row,dtReportTestimonyListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportTestimonyListRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportTestimonyListRowDeleting(Me, New dtReportTestimonyListRowChangeEvent(CType(e.Row,dtReportTestimonyListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportTestimonyListRow(ByVal row As dtReportTestimonyListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportTestimonyListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportOperatorListDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtReportOperatorListRow)
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnDepto As Global.System.Data.DataColumn
        
        Private columnProject As Global.System.Data.DataColumn
        
        Private columnOperator As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportOperatorList"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OperatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOperator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportOperatorListRow
            Get
                Return CType(Me.Rows(index),dtReportOperatorListRow)
            End Get
        End Property
        
        Public Event dtReportOperatorListRowChanging As dtReportOperatorListRowChangeEventHandler
        
        Public Event dtReportOperatorListRowChanged As dtReportOperatorListRowChangeEventHandler
        
        Public Event dtReportOperatorListRowDeleting As dtReportOperatorListRowChangeEventHandler
        
        Public Event dtReportOperatorListRowDeleted As dtReportOperatorListRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportOperatorListRow(ByVal row As dtReportOperatorListRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportOperatorListRow(ByVal City As String, ByVal Depto As String, ByVal Project As String, ByVal _Operator As String) As dtReportOperatorListRow
            Dim rowdtReportOperatorListRow As dtReportOperatorListRow = CType(Me.NewRow,dtReportOperatorListRow)
            Dim columnValuesArray() As Object = New Object() {City, Depto, Project, _Operator}
            rowdtReportOperatorListRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportOperatorListRow)
            Return rowdtReportOperatorListRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportOperatorListDataTable = CType(MyBase.Clone,dtReportOperatorListDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportOperatorListDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCity = MyBase.Columns("City")
            Me.columnDepto = MyBase.Columns("Depto")
            Me.columnProject = MyBase.Columns("Project")
            Me.columnOperator = MyBase.Columns("Operator")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnDepto = New Global.System.Data.DataColumn("Depto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepto)
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
            Me.columnOperator = New Global.System.Data.DataColumn("Operator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            Me.columnOperator.ExtendedProperties.Add("Generator_ColumnPropNameInTable", "OperatorColumn")
            Me.columnOperator.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnOperator")
            Me.columnOperator.ExtendedProperties.Add("Generator_UserColumnName", "Operator")
            MyBase.Columns.Add(Me.columnOperator)
            Me.columnCity.MaxLength = 50
            Me.columnDepto.MaxLength = 50
            Me.columnProject.AllowDBNull = false
            Me.columnProject.MaxLength = 255
            Me.columnOperator.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportOperatorListRow() As dtReportOperatorListRow
            Return CType(Me.NewRow,dtReportOperatorListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportOperatorListRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportOperatorListRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportOperatorListRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportOperatorListRowChanged(Me, New dtReportOperatorListRowChangeEvent(CType(e.Row,dtReportOperatorListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportOperatorListRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportOperatorListRowChanging(Me, New dtReportOperatorListRowChangeEvent(CType(e.Row,dtReportOperatorListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportOperatorListRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportOperatorListRowDeleted(Me, New dtReportOperatorListRowChangeEvent(CType(e.Row,dtReportOperatorListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportOperatorListRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportOperatorListRowDeleting(Me, New dtReportOperatorListRowChangeEvent(CType(e.Row,dtReportOperatorListRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportOperatorListRow(ByVal row As dtReportOperatorListRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportOperatorListDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportCloseRegistryDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtReportCloseRegistryRow)
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnObjective As Global.System.Data.DataColumn
        
        Private columnClosingDate As Global.System.Data.DataColumn
        
        Private columnWeakness As Global.System.Data.DataColumn
        
        Private columnOpportunity As Global.System.Data.DataColumn
        
        Private columnStrengths As Global.System.Data.DataColumn
        
        Private columnLearningForNewProjects As Global.System.Data.DataColumn
        
        Private columnGoodPractice As Global.System.Data.DataColumn
        
        Private columnIdKey As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportCloseRegistry"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjective
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClosingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClosingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WeaknessColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWeakness
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OpportunityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOpportunity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StrengthsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStrengths
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LearningForNewProjectsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLearningForNewProjects
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoodPracticeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoodPractice
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdKeyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdKey
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportCloseRegistryRow
            Get
                Return CType(Me.Rows(index),dtReportCloseRegistryRow)
            End Get
        End Property
        
        Public Event dtReportCloseRegistryRowChanging As dtReportCloseRegistryRowChangeEventHandler
        
        Public Event dtReportCloseRegistryRowChanged As dtReportCloseRegistryRowChangeEventHandler
        
        Public Event dtReportCloseRegistryRowDeleting As dtReportCloseRegistryRowChangeEventHandler
        
        Public Event dtReportCloseRegistryRowDeleted As dtReportCloseRegistryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportCloseRegistryRow(ByVal row As dtReportCloseRegistryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportCloseRegistryRow(ByVal Name As String, ByVal Objective As String, ByVal ClosingDate As Date, ByVal Weakness As String, ByVal Opportunity As String, ByVal Strengths As String, ByVal LearningForNewProjects As String, ByVal GoodPractice As Boolean, ByVal IdKey As String) As dtReportCloseRegistryRow
            Dim rowdtReportCloseRegistryRow As dtReportCloseRegistryRow = CType(Me.NewRow,dtReportCloseRegistryRow)
            Dim columnValuesArray() As Object = New Object() {Name, Objective, ClosingDate, Weakness, Opportunity, Strengths, LearningForNewProjects, GoodPractice, IdKey}
            rowdtReportCloseRegistryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportCloseRegistryRow)
            Return rowdtReportCloseRegistryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportCloseRegistryDataTable = CType(MyBase.Clone,dtReportCloseRegistryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportCloseRegistryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnName = MyBase.Columns("Name")
            Me.columnObjective = MyBase.Columns("Objective")
            Me.columnClosingDate = MyBase.Columns("ClosingDate")
            Me.columnWeakness = MyBase.Columns("Weakness")
            Me.columnOpportunity = MyBase.Columns("Opportunity")
            Me.columnStrengths = MyBase.Columns("Strengths")
            Me.columnLearningForNewProjects = MyBase.Columns("LearningForNewProjects")
            Me.columnGoodPractice = MyBase.Columns("GoodPractice")
            Me.columnIdKey = MyBase.Columns("IdKey")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnObjective = New Global.System.Data.DataColumn("Objective", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjective)
            Me.columnClosingDate = New Global.System.Data.DataColumn("ClosingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClosingDate)
            Me.columnWeakness = New Global.System.Data.DataColumn("Weakness", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWeakness)
            Me.columnOpportunity = New Global.System.Data.DataColumn("Opportunity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOpportunity)
            Me.columnStrengths = New Global.System.Data.DataColumn("Strengths", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStrengths)
            Me.columnLearningForNewProjects = New Global.System.Data.DataColumn("LearningForNewProjects", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLearningForNewProjects)
            Me.columnGoodPractice = New Global.System.Data.DataColumn("GoodPractice", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoodPractice)
            Me.columnIdKey = New Global.System.Data.DataColumn("IdKey", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdKey)
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 255
            Me.columnObjective.MaxLength = 800
            Me.columnWeakness.MaxLength = 300
            Me.columnOpportunity.MaxLength = 300
            Me.columnStrengths.MaxLength = 300
            Me.columnLearningForNewProjects.MaxLength = 300
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportCloseRegistryRow() As dtReportCloseRegistryRow
            Return CType(Me.NewRow,dtReportCloseRegistryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportCloseRegistryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportCloseRegistryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportCloseRegistryRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportCloseRegistryRowChanged(Me, New dtReportCloseRegistryRowChangeEvent(CType(e.Row,dtReportCloseRegistryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportCloseRegistryRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportCloseRegistryRowChanging(Me, New dtReportCloseRegistryRowChangeEvent(CType(e.Row,dtReportCloseRegistryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportCloseRegistryRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportCloseRegistryRowDeleted(Me, New dtReportCloseRegistryRowChangeEvent(CType(e.Row,dtReportCloseRegistryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportCloseRegistryRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportCloseRegistryRowDeleting(Me, New dtReportCloseRegistryRowChangeEvent(CType(e.Row,dtReportCloseRegistryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportCloseRegistryRow(ByVal row As dtReportCloseRegistryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportCloseRegistryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtOperatorByProjectDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtOperatorByProjectRow)
        
        Private columnIdProject As Global.System.Data.DataColumn
        
        Private columnIdOperator As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtOperatorByProject"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdOperatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdOperator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtOperatorByProjectRow
            Get
                Return CType(Me.Rows(index),dtOperatorByProjectRow)
            End Get
        End Property
        
        Public Event dtOperatorByProjectRowChanging As dtOperatorByProjectRowChangeEventHandler
        
        Public Event dtOperatorByProjectRowChanged As dtOperatorByProjectRowChangeEventHandler
        
        Public Event dtOperatorByProjectRowDeleting As dtOperatorByProjectRowChangeEventHandler
        
        Public Event dtOperatorByProjectRowDeleted As dtOperatorByProjectRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtOperatorByProjectRow(ByVal row As dtOperatorByProjectRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtOperatorByProjectRow(ByVal IdProject As String, ByVal IdOperator As String, ByVal Name As String) As dtOperatorByProjectRow
            Dim rowdtOperatorByProjectRow As dtOperatorByProjectRow = CType(Me.NewRow,dtOperatorByProjectRow)
            Dim columnValuesArray() As Object = New Object() {IdProject, IdOperator, Name}
            rowdtOperatorByProjectRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtOperatorByProjectRow)
            Return rowdtOperatorByProjectRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtOperatorByProjectDataTable = CType(MyBase.Clone,dtOperatorByProjectDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtOperatorByProjectDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdProject = MyBase.Columns("IdProject")
            Me.columnIdOperator = MyBase.Columns("IdOperator")
            Me.columnName = MyBase.Columns("Name")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdProject = New Global.System.Data.DataColumn("IdProject", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProject)
            Me.columnIdOperator = New Global.System.Data.DataColumn("IdOperator", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdOperator)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtOperatorByProjectRow() As dtOperatorByProjectRow
            Return CType(Me.NewRow,dtOperatorByProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtOperatorByProjectRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtOperatorByProjectRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtOperatorByProjectRowChangedEvent) Is Nothing) Then
                RaiseEvent dtOperatorByProjectRowChanged(Me, New dtOperatorByProjectRowChangeEvent(CType(e.Row,dtOperatorByProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtOperatorByProjectRowChangingEvent) Is Nothing) Then
                RaiseEvent dtOperatorByProjectRowChanging(Me, New dtOperatorByProjectRowChangeEvent(CType(e.Row,dtOperatorByProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtOperatorByProjectRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtOperatorByProjectRowDeleted(Me, New dtOperatorByProjectRowChangeEvent(CType(e.Row,dtOperatorByProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtOperatorByProjectRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtOperatorByProjectRowDeleting(Me, New dtOperatorByProjectRowChangeEvent(CType(e.Row,dtOperatorByProjectRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtOperatorByProjectRow(ByVal row As dtOperatorByProjectRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsFormulation = New dsFormulation
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtOperatorByProjectDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BasicProjectDataRow
        Inherits Global.System.Data.DataRow
        
        Private tableBasicProjectData As BasicProjectDataDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBasicProjectData = CType(Me.Table,BasicProjectDataDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code() As String
            Get
                Return CType(Me(Me.tableBasicProjectData.CodeColumn),String)
            End Get
            Set
                Me(Me.tableBasicProjectData.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableBasicProjectData.NameColumn),String)
            End Get
            Set
                Me(Me.tableBasicProjectData.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objective() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.ObjectiveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Objective' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.ObjectiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Antecedent() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.AntecedentColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Antecedent' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.AntecedentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Justification() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.JustificationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Justification' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.JustificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeginDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.BeginDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BeginDate' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.BeginDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Duration() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.DurationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Duration' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.DurationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZoneDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.ZoneDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ZoneDescription' de la tabla 'BasicProjectData' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.ZoneDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Population() As String
            Get
                Return CType(Me(Me.tableBasicProjectData.PopulationColumn),String)
            End Get
            Set
                Me(Me.tableBasicProjectData.PopulationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StrategicDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.StrategicDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'StrategicDescription' de la tabla 'BasicProjectData' es D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.StrategicDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Results() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.ResultsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Results' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.ResultsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Source() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.SourceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Source' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.SourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Purpose() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.PurposeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Purpose' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.PurposeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.TotalCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalCost' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.TotalCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FSCContribution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.FSCContributionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FSCContribution' de la tabla 'BasicProjectData' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.FSCContributionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CounterpartValue() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.CounterpartValueColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CounterpartValue' de la tabla 'BasicProjectData' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.CounterpartValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EffectiveBudget() As Integer
            Get
                Return CType(Me(Me.tableBasicProjectData.EffectiveBudgetColumn),Integer)
            End Get
            Set
                Me(Me.tableBasicProjectData.EffectiveBudgetColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Return CType(Me(Me.tableBasicProjectData.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tableBasicProjectData.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ideaName() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.ideaNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ideaName' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.ideaNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property userName() As String
            Get
                Return CType(Me(Me.tableBasicProjectData.userNameColumn),String)
            End Get
            Set
                Me(Me.tableBasicProjectData.userNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property phaseName() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.phaseNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'phaseName' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.phaseNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As String
            Get
                Try 
                    Return CType(Me(Me.tableBasicProjectData.IdColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id' de la tabla 'BasicProjectData' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBasicProjectData.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectiveNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.ObjectiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectiveNull()
            Me(Me.tableBasicProjectData.ObjectiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAntecedentNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.AntecedentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAntecedentNull()
            Me(Me.tableBasicProjectData.AntecedentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJustificationNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.JustificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJustificationNull()
            Me(Me.tableBasicProjectData.JustificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeginDateNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.BeginDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeginDateNull()
            Me(Me.tableBasicProjectData.BeginDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurationNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.DurationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurationNull()
            Me(Me.tableBasicProjectData.DurationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZoneDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.ZoneDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZoneDescriptionNull()
            Me(Me.tableBasicProjectData.ZoneDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStrategicDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.StrategicDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStrategicDescriptionNull()
            Me(Me.tableBasicProjectData.StrategicDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResultsNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.ResultsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResultsNull()
            Me(Me.tableBasicProjectData.ResultsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.SourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceNull()
            Me(Me.tableBasicProjectData.SourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPurposeNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.PurposeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPurposeNull()
            Me(Me.tableBasicProjectData.PurposeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCostNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.TotalCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCostNull()
            Me(Me.tableBasicProjectData.TotalCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFSCContributionNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.FSCContributionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFSCContributionNull()
            Me(Me.tableBasicProjectData.FSCContributionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCounterpartValueNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.CounterpartValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCounterpartValueNull()
            Me(Me.tableBasicProjectData.CounterpartValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsideaNameNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.ideaNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetideaNameNull()
            Me(Me.tableBasicProjectData.ideaNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsphaseNameNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.phaseNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetphaseNameNull()
            Me(Me.tableBasicProjectData.phaseNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tableBasicProjectData.IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdNull()
            Me(Me.tableBasicProjectData.IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MatrixIndicatorRow
        Inherits Global.System.Data.DataRow
        
        Private tableMatrixIndicator As MatrixIndicatorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMatrixIndicator = CType(Me.Table,MatrixIndicatorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Type() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatrixIndicator.TypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Type' de la tabla 'MatrixIndicator' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatrixIndicator.TypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableMatrixIndicator.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableMatrixIndicator.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Goal() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatrixIndicator.GoalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Goal' de la tabla 'MatrixIndicator' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatrixIndicator.GoalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GreenValue() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatrixIndicator.GreenValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GreenValue' de la tabla 'MatrixIndicator' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatrixIndicator.GreenValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YellowValue() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatrixIndicator.YellowValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'YellowValue' de la tabla 'MatrixIndicator' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatrixIndicator.YellowValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RedValue() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatrixIndicator.RedValueColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'RedValue' de la tabla 'MatrixIndicator' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatrixIndicator.RedValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SourceVerification() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatrixIndicator.SourceVerificationColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SourceVerification' de la tabla 'MatrixIndicator' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatrixIndicator.SourceVerificationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Assumptions() As String
            Get
                Try 
                    Return CType(Me(Me.tableMatrixIndicator.AssumptionsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Assumptions' de la tabla 'MatrixIndicator' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatrixIndicator.AssumptionsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectId() As Integer
            Get
                Return CType(Me(Me.tableMatrixIndicator.ProjectIdColumn),Integer)
            End Get
            Set
                Me(Me.tableMatrixIndicator.ProjectIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property projectName() As String
            Get
                Return CType(Me(Me.tableMatrixIndicator.projectNameColumn),String)
            End Get
            Set
                Me(Me.tableMatrixIndicator.projectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMatrixIndicator.IdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id' de la tabla 'MatrixIndicator' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMatrixIndicator.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeNull() As Boolean
            Return Me.IsNull(Me.tableMatrixIndicator.TypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeNull()
            Me(Me.tableMatrixIndicator.TypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoalNull() As Boolean
            Return Me.IsNull(Me.tableMatrixIndicator.GoalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoalNull()
            Me(Me.tableMatrixIndicator.GoalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGreenValueNull() As Boolean
            Return Me.IsNull(Me.tableMatrixIndicator.GreenValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGreenValueNull()
            Me(Me.tableMatrixIndicator.GreenValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsYellowValueNull() As Boolean
            Return Me.IsNull(Me.tableMatrixIndicator.YellowValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetYellowValueNull()
            Me(Me.tableMatrixIndicator.YellowValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRedValueNull() As Boolean
            Return Me.IsNull(Me.tableMatrixIndicator.RedValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRedValueNull()
            Me(Me.tableMatrixIndicator.RedValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSourceVerificationNull() As Boolean
            Return Me.IsNull(Me.tableMatrixIndicator.SourceVerificationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSourceVerificationNull()
            Me(Me.tableMatrixIndicator.SourceVerificationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssumptionsNull() As Boolean
            Return Me.IsNull(Me.tableMatrixIndicator.AssumptionsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssumptionsNull()
            Me(Me.tableMatrixIndicator.AssumptionsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tableMatrixIndicator.IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdNull()
            Me(Me.tableMatrixIndicator.IdColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MeasurementDateByIndicatorRow
        Inherits Global.System.Data.DataRow
        
        Private tableMeasurementDateByIndicator As MeasurementDateByIndicatorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMeasurementDateByIndicator = CType(Me.Table,MeasurementDateByIndicatorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property measurementDate() As Date
            Get
                Return CType(Me(Me.tableMeasurementDateByIndicator.measurementDateColumn),Date)
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.measurementDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdIndicator() As Integer
            Get
                Return CType(Me(Me.tableMeasurementDateByIndicator.IdIndicatorColumn),Integer)
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.IdIndicatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectId() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMeasurementDateByIndicator.ProjectIdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ProjectId' de la tabla 'MeasurementDateByIndicator' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.ProjectIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property measure() As String
            Get
                Try 
                    Return CType(Me(Me.tableMeasurementDateByIndicator.measureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'measure' de la tabla 'MeasurementDateByIndicator' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.measureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property measuretype() As String
            Get
                Try 
                    Return CType(Me(Me.tableMeasurementDateByIndicator.measuretypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'measuretype' de la tabla 'MeasurementDateByIndicator' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.measuretypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectIdNull() As Boolean
            Return Me.IsNull(Me.tableMeasurementDateByIndicator.ProjectIdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectIdNull()
            Me(Me.tableMeasurementDateByIndicator.ProjectIdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeasureNull() As Boolean
            Return Me.IsNull(Me.tableMeasurementDateByIndicator.measureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeasureNull()
            Me(Me.tableMeasurementDateByIndicator.measureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeasuretypeNull() As Boolean
            Return Me.IsNull(Me.tableMeasurementDateByIndicator.measuretypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeasuretypeNull()
            Me(Me.tableMeasurementDateByIndicator.measuretypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtExecutionPlanRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtExecutionPlan As dtExecutionPlanDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtExecutionPlan = CType(Me.Table,dtExecutionPlanDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdComponent() As Integer
            Get
                Return CType(Me(Me.tabledtExecutionPlan.IdComponentColumn),Integer)
            End Get
            Set
                Me(Me.tabledtExecutionPlan.IdComponentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComponentName() As String
            Get
                Return CType(Me(Me.tabledtExecutionPlan.ComponentNameColumn),String)
            End Get
            Set
                Me(Me.tabledtExecutionPlan.ComponentNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ActivityName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.ActivityNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ActivityName' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.ActivityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdActivity() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.IdActivityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdActivity' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.IdActivityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SubActivityName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.SubActivityNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'SubActivityName' de la tabla 'dtExecutionPlan' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.SubActivityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdSubActivity() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.IdSubActivityColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdSubActivity' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.IdSubActivityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Responsible() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.ResponsibleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Responsible' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.ResponsibleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeginDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.BeginDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BeginDate' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.BeginDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EndDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.EndDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EndDate' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.EndDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Duration() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.DurationColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Duration' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.DurationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.TotalCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalCost' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.TotalCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FSCContribution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.FSCContributionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FSCContribution' de la tabla 'dtExecutionPlan' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.FSCContributionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OFContribution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtExecutionPlan.OFContributionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'OFContribution' de la tabla 'dtExecutionPlan' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtExecutionPlan.OFContributionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsActivityNameNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.ActivityNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetActivityNameNull()
            Me(Me.tabledtExecutionPlan.ActivityNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdActivityNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.IdActivityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdActivityNull()
            Me(Me.tabledtExecutionPlan.IdActivityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSubActivityNameNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.SubActivityNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSubActivityNameNull()
            Me(Me.tabledtExecutionPlan.SubActivityNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdSubActivityNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.IdSubActivityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdSubActivityNull()
            Me(Me.tabledtExecutionPlan.IdSubActivityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsResponsibleNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.ResponsibleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetResponsibleNull()
            Me(Me.tabledtExecutionPlan.ResponsibleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeginDateNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.BeginDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeginDateNull()
            Me(Me.tabledtExecutionPlan.BeginDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEndDateNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.EndDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEndDateNull()
            Me(Me.tabledtExecutionPlan.EndDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDurationNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.DurationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDurationNull()
            Me(Me.tabledtExecutionPlan.DurationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCostNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.TotalCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCostNull()
            Me(Me.tabledtExecutionPlan.TotalCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFSCContributionNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.FSCContributionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFSCContributionNull()
            Me(Me.tabledtExecutionPlan.FSCContributionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOFContributionNull() As Boolean
            Return Me.IsNull(Me.tabledtExecutionPlan.OFContributionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOFContributionNull()
            Me(Me.tabledtExecutionPlan.OFContributionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RiskRow
        Inherits Global.System.Data.DataRow
        
        Private tableRisk As RiskDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRisk = CType(Me.Table,RiskDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Return CType(Me(Me.tableRisk.IdColumn),Integer)
            End Get
            Set
                Me(Me.tableRisk.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code() As String
            Get
                Return CType(Me(Me.tableRisk.CodeColumn),String)
            End Get
            Set
                Me(Me.tableRisk.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableRisk.NameColumn),String)
            End Get
            Set
                Me(Me.tableRisk.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tableRisk.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Description' de la tabla 'Risk' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRisk.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WhatCanHappen() As String
            Get
                Try 
                    Return CType(Me(Me.tableRisk.WhatCanHappenColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'WhatCanHappen' de la tabla 'Risk' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRisk.WhatCanHappenColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RiskImpact() As String
            Get
                Return CType(Me(Me.tableRisk.RiskImpactColumn),String)
            End Get
            Set
                Me(Me.tableRisk.RiskImpactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OcurrenceProbability() As String
            Get
                Return CType(Me(Me.tableRisk.OcurrenceProbabilityColumn),String)
            End Get
            Set
                Me(Me.tableRisk.OcurrenceProbabilityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRisk.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tableRisk.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWhatCanHappenNull() As Boolean
            Return Me.IsNull(Me.tableRisk.WhatCanHappenColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWhatCanHappenNull()
            Me(Me.tableRisk.WhatCanHappenColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ComponentByRiskRow
        Inherits Global.System.Data.DataRow
        
        Private tableComponentByRisk As ComponentByRiskDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableComponentByRisk = CType(Me.Table,ComponentByRiskDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdRisk() As Integer
            Get
                Return CType(Me(Me.tableComponentByRisk.IdRiskColumn),Integer)
            End Get
            Set
                Me(Me.tableComponentByRisk.IdRiskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdComponent() As Integer
            Get
                Return CType(Me(Me.tableComponentByRisk.IdComponentColumn),Integer)
            End Get
            Set
                Me(Me.tableComponentByRisk.IdComponentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ComponentName() As String
            Get
                Return CType(Me(Me.tableComponentByRisk.ComponentNameColumn),String)
            End Get
            Set
                Me(Me.tableComponentByRisk.ComponentNameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MitigationByRiskRow
        Inherits Global.System.Data.DataRow
        
        Private tableMitigationByRisk As MitigationByRiskDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMitigationByRisk = CType(Me.Table,MitigationByRiskDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Code() As String
            Get
                Return CType(Me(Me.tableMitigationByRisk.CodeColumn),String)
            End Get
            Set
                Me(Me.tableMitigationByRisk.CodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdRisk() As Integer
            Get
                Return CType(Me(Me.tableMitigationByRisk.IdRiskColumn),Integer)
            End Get
            Set
                Me(Me.tableMitigationByRisk.IdRiskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableMitigationByRisk.NameColumn),String)
            End Get
            Set
                Me(Me.tableMitigationByRisk.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableMitigationByRisk.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableMitigationByRisk.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ImpactOnRisk() As String
            Get
                Return CType(Me(Me.tableMitigationByRisk.ImpactOnRiskColumn),String)
            End Get
            Set
                Me(Me.tableMitigationByRisk.ImpactOnRiskColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ResponsibleName() As String
            Get
                Return CType(Me(Me.tableMitigationByRisk.ResponsibleNameColumn),String)
            End Get
            Set
                Me(Me.tableMitigationByRisk.ResponsibleNameColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportLearningRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportLearning As dtReportLearningDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportLearning = CType(Me.Table,dtReportLearningDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Return CType(Me(Me.tabledtReportLearning.ProjectColumn),String)
            End Get
            Set
                Me(Me.tabledtReportLearning.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Return CType(Me(Me.tabledtReportLearning.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tabledtReportLearning.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserName() As String
            Get
                Return CType(Me(Me.tabledtReportLearning.UserNameColumn),String)
            End Get
            Set
                Me(Me.tabledtReportLearning.UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QualitativeIndicators() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportLearning.QualitativeIndicatorsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QualitativeIndicators' de la tabla 'dtReportLearning' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportLearning.QualitativeIndicatorsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Learning() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportLearning.LearningColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Learning' de la tabla 'dtReportLearning' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportLearning.LearningColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Adjust() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportLearning.AdjustColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Adjust' de la tabla 'dtReportLearning' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportLearning.AdjustColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property achievements() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportLearning.achievementsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'achievements' de la tabla 'dtReportLearning' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportLearning.achievementsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property State() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportLearning.StateColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'State' de la tabla 'dtReportLearning' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportLearning.StateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQualitativeIndicatorsNull() As Boolean
            Return Me.IsNull(Me.tabledtReportLearning.QualitativeIndicatorsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQualitativeIndicatorsNull()
            Me(Me.tabledtReportLearning.QualitativeIndicatorsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLearningNull() As Boolean
            Return Me.IsNull(Me.tabledtReportLearning.LearningColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLearningNull()
            Me(Me.tabledtReportLearning.LearningColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdjustNull() As Boolean
            Return Me.IsNull(Me.tabledtReportLearning.AdjustColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdjustNull()
            Me(Me.tabledtReportLearning.AdjustColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsachievementsNull() As Boolean
            Return Me.IsNull(Me.tabledtReportLearning.achievementsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetachievementsNull()
            Me(Me.tabledtReportLearning.achievementsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStateNull() As Boolean
            Return Me.IsNull(Me.tabledtReportLearning.StateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStateNull()
            Me(Me.tabledtReportLearning.StateColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportTestimonyListRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportTestimonyList As dtReportTestimonyListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportTestimonyList = CType(Me.Table,dtReportTestimonyListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Return CType(Me(Me.tabledtReportTestimonyList.ProjectColumn),String)
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Return CType(Me(Me.tabledtReportTestimonyList.CreateDateColumn),Date)
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectRole() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportTestimonyList.ProjectRoleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ProjectRole' de la tabla 'dtReportTestimonyList' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.ProjectRoleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depto() As String
            Get
                Return CType(Me(Me.tabledtReportTestimonyList.DeptoColumn),String)
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.DeptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tabledtReportTestimonyList.CityColumn),String)
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NameTestimony() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportTestimonyList.NameTestimonyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'NameTestimony' de la tabla 'dtReportTestimonyList' es DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.NameTestimonyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Age() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportTestimonyList.AgeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Age' de la tabla 'dtReportTestimonyList' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.AgeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdTestimony() As Integer
            Get
                Return CType(Me(Me.tabledtReportTestimonyList.IdTestimonyColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.IdTestimonyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sex() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportTestimonyList.SexColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Sex' de la tabla 'dtReportTestimonyList' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.SexColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phone() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportTestimonyList.PhoneColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Phone' de la tabla 'dtReportTestimonyList' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.PhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportTestimonyList.EmailColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Email' de la tabla 'dtReportTestimonyList' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportTestimonyList.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Description' de la tabla 'dtReportTestimonyList' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportTestimonyList.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectRoleNull() As Boolean
            Return Me.IsNull(Me.tabledtReportTestimonyList.ProjectRoleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectRoleNull()
            Me(Me.tabledtReportTestimonyList.ProjectRoleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameTestimonyNull() As Boolean
            Return Me.IsNull(Me.tabledtReportTestimonyList.NameTestimonyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameTestimonyNull()
            Me(Me.tabledtReportTestimonyList.NameTestimonyColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAgeNull() As Boolean
            Return Me.IsNull(Me.tabledtReportTestimonyList.AgeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAgeNull()
            Me(Me.tabledtReportTestimonyList.AgeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSexNull() As Boolean
            Return Me.IsNull(Me.tabledtReportTestimonyList.SexColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSexNull()
            Me(Me.tabledtReportTestimonyList.SexColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhoneNull() As Boolean
            Return Me.IsNull(Me.tabledtReportTestimonyList.PhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhoneNull()
            Me(Me.tabledtReportTestimonyList.PhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tabledtReportTestimonyList.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tabledtReportTestimonyList.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabledtReportTestimonyList.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabledtReportTestimonyList.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportOperatorListRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportOperatorList As dtReportOperatorListDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportOperatorList = CType(Me.Table,dtReportOperatorListDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOperatorList.CityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'City' de la tabla 'dtReportOperatorList' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOperatorList.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depto() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOperatorList.DeptoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Depto' de la tabla 'dtReportOperatorList' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOperatorList.DeptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Return CType(Me(Me.tabledtReportOperatorList.ProjectColumn),String)
            End Get
            Set
                Me(Me.tabledtReportOperatorList.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property _Operator() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportOperatorList.OperatorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Operator' de la tabla 'dtReportOperatorList' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportOperatorList.OperatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCityNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOperatorList.CityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCityNull()
            Me(Me.tabledtReportOperatorList.CityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDeptoNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOperatorList.DeptoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDeptoNull()
            Me(Me.tabledtReportOperatorList.DeptoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function Is_OperatorNull() As Boolean
            Return Me.IsNull(Me.tabledtReportOperatorList.OperatorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub Set_OperatorNull()
            Me(Me.tabledtReportOperatorList.OperatorColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportCloseRegistryRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportCloseRegistry As dtReportCloseRegistryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportCloseRegistry = CType(Me.Table,dtReportCloseRegistryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tabledtReportCloseRegistry.NameColumn),String)
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objective() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportCloseRegistry.ObjectiveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Objective' de la tabla 'dtReportCloseRegistry' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.ObjectiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClosingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtReportCloseRegistry.ClosingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClosingDate' de la tabla 'dtReportCloseRegistry' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.ClosingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Weakness() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportCloseRegistry.WeaknessColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Weakness' de la tabla 'dtReportCloseRegistry' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.WeaknessColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Opportunity() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportCloseRegistry.OpportunityColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Opportunity' de la tabla 'dtReportCloseRegistry' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.OpportunityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Strengths() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportCloseRegistry.StrengthsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Strengths' de la tabla 'dtReportCloseRegistry' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.StrengthsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LearningForNewProjects() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportCloseRegistry.LearningForNewProjectsColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'LearningForNewProjects' de la tabla 'dtReportCloseRegistr"& _ 
                            "y' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.LearningForNewProjectsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GoodPractice() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabledtReportCloseRegistry.GoodPracticeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'GoodPractice' de la tabla 'dtReportCloseRegistry' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.GoodPracticeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdKey() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportCloseRegistry.IdKeyColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdKey' de la tabla 'dtReportCloseRegistry' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportCloseRegistry.IdKeyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectiveNull() As Boolean
            Return Me.IsNull(Me.tabledtReportCloseRegistry.ObjectiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectiveNull()
            Me(Me.tabledtReportCloseRegistry.ObjectiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClosingDateNull() As Boolean
            Return Me.IsNull(Me.tabledtReportCloseRegistry.ClosingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClosingDateNull()
            Me(Me.tabledtReportCloseRegistry.ClosingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsWeaknessNull() As Boolean
            Return Me.IsNull(Me.tabledtReportCloseRegistry.WeaknessColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetWeaknessNull()
            Me(Me.tabledtReportCloseRegistry.WeaknessColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOpportunityNull() As Boolean
            Return Me.IsNull(Me.tabledtReportCloseRegistry.OpportunityColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOpportunityNull()
            Me(Me.tabledtReportCloseRegistry.OpportunityColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStrengthsNull() As Boolean
            Return Me.IsNull(Me.tabledtReportCloseRegistry.StrengthsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStrengthsNull()
            Me(Me.tabledtReportCloseRegistry.StrengthsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLearningForNewProjectsNull() As Boolean
            Return Me.IsNull(Me.tabledtReportCloseRegistry.LearningForNewProjectsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLearningForNewProjectsNull()
            Me(Me.tabledtReportCloseRegistry.LearningForNewProjectsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsGoodPracticeNull() As Boolean
            Return Me.IsNull(Me.tabledtReportCloseRegistry.GoodPracticeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetGoodPracticeNull()
            Me(Me.tabledtReportCloseRegistry.GoodPracticeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdKeyNull() As Boolean
            Return Me.IsNull(Me.tabledtReportCloseRegistry.IdKeyColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdKeyNull()
            Me(Me.tabledtReportCloseRegistry.IdKeyColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtOperatorByProjectRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtOperatorByProject As dtOperatorByProjectDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtOperatorByProject = CType(Me.Table,dtOperatorByProjectDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProject() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOperatorByProject.IdProjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdProject' de la tabla 'dtOperatorByProject' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOperatorByProject.IdProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdOperator() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOperatorByProject.IdOperatorColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IdOperator' de la tabla 'dtOperatorByProject' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOperatorByProject.IdOperatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtOperatorByProject.NameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Name' de la tabla 'dtOperatorByProject' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtOperatorByProject.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdProjectNull() As Boolean
            Return Me.IsNull(Me.tabledtOperatorByProject.IdProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdProjectNull()
            Me(Me.tabledtOperatorByProject.IdProjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdOperatorNull() As Boolean
            Return Me.IsNull(Me.tabledtOperatorByProject.IdOperatorColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdOperatorNull()
            Me(Me.tabledtOperatorByProject.IdOperatorColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNameNull() As Boolean
            Return Me.IsNull(Me.tabledtOperatorByProject.NameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNameNull()
            Me(Me.tabledtOperatorByProject.NameColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BasicProjectDataRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As BasicProjectDataRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BasicProjectDataRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BasicProjectDataRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MatrixIndicatorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MatrixIndicatorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MatrixIndicatorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MatrixIndicatorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MeasurementDateByIndicatorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MeasurementDateByIndicatorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MeasurementDateByIndicatorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MeasurementDateByIndicatorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtExecutionPlanRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtExecutionPlanRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtExecutionPlanRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtExecutionPlanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RiskRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RiskRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RiskRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RiskRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ComponentByRiskRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ComponentByRiskRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ComponentByRiskRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ComponentByRiskRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MitigationByRiskRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MitigationByRiskRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MitigationByRiskRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MitigationByRiskRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportLearningRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportLearningRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportLearningRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportLearningRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportTestimonyListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportTestimonyListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportTestimonyListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportTestimonyListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportOperatorListRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportOperatorListRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportOperatorListRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportOperatorListRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportCloseRegistryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportCloseRegistryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportCloseRegistryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportCloseRegistryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtOperatorByProjectRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtOperatorByProjectRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtOperatorByProjectRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtOperatorByProjectRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
