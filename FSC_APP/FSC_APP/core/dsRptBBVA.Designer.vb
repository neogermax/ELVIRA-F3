'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsReportBBVA"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsReportBBVA
    Inherits Global.System.Data.DataSet
    
    Private tabledtRptBBVA As dtRptBBVADataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtRptBBVA")) Is Nothing) Then
                MyBase.Tables.Add(New dtRptBBVADataTable(ds.Tables("dtRptBBVA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtRptBBVA() As dtRptBBVADataTable
        Get
            Return Me.tabledtRptBBVA
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsReportBBVA = CType(MyBase.Clone,dsReportBBVA)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtRptBBVA")) Is Nothing) Then
                MyBase.Tables.Add(New dtRptBBVADataTable(ds.Tables("dtRptBBVA")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtRptBBVA = CType(MyBase.Tables("dtRptBBVA"),dtRptBBVADataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtRptBBVA) Is Nothing) Then
                Me.tabledtRptBBVA.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsReportBBVA"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsReportBBVA.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtRptBBVA = New dtRptBBVADataTable
        MyBase.Tables.Add(Me.tabledtRptBBVA)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtRptBBVA() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsReportBBVA = New dsReportBBVA
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtRptBBVARowChangeEventHandler(ByVal sender As Object, ByVal e As dtRptBBVARowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtRptBBVADataTable
        Inherits Global.System.Data.TypedTableBase(Of dtRptBBVARow)
        
        Private columnFormulario As Global.System.Data.DataColumn
        
        Private columnFormularioInstancia As Global.System.Data.DataColumn
        
        Private columnStartTime As Global.System.Data.DataColumn
        
        Private columnIdProceso As Global.System.Data.DataColumn
        
        Private columnNúmero_de_identificación As Global.System.Data.DataColumn
        
        Private columnNombre_del_cliente As Global.System.Data.DataColumn
        
        Private columnCanal As Global.System.Data.DataColumn
        
        Private columnNombre_del_Gestor As Global.System.Data.DataColumn
        
        Private columnTipo_de_producto As Global.System.Data.DataColumn
        
        Private columnTipo_de_subproducto As Global.System.Data.DataColumn
        
        Private columnTipo_de_cliente As Global.System.Data.DataColumn
        
        Private columnValor_solicitado As Global.System.Data.DataColumn
        
        Private columnIDActivity As Global.System.Data.DataColumn
        
        Private columnStatus As Global.System.Data.DataColumn
        
        Private columnInicioEtapa As Global.System.Data.DataColumn
        
        Private columnCierreEtapa As Global.System.Data.DataColumn
        
        Private columnAsingadoa As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtRptBBVA"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormularioColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormulario
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormularioInstanciaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormularioInstancia
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdProcesoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdProceso
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Número_de_identificaciónColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNúmero_de_identificación
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_del_clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_del_cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CanalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCanal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Nombre_del_GestorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNombre_del_Gestor
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_de_productoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_de_producto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_de_subproductoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_de_subproducto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Tipo_de_clienteColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTipo_de_cliente
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Valor_solicitadoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnValor_solicitado
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IDActivityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIDActivity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InicioEtapaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInicioEtapa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CierreEtapaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCierreEtapa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AsingadoaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAsingadoa
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtRptBBVARow
            Get
                Return CType(Me.Rows(index),dtRptBBVARow)
            End Get
        End Property
        
        Public Event dtRptBBVARowChanging As dtRptBBVARowChangeEventHandler
        
        Public Event dtRptBBVARowChanged As dtRptBBVARowChangeEventHandler
        
        Public Event dtRptBBVARowDeleting As dtRptBBVARowChangeEventHandler
        
        Public Event dtRptBBVARowDeleted As dtRptBBVARowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtRptBBVARow(ByVal row As dtRptBBVARow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtRptBBVARow( _
                    ByVal Formulario As Integer,  _
                    ByVal FormularioInstancia As Integer,  _
                    ByVal StartTime As Date,  _
                    ByVal IdProceso As Integer,  _
                    ByVal Número_de_identificación As String,  _
                    ByVal Nombre_del_cliente As String,  _
                    ByVal Canal As String,  _
                    ByVal Nombre_del_Gestor As String,  _
                    ByVal Tipo_de_producto As String,  _
                    ByVal Tipo_de_subproducto As String,  _
                    ByVal Tipo_de_cliente As String,  _
                    ByVal Valor_solicitado As String,  _
                    ByVal IDActivity As Integer,  _
                    ByVal Status As Integer,  _
                    ByVal InicioEtapa As Date,  _
                    ByVal CierreEtapa As String,  _
                    ByVal Asingadoa As String) As dtRptBBVARow
            Dim rowdtRptBBVARow As dtRptBBVARow = CType(Me.NewRow,dtRptBBVARow)
            Dim columnValuesArray() As Object = New Object() {Formulario, FormularioInstancia, StartTime, IdProceso, Número_de_identificación, Nombre_del_cliente, Canal, Nombre_del_Gestor, Tipo_de_producto, Tipo_de_subproducto, Tipo_de_cliente, Valor_solicitado, IDActivity, Status, InicioEtapa, CierreEtapa, Asingadoa}
            rowdtRptBBVARow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtRptBBVARow)
            Return rowdtRptBBVARow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtRptBBVADataTable = CType(MyBase.Clone,dtRptBBVADataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtRptBBVADataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnFormulario = MyBase.Columns("Formulario")
            Me.columnFormularioInstancia = MyBase.Columns("FormularioInstancia")
            Me.columnStartTime = MyBase.Columns("StartTime")
            Me.columnIdProceso = MyBase.Columns("IdProceso")
            Me.columnNúmero_de_identificación = MyBase.Columns("Número de identificación")
            Me.columnNombre_del_cliente = MyBase.Columns("Nombre del cliente")
            Me.columnCanal = MyBase.Columns("Canal")
            Me.columnNombre_del_Gestor = MyBase.Columns("Nombre del Gestor")
            Me.columnTipo_de_producto = MyBase.Columns("Tipo de producto")
            Me.columnTipo_de_subproducto = MyBase.Columns("Tipo de subproducto")
            Me.columnTipo_de_cliente = MyBase.Columns("Tipo de cliente")
            Me.columnValor_solicitado = MyBase.Columns("Valor solicitado")
            Me.columnIDActivity = MyBase.Columns("IDActivity")
            Me.columnStatus = MyBase.Columns("Status")
            Me.columnInicioEtapa = MyBase.Columns("InicioEtapa")
            Me.columnCierreEtapa = MyBase.Columns("CierreEtapa")
            Me.columnAsingadoa = MyBase.Columns("Asingadoa")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnFormulario = New Global.System.Data.DataColumn("Formulario", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormulario)
            Me.columnFormularioInstancia = New Global.System.Data.DataColumn("FormularioInstancia", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormularioInstancia)
            Me.columnStartTime = New Global.System.Data.DataColumn("StartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartTime)
            Me.columnIdProceso = New Global.System.Data.DataColumn("IdProceso", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdProceso)
            Me.columnNúmero_de_identificación = New Global.System.Data.DataColumn("Número de identificación", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNúmero_de_identificación)
            Me.columnNombre_del_cliente = New Global.System.Data.DataColumn("Nombre del cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_del_cliente)
            Me.columnCanal = New Global.System.Data.DataColumn("Canal", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCanal)
            Me.columnNombre_del_Gestor = New Global.System.Data.DataColumn("Nombre del Gestor", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNombre_del_Gestor)
            Me.columnTipo_de_producto = New Global.System.Data.DataColumn("Tipo de producto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_de_producto)
            Me.columnTipo_de_subproducto = New Global.System.Data.DataColumn("Tipo de subproducto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_de_subproducto)
            Me.columnTipo_de_cliente = New Global.System.Data.DataColumn("Tipo de cliente", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTipo_de_cliente)
            Me.columnValor_solicitado = New Global.System.Data.DataColumn("Valor solicitado", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnValor_solicitado)
            Me.columnIDActivity = New Global.System.Data.DataColumn("IDActivity", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDActivity)
            Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStatus)
            Me.columnInicioEtapa = New Global.System.Data.DataColumn("InicioEtapa", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInicioEtapa)
            Me.columnCierreEtapa = New Global.System.Data.DataColumn("CierreEtapa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCierreEtapa)
            Me.columnAsingadoa = New Global.System.Data.DataColumn("Asingadoa", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAsingadoa)
            Me.columnFormulario.AllowDBNull = false
            Me.columnFormularioInstancia.AllowDBNull = false
            Me.columnIdProceso.AllowDBNull = false
            Me.columnNúmero_de_identificación.AllowDBNull = false
            Me.columnNúmero_de_identificación.MaxLength = 1
            Me.columnNombre_del_cliente.AllowDBNull = false
            Me.columnNombre_del_cliente.MaxLength = 1
            Me.columnCanal.ReadOnly = true
            Me.columnCanal.MaxLength = 16
            Me.columnNombre_del_Gestor.AllowDBNull = false
            Me.columnNombre_del_Gestor.MaxLength = 1
            Me.columnTipo_de_producto.AllowDBNull = false
            Me.columnTipo_de_producto.MaxLength = 1
            Me.columnTipo_de_subproducto.AllowDBNull = false
            Me.columnTipo_de_subproducto.MaxLength = 1
            Me.columnTipo_de_cliente.AllowDBNull = false
            Me.columnTipo_de_cliente.MaxLength = 1
            Me.columnValor_solicitado.AllowDBNull = false
            Me.columnValor_solicitado.MaxLength = 1
            Me.columnIDActivity.AllowDBNull = false
            Me.columnInicioEtapa.ReadOnly = true
            Me.columnCierreEtapa.ReadOnly = true
            Me.columnCierreEtapa.MaxLength = 30
            Me.columnAsingadoa.ReadOnly = true
            Me.columnAsingadoa.MaxLength = 30
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtRptBBVARow() As dtRptBBVARow
            Return CType(Me.NewRow,dtRptBBVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtRptBBVARow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtRptBBVARow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtRptBBVARowChangedEvent) Is Nothing) Then
                RaiseEvent dtRptBBVARowChanged(Me, New dtRptBBVARowChangeEvent(CType(e.Row,dtRptBBVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtRptBBVARowChangingEvent) Is Nothing) Then
                RaiseEvent dtRptBBVARowChanging(Me, New dtRptBBVARowChangeEvent(CType(e.Row,dtRptBBVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtRptBBVARowDeletedEvent) Is Nothing) Then
                RaiseEvent dtRptBBVARowDeleted(Me, New dtRptBBVARowChangeEvent(CType(e.Row,dtRptBBVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtRptBBVARowDeletingEvent) Is Nothing) Then
                RaiseEvent dtRptBBVARowDeleting(Me, New dtRptBBVARowChangeEvent(CType(e.Row,dtRptBBVARow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtRptBBVARow(ByVal row As dtRptBBVARow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsReportBBVA = New dsReportBBVA
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtRptBBVADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtRptBBVARow
        Inherits Global.System.Data.DataRow
        
        Private tabledtRptBBVA As dtRptBBVADataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtRptBBVA = CType(Me.Table,dtRptBBVADataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formulario() As Integer
            Get
                Return CType(Me(Me.tabledtRptBBVA.FormularioColumn),Integer)
            End Get
            Set
                Me(Me.tabledtRptBBVA.FormularioColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormularioInstancia() As Integer
            Get
                Return CType(Me(Me.tabledtRptBBVA.FormularioInstanciaColumn),Integer)
            End Get
            Set
                Me(Me.tabledtRptBBVA.FormularioInstanciaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRptBBVA.StartTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'StartTime' de la tabla 'dtRptBBVA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRptBBVA.StartTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdProceso() As Integer
            Get
                Return CType(Me(Me.tabledtRptBBVA.IdProcesoColumn),Integer)
            End Get
            Set
                Me(Me.tabledtRptBBVA.IdProcesoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Número_de_identificación() As String
            Get
                Return CType(Me(Me.tabledtRptBBVA.Número_de_identificaciónColumn),String)
            End Get
            Set
                Me(Me.tabledtRptBBVA.Número_de_identificaciónColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_del_cliente() As String
            Get
                Return CType(Me(Me.tabledtRptBBVA.Nombre_del_clienteColumn),String)
            End Get
            Set
                Me(Me.tabledtRptBBVA.Nombre_del_clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Canal() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRptBBVA.CanalColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Canal' de la tabla 'dtRptBBVA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRptBBVA.CanalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nombre_del_Gestor() As String
            Get
                Return CType(Me(Me.tabledtRptBBVA.Nombre_del_GestorColumn),String)
            End Get
            Set
                Me(Me.tabledtRptBBVA.Nombre_del_GestorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_de_producto() As String
            Get
                Return CType(Me(Me.tabledtRptBBVA.Tipo_de_productoColumn),String)
            End Get
            Set
                Me(Me.tabledtRptBBVA.Tipo_de_productoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_de_subproducto() As String
            Get
                Return CType(Me(Me.tabledtRptBBVA.Tipo_de_subproductoColumn),String)
            End Get
            Set
                Me(Me.tabledtRptBBVA.Tipo_de_subproductoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Tipo_de_cliente() As String
            Get
                Return CType(Me(Me.tabledtRptBBVA.Tipo_de_clienteColumn),String)
            End Get
            Set
                Me(Me.tabledtRptBBVA.Tipo_de_clienteColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Valor_solicitado() As String
            Get
                Return CType(Me(Me.tabledtRptBBVA.Valor_solicitadoColumn),String)
            End Get
            Set
                Me(Me.tabledtRptBBVA.Valor_solicitadoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDActivity() As Integer
            Get
                Return CType(Me(Me.tabledtRptBBVA.IDActivityColumn),Integer)
            End Get
            Set
                Me(Me.tabledtRptBBVA.IDActivityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Status() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtRptBBVA.StatusColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Status' de la tabla 'dtRptBBVA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRptBBVA.StatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InicioEtapa() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtRptBBVA.InicioEtapaColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InicioEtapa' de la tabla 'dtRptBBVA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRptBBVA.InicioEtapaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CierreEtapa() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRptBBVA.CierreEtapaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CierreEtapa' de la tabla 'dtRptBBVA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRptBBVA.CierreEtapaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Asingadoa() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtRptBBVA.AsingadoaColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Asingadoa' de la tabla 'dtRptBBVA' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtRptBBVA.AsingadoaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartTimeNull() As Boolean
            Return Me.IsNull(Me.tabledtRptBBVA.StartTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartTimeNull()
            Me(Me.tabledtRptBBVA.StartTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCanalNull() As Boolean
            Return Me.IsNull(Me.tabledtRptBBVA.CanalColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCanalNull()
            Me(Me.tabledtRptBBVA.CanalColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStatusNull() As Boolean
            Return Me.IsNull(Me.tabledtRptBBVA.StatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStatusNull()
            Me(Me.tabledtRptBBVA.StatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInicioEtapaNull() As Boolean
            Return Me.IsNull(Me.tabledtRptBBVA.InicioEtapaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInicioEtapaNull()
            Me(Me.tabledtRptBBVA.InicioEtapaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCierreEtapaNull() As Boolean
            Return Me.IsNull(Me.tabledtRptBBVA.CierreEtapaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCierreEtapaNull()
            Me(Me.tabledtRptBBVA.CierreEtapaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAsingadoaNull() As Boolean
            Return Me.IsNull(Me.tabledtRptBBVA.AsingadoaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAsingadoaNull()
            Me(Me.tabledtRptBBVA.AsingadoaColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtRptBBVARowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtRptBBVARow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtRptBBVARow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtRptBBVARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
