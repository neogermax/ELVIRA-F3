'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("dsIndicator"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class dsIndicator
    Inherits Global.System.Data.DataSet
    
    Private tablevIndicatorInventory As vIndicatorInventoryDataTable
    
    Private tableMeasurementDateByIndicator As MeasurementDateByIndicatorDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("vIndicatorInventory")) Is Nothing) Then
                MyBase.Tables.Add(New vIndicatorInventoryDataTable(ds.Tables("vIndicatorInventory")))
            End If
            If (Not (ds.Tables("MeasurementDateByIndicator")) Is Nothing) Then
                MyBase.Tables.Add(New MeasurementDateByIndicatorDataTable(ds.Tables("MeasurementDateByIndicator")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property vIndicatorInventory() As vIndicatorInventoryDataTable
        Get
            Return Me.tablevIndicatorInventory
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property MeasurementDateByIndicator() As MeasurementDateByIndicatorDataTable
        Get
            Return Me.tableMeasurementDateByIndicator
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As dsIndicator = CType(MyBase.Clone,dsIndicator)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("vIndicatorInventory")) Is Nothing) Then
                MyBase.Tables.Add(New vIndicatorInventoryDataTable(ds.Tables("vIndicatorInventory")))
            End If
            If (Not (ds.Tables("MeasurementDateByIndicator")) Is Nothing) Then
                MyBase.Tables.Add(New MeasurementDateByIndicatorDataTable(ds.Tables("MeasurementDateByIndicator")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tablevIndicatorInventory = CType(MyBase.Tables("vIndicatorInventory"),vIndicatorInventoryDataTable)
        If (initTable = true) Then
            If (Not (Me.tablevIndicatorInventory) Is Nothing) Then
                Me.tablevIndicatorInventory.InitVars
            End If
        End If
        Me.tableMeasurementDateByIndicator = CType(MyBase.Tables("MeasurementDateByIndicator"),MeasurementDateByIndicatorDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMeasurementDateByIndicator) Is Nothing) Then
                Me.tableMeasurementDateByIndicator.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "dsIndicator"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/dsIndicator.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tablevIndicatorInventory = New vIndicatorInventoryDataTable
        MyBase.Tables.Add(Me.tablevIndicatorInventory)
        Me.tableMeasurementDateByIndicator = New MeasurementDateByIndicatorDataTable
        MyBase.Tables.Add(Me.tableMeasurementDateByIndicator)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializevIndicatorInventory() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeMeasurementDateByIndicator() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As dsIndicator = New dsIndicator
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub vIndicatorInventoryRowChangeEventHandler(ByVal sender As Object, ByVal e As vIndicatorInventoryRowChangeEvent)
    
    Public Delegate Sub MeasurementDateByIndicatorRowChangeEventHandler(ByVal sender As Object, ByVal e As MeasurementDateByIndicatorRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class vIndicatorInventoryDataTable
        Inherits Global.System.Data.TypedTableBase(Of vIndicatorInventoryRow)
        
        Private columnId As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnGoal As Global.System.Data.DataColumn
        
        Private columnGreenValue As Global.System.Data.DataColumn
        
        Private columnYellowValue As Global.System.Data.DataColumn
        
        Private columnRedValue As Global.System.Data.DataColumn
        
        Private columnmeasurementDate As Global.System.Data.DataColumn
        
        Private columnIndicatorType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "vIndicatorInventory"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GoalColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGoal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property GreenValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnGreenValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property YellowValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnYellowValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RedValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRedValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property measurementDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IndicatorTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIndicatorType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As vIndicatorInventoryRow
            Get
                Return CType(Me.Rows(index),vIndicatorInventoryRow)
            End Get
        End Property
        
        Public Event vIndicatorInventoryRowChanging As vIndicatorInventoryRowChangeEventHandler
        
        Public Event vIndicatorInventoryRowChanged As vIndicatorInventoryRowChangeEventHandler
        
        Public Event vIndicatorInventoryRowDeleting As vIndicatorInventoryRowChangeEventHandler
        
        Public Event vIndicatorInventoryRowDeleted As vIndicatorInventoryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddvIndicatorInventoryRow(ByVal row As vIndicatorInventoryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddvIndicatorInventoryRow(ByVal Id As Integer, ByVal Name As String, ByVal Description As String, ByVal Goal As Integer, ByVal GreenValue As Integer, ByVal YellowValue As Integer, ByVal RedValue As Integer, ByVal measurementDate As Date, ByVal IndicatorType As String) As vIndicatorInventoryRow
            Dim rowvIndicatorInventoryRow As vIndicatorInventoryRow = CType(Me.NewRow,vIndicatorInventoryRow)
            Dim columnValuesArray() As Object = New Object() {Id, Name, Description, Goal, GreenValue, YellowValue, RedValue, measurementDate, IndicatorType}
            rowvIndicatorInventoryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowvIndicatorInventoryRow)
            Return rowvIndicatorInventoryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As vIndicatorInventoryDataTable = CType(MyBase.Clone,vIndicatorInventoryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New vIndicatorInventoryDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnId = MyBase.Columns("Id")
            Me.columnName = MyBase.Columns("Name")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnGoal = MyBase.Columns("Goal")
            Me.columnGreenValue = MyBase.Columns("GreenValue")
            Me.columnYellowValue = MyBase.Columns("YellowValue")
            Me.columnRedValue = MyBase.Columns("RedValue")
            Me.columnmeasurementDate = MyBase.Columns("measurementDate")
            Me.columnIndicatorType = MyBase.Columns("IndicatorType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnId = New Global.System.Data.DataColumn("Id", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnId)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnGoal = New Global.System.Data.DataColumn("Goal", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGoal)
            Me.columnGreenValue = New Global.System.Data.DataColumn("GreenValue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnGreenValue)
            Me.columnYellowValue = New Global.System.Data.DataColumn("YellowValue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnYellowValue)
            Me.columnRedValue = New Global.System.Data.DataColumn("RedValue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRedValue)
            Me.columnmeasurementDate = New Global.System.Data.DataColumn("measurementDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementDate)
            Me.columnIndicatorType = New Global.System.Data.DataColumn("IndicatorType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIndicatorType)
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 255
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 255
            Me.columnGoal.AllowDBNull = false
            Me.columnGreenValue.AllowDBNull = false
            Me.columnYellowValue.AllowDBNull = false
            Me.columnRedValue.AllowDBNull = false
            Me.columnmeasurementDate.AllowDBNull = false
            Me.columnIndicatorType.ReadOnly = true
            Me.columnIndicatorType.MaxLength = 35
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewvIndicatorInventoryRow() As vIndicatorInventoryRow
            Return CType(Me.NewRow,vIndicatorInventoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New vIndicatorInventoryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(vIndicatorInventoryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.vIndicatorInventoryRowChangedEvent) Is Nothing) Then
                RaiseEvent vIndicatorInventoryRowChanged(Me, New vIndicatorInventoryRowChangeEvent(CType(e.Row,vIndicatorInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.vIndicatorInventoryRowChangingEvent) Is Nothing) Then
                RaiseEvent vIndicatorInventoryRowChanging(Me, New vIndicatorInventoryRowChangeEvent(CType(e.Row,vIndicatorInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.vIndicatorInventoryRowDeletedEvent) Is Nothing) Then
                RaiseEvent vIndicatorInventoryRowDeleted(Me, New vIndicatorInventoryRowChangeEvent(CType(e.Row,vIndicatorInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.vIndicatorInventoryRowDeletingEvent) Is Nothing) Then
                RaiseEvent vIndicatorInventoryRowDeleting(Me, New vIndicatorInventoryRowChangeEvent(CType(e.Row,vIndicatorInventoryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovevIndicatorInventoryRow(ByVal row As vIndicatorInventoryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIndicator = New dsIndicator
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "vIndicatorInventoryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class MeasurementDateByIndicatorDataTable
        Inherits Global.System.Data.TypedTableBase(Of MeasurementDateByIndicatorRow)
        
        Private columnmeasurementDate As Global.System.Data.DataColumn
        
        Private columnIdIndicator As Global.System.Data.DataColumn
        
        Private columnmeasure As Global.System.Data.DataColumn
        
        Private columnmeasuretype As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "MeasurementDateByIndicator"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property measurementDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasurementDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdIndicatorColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdIndicator
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property measureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasure
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property measuretypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmeasuretype
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As MeasurementDateByIndicatorRow
            Get
                Return CType(Me.Rows(index),MeasurementDateByIndicatorRow)
            End Get
        End Property
        
        Public Event MeasurementDateByIndicatorRowChanging As MeasurementDateByIndicatorRowChangeEventHandler
        
        Public Event MeasurementDateByIndicatorRowChanged As MeasurementDateByIndicatorRowChangeEventHandler
        
        Public Event MeasurementDateByIndicatorRowDeleting As MeasurementDateByIndicatorRowChangeEventHandler
        
        Public Event MeasurementDateByIndicatorRowDeleted As MeasurementDateByIndicatorRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddMeasurementDateByIndicatorRow(ByVal row As MeasurementDateByIndicatorRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddMeasurementDateByIndicatorRow(ByVal measurementDate As Date, ByVal IdIndicator As Integer, ByVal measure As String, ByVal measuretype As String) As MeasurementDateByIndicatorRow
            Dim rowMeasurementDateByIndicatorRow As MeasurementDateByIndicatorRow = CType(Me.NewRow,MeasurementDateByIndicatorRow)
            Dim columnValuesArray() As Object = New Object() {measurementDate, IdIndicator, measure, measuretype}
            rowMeasurementDateByIndicatorRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowMeasurementDateByIndicatorRow)
            Return rowMeasurementDateByIndicatorRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As MeasurementDateByIndicatorDataTable = CType(MyBase.Clone,MeasurementDateByIndicatorDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New MeasurementDateByIndicatorDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnmeasurementDate = MyBase.Columns("measurementDate")
            Me.columnIdIndicator = MyBase.Columns("IdIndicator")
            Me.columnmeasure = MyBase.Columns("measure")
            Me.columnmeasuretype = MyBase.Columns("measuretype")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnmeasurementDate = New Global.System.Data.DataColumn("measurementDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasurementDate)
            Me.columnIdIndicator = New Global.System.Data.DataColumn("IdIndicator", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdIndicator)
            Me.columnmeasure = New Global.System.Data.DataColumn("measure", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasure)
            Me.columnmeasuretype = New Global.System.Data.DataColumn("measuretype", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmeasuretype)
            Me.columnmeasurementDate.AllowDBNull = false
            Me.columnIdIndicator.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewMeasurementDateByIndicatorRow() As MeasurementDateByIndicatorRow
            Return CType(Me.NewRow,MeasurementDateByIndicatorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New MeasurementDateByIndicatorRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(MeasurementDateByIndicatorRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MeasurementDateByIndicatorRowChangedEvent) Is Nothing) Then
                RaiseEvent MeasurementDateByIndicatorRowChanged(Me, New MeasurementDateByIndicatorRowChangeEvent(CType(e.Row,MeasurementDateByIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MeasurementDateByIndicatorRowChangingEvent) Is Nothing) Then
                RaiseEvent MeasurementDateByIndicatorRowChanging(Me, New MeasurementDateByIndicatorRowChangeEvent(CType(e.Row,MeasurementDateByIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MeasurementDateByIndicatorRowDeletedEvent) Is Nothing) Then
                RaiseEvent MeasurementDateByIndicatorRowDeleted(Me, New MeasurementDateByIndicatorRowChangeEvent(CType(e.Row,MeasurementDateByIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MeasurementDateByIndicatorRowDeletingEvent) Is Nothing) Then
                RaiseEvent MeasurementDateByIndicatorRowDeleting(Me, New MeasurementDateByIndicatorRowChangeEvent(CType(e.Row,MeasurementDateByIndicatorRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveMeasurementDateByIndicatorRow(ByVal row As MeasurementDateByIndicatorRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As dsIndicator = New dsIndicator
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MeasurementDateByIndicatorDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class vIndicatorInventoryRow
        Inherits Global.System.Data.DataRow
        
        Private tablevIndicatorInventory As vIndicatorInventoryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablevIndicatorInventory = CType(Me.Table,vIndicatorInventoryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablevIndicatorInventory.IdColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Id' de la tabla 'vIndicatorInventory' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablevIndicatorInventory.IdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tablevIndicatorInventory.NameColumn),String)
            End Get
            Set
                Me(Me.tablevIndicatorInventory.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tablevIndicatorInventory.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tablevIndicatorInventory.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Goal() As Integer
            Get
                Return CType(Me(Me.tablevIndicatorInventory.GoalColumn),Integer)
            End Get
            Set
                Me(Me.tablevIndicatorInventory.GoalColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property GreenValue() As Integer
            Get
                Return CType(Me(Me.tablevIndicatorInventory.GreenValueColumn),Integer)
            End Get
            Set
                Me(Me.tablevIndicatorInventory.GreenValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property YellowValue() As Integer
            Get
                Return CType(Me(Me.tablevIndicatorInventory.YellowValueColumn),Integer)
            End Get
            Set
                Me(Me.tablevIndicatorInventory.YellowValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RedValue() As Integer
            Get
                Return CType(Me(Me.tablevIndicatorInventory.RedValueColumn),Integer)
            End Get
            Set
                Me(Me.tablevIndicatorInventory.RedValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property measurementDate() As Date
            Get
                Return CType(Me(Me.tablevIndicatorInventory.measurementDateColumn),Date)
            End Get
            Set
                Me(Me.tablevIndicatorInventory.measurementDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IndicatorType() As String
            Get
                Try 
                    Return CType(Me(Me.tablevIndicatorInventory.IndicatorTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'IndicatorType' de la tabla 'vIndicatorInventory' es DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablevIndicatorInventory.IndicatorTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdNull() As Boolean
            Return Me.IsNull(Me.tablevIndicatorInventory.IdColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdNull()
            Me(Me.tablevIndicatorInventory.IdColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIndicatorTypeNull() As Boolean
            Return Me.IsNull(Me.tablevIndicatorInventory.IndicatorTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIndicatorTypeNull()
            Me(Me.tablevIndicatorInventory.IndicatorTypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MeasurementDateByIndicatorRow
        Inherits Global.System.Data.DataRow
        
        Private tableMeasurementDateByIndicator As MeasurementDateByIndicatorDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMeasurementDateByIndicator = CType(Me.Table,MeasurementDateByIndicatorDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property measurementDate() As Date
            Get
                Return CType(Me(Me.tableMeasurementDateByIndicator.measurementDateColumn),Date)
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.measurementDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdIndicator() As Integer
            Get
                Return CType(Me(Me.tableMeasurementDateByIndicator.IdIndicatorColumn),Integer)
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.IdIndicatorColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property measure() As String
            Get
                Try 
                    Return CType(Me(Me.tableMeasurementDateByIndicator.measureColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'measure' de la tabla 'MeasurementDateByIndicator' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.measureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property measuretype() As String
            Get
                Try 
                    Return CType(Me(Me.tableMeasurementDateByIndicator.measuretypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'measuretype' de la tabla 'MeasurementDateByIndicator' es "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMeasurementDateByIndicator.measuretypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeasureNull() As Boolean
            Return Me.IsNull(Me.tableMeasurementDateByIndicator.measureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeasureNull()
            Me(Me.tableMeasurementDateByIndicator.measureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsmeasuretypeNull() As Boolean
            Return Me.IsNull(Me.tableMeasurementDateByIndicator.measuretypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetmeasuretypeNull()
            Me(Me.tableMeasurementDateByIndicator.measuretypeColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class vIndicatorInventoryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As vIndicatorInventoryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As vIndicatorInventoryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As vIndicatorInventoryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MeasurementDateByIndicatorRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As MeasurementDateByIndicatorRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MeasurementDateByIndicatorRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MeasurementDateByIndicatorRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
