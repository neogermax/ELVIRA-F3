'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ResearchAndDevelopment"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ResearchAndDevelopment
    Inherits Global.System.Data.DataSet
    
    Private tabledtReportDocuments As dtReportDocumentsDataTable
    
    Private tabledtReportGoodpractice As dtReportGoodpracticeDataTable
    
    Private tabledtReportStatistics As dtReportStatisticsDataTable
    
    Private tabledtReportInquest As dtReportInquestDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("dtReportDocuments")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportDocumentsDataTable(ds.Tables("dtReportDocuments")))
            End If
            If (Not (ds.Tables("dtReportGoodPractice")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportGoodpracticeDataTable(ds.Tables("dtReportGoodPractice")))
            End If
            If (Not (ds.Tables("dtReportStatistics")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportStatisticsDataTable(ds.Tables("dtReportStatistics")))
            End If
            If (Not (ds.Tables("dtReportInquest")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportInquestDataTable(ds.Tables("dtReportInquest")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportDocuments() As dtReportDocumentsDataTable
        Get
            Return Me.tabledtReportDocuments
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportGoodpractice() As dtReportGoodpracticeDataTable
        Get
            Return Me.tabledtReportGoodpractice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportStatistics() As dtReportStatisticsDataTable
        Get
            Return Me.tabledtReportStatistics
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property dtReportInquest() As dtReportInquestDataTable
        Get
            Return Me.tabledtReportInquest
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ResearchAndDevelopment = CType(MyBase.Clone,ResearchAndDevelopment)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("dtReportDocuments")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportDocumentsDataTable(ds.Tables("dtReportDocuments")))
            End If
            If (Not (ds.Tables("dtReportGoodPractice")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportGoodpracticeDataTable(ds.Tables("dtReportGoodPractice")))
            End If
            If (Not (ds.Tables("dtReportStatistics")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportStatisticsDataTable(ds.Tables("dtReportStatistics")))
            End If
            If (Not (ds.Tables("dtReportInquest")) Is Nothing) Then
                MyBase.Tables.Add(New dtReportInquestDataTable(ds.Tables("dtReportInquest")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabledtReportDocuments = CType(MyBase.Tables("dtReportDocuments"),dtReportDocumentsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportDocuments) Is Nothing) Then
                Me.tabledtReportDocuments.InitVars
            End If
        End If
        Me.tabledtReportGoodpractice = CType(MyBase.Tables("dtReportGoodPractice"),dtReportGoodpracticeDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportGoodpractice) Is Nothing) Then
                Me.tabledtReportGoodpractice.InitVars
            End If
        End If
        Me.tabledtReportStatistics = CType(MyBase.Tables("dtReportStatistics"),dtReportStatisticsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportStatistics) Is Nothing) Then
                Me.tabledtReportStatistics.InitVars
            End If
        End If
        Me.tabledtReportInquest = CType(MyBase.Tables("dtReportInquest"),dtReportInquestDataTable)
        If (initTable = true) Then
            If (Not (Me.tabledtReportInquest) Is Nothing) Then
                Me.tabledtReportInquest.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ResearchAndDevelopment"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/ResearchAndDevelopment.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabledtReportDocuments = New dtReportDocumentsDataTable
        MyBase.Tables.Add(Me.tabledtReportDocuments)
        Me.tabledtReportGoodpractice = New dtReportGoodpracticeDataTable
        MyBase.Tables.Add(Me.tabledtReportGoodpractice)
        Me.tabledtReportStatistics = New dtReportStatisticsDataTable
        MyBase.Tables.Add(Me.tabledtReportStatistics)
        Me.tabledtReportInquest = New dtReportInquestDataTable
        MyBase.Tables.Add(Me.tabledtReportInquest)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportDocuments() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportGoodpractice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportStatistics() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializedtReportInquest() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ResearchAndDevelopment = New ResearchAndDevelopment
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub dtReportDocumentsRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportDocumentsRowChangeEvent)
    
    Public Delegate Sub dtReportGoodpracticeRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportGoodpracticeRowChangeEvent)
    
    Public Delegate Sub dtReportStatisticsRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportStatisticsRowChangeEvent)
    
    Public Delegate Sub dtReportInquestRowChangeEventHandler(ByVal sender As Object, ByVal e As dtReportInquestRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportDocumentsDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtReportDocumentsRow)
        
        Private columnProject As Global.System.Data.DataColumn
        
        Private columnTitle As Global.System.Data.DataColumn
        
        Private columnEntityName As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnUserName As Global.System.Data.DataColumn
        
        Private columnCreateDate As Global.System.Data.DataColumn
        
        Private columnVisibilityLevel As Global.System.Data.DataColumn
        
        Private columnAttachFile As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportDocuments"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TitleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTitle
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UserNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUserName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreateDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreateDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property VisibilityLevelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnVisibilityLevel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttachFileColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttachFile
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportDocumentsRow
            Get
                Return CType(Me.Rows(index),dtReportDocumentsRow)
            End Get
        End Property
        
        Public Event dtReportDocumentsRowChanging As dtReportDocumentsRowChangeEventHandler
        
        Public Event dtReportDocumentsRowChanged As dtReportDocumentsRowChangeEventHandler
        
        Public Event dtReportDocumentsRowDeleting As dtReportDocumentsRowChangeEventHandler
        
        Public Event dtReportDocumentsRowDeleted As dtReportDocumentsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportDocumentsRow(ByVal row As dtReportDocumentsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportDocumentsRow(ByVal Project As String, ByVal Title As String, ByVal EntityName As String, ByVal Description As String, ByVal UserName As String, ByVal CreateDate As Date, ByVal VisibilityLevel As String, ByVal AttachFile As String) As dtReportDocumentsRow
            Dim rowdtReportDocumentsRow As dtReportDocumentsRow = CType(Me.NewRow,dtReportDocumentsRow)
            Dim columnValuesArray() As Object = New Object() {Project, Title, EntityName, Description, UserName, CreateDate, VisibilityLevel, AttachFile}
            rowdtReportDocumentsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportDocumentsRow)
            Return rowdtReportDocumentsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportDocumentsDataTable = CType(MyBase.Clone,dtReportDocumentsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportDocumentsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject = MyBase.Columns("Project")
            Me.columnTitle = MyBase.Columns("Title")
            Me.columnEntityName = MyBase.Columns("EntityName")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnUserName = MyBase.Columns("UserName")
            Me.columnCreateDate = MyBase.Columns("CreateDate")
            Me.columnVisibilityLevel = MyBase.Columns("VisibilityLevel")
            Me.columnAttachFile = MyBase.Columns("AttachFile")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
            Me.columnTitle = New Global.System.Data.DataColumn("Title", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTitle)
            Me.columnEntityName = New Global.System.Data.DataColumn("EntityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntityName)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnUserName = New Global.System.Data.DataColumn("UserName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUserName)
            Me.columnCreateDate = New Global.System.Data.DataColumn("CreateDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreateDate)
            Me.columnVisibilityLevel = New Global.System.Data.DataColumn("VisibilityLevel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisibilityLevel)
            Me.columnAttachFile = New Global.System.Data.DataColumn("AttachFile", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttachFile)
            Me.columnProject.MaxLength = 255
            Me.columnTitle.MaxLength = 255
            Me.columnEntityName.MaxLength = 255
            Me.columnDescription.MaxLength = 255
            Me.columnUserName.AllowDBNull = false
            Me.columnUserName.MaxLength = 140
            Me.columnVisibilityLevel.AllowDBNull = false
            Me.columnVisibilityLevel.MaxLength = 50
            Me.columnAttachFile.MaxLength = 200
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportDocumentsRow() As dtReportDocumentsRow
            Return CType(Me.NewRow,dtReportDocumentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportDocumentsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportDocumentsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportDocumentsRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportDocumentsRowChanged(Me, New dtReportDocumentsRowChangeEvent(CType(e.Row,dtReportDocumentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportDocumentsRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportDocumentsRowChanging(Me, New dtReportDocumentsRowChangeEvent(CType(e.Row,dtReportDocumentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportDocumentsRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportDocumentsRowDeleted(Me, New dtReportDocumentsRowChangeEvent(CType(e.Row,dtReportDocumentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportDocumentsRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportDocumentsRowDeleting(Me, New dtReportDocumentsRowChangeEvent(CType(e.Row,dtReportDocumentsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportDocumentsRow(ByVal row As dtReportDocumentsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ResearchAndDevelopment = New ResearchAndDevelopment
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportDocumentsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportGoodpracticeDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtReportGoodpracticeRow)
        
        Private columnProject As Global.System.Data.DataColumn
        
        Private columnStrategicLine As Global.System.Data.DataColumn
        
        Private columnObjective As Global.System.Data.DataColumn
        
        Private columnDepto As Global.System.Data.DataColumn
        
        Private columnCity As Global.System.Data.DataColumn
        
        Private columnBeginDate As Global.System.Data.DataColumn
        
        Private columnClosingDate As Global.System.Data.DataColumn
        
        Private columnTotalCost As Global.System.Data.DataColumn
        
        Private columnFSCContribution As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportGoodPractice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StrategicLineColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStrategicLine
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ObjectiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnObjective
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeptoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDepto
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCity
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BeginDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBeginDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClosingDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClosingDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TotalCostColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTotalCost
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FSCContributionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFSCContribution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportGoodpracticeRow
            Get
                Return CType(Me.Rows(index),dtReportGoodpracticeRow)
            End Get
        End Property
        
        Public Event dtReportGoodpracticeRowChanging As dtReportGoodpracticeRowChangeEventHandler
        
        Public Event dtReportGoodpracticeRowChanged As dtReportGoodpracticeRowChangeEventHandler
        
        Public Event dtReportGoodpracticeRowDeleting As dtReportGoodpracticeRowChangeEventHandler
        
        Public Event dtReportGoodpracticeRowDeleted As dtReportGoodpracticeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportGoodpracticeRow(ByVal row As dtReportGoodpracticeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportGoodpracticeRow(ByVal Project As String, ByVal StrategicLine As String, ByVal Objective As String, ByVal Depto As String, ByVal City As String, ByVal BeginDate As Date, ByVal ClosingDate As Date, ByVal TotalCost As Decimal, ByVal FSCContribution As Decimal) As dtReportGoodpracticeRow
            Dim rowdtReportGoodpracticeRow As dtReportGoodpracticeRow = CType(Me.NewRow,dtReportGoodpracticeRow)
            Dim columnValuesArray() As Object = New Object() {Project, StrategicLine, Objective, Depto, City, BeginDate, ClosingDate, TotalCost, FSCContribution}
            rowdtReportGoodpracticeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportGoodpracticeRow)
            Return rowdtReportGoodpracticeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportGoodpracticeDataTable = CType(MyBase.Clone,dtReportGoodpracticeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportGoodpracticeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnProject = MyBase.Columns("Project")
            Me.columnStrategicLine = MyBase.Columns("StrategicLine")
            Me.columnObjective = MyBase.Columns("Objective")
            Me.columnDepto = MyBase.Columns("Depto")
            Me.columnCity = MyBase.Columns("City")
            Me.columnBeginDate = MyBase.Columns("BeginDate")
            Me.columnClosingDate = MyBase.Columns("ClosingDate")
            Me.columnTotalCost = MyBase.Columns("TotalCost")
            Me.columnFSCContribution = MyBase.Columns("FSCContribution")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnProject = New Global.System.Data.DataColumn("Project", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProject)
            Me.columnStrategicLine = New Global.System.Data.DataColumn("StrategicLine", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStrategicLine)
            Me.columnObjective = New Global.System.Data.DataColumn("Objective", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjective)
            Me.columnDepto = New Global.System.Data.DataColumn("Depto", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDepto)
            Me.columnCity = New Global.System.Data.DataColumn("City", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCity)
            Me.columnBeginDate = New Global.System.Data.DataColumn("BeginDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBeginDate)
            Me.columnClosingDate = New Global.System.Data.DataColumn("ClosingDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClosingDate)
            Me.columnTotalCost = New Global.System.Data.DataColumn("TotalCost", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTotalCost)
            Me.columnFSCContribution = New Global.System.Data.DataColumn("FSCContribution", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFSCContribution)
            Me.columnProject.AllowDBNull = false
            Me.columnProject.MaxLength = 255
            Me.columnStrategicLine.AllowDBNull = false
            Me.columnStrategicLine.MaxLength = 255
            Me.columnObjective.MaxLength = 800
            Me.columnDepto.AllowDBNull = false
            Me.columnDepto.MaxLength = 15
            Me.columnCity.AllowDBNull = false
            Me.columnCity.MaxLength = 50
            Me.ExtendedProperties.Add("Generator_RowClassName", "dtReportGoodpracticeRow")
            Me.ExtendedProperties.Add("Generator_RowEvArgName", "dtReportGoodpracticeRowChangeEvent")
            Me.ExtendedProperties.Add("Generator_RowEvHandlerName", "dtReportGoodpracticeRowChangeEventHandler")
            Me.ExtendedProperties.Add("Generator_TableClassName", "dtReportGoodpracticeDataTable")
            Me.ExtendedProperties.Add("Generator_TablePropName", "dtReportGoodpractice")
            Me.ExtendedProperties.Add("Generator_TableVarName", "tabledtReportGoodpractice")
            Me.ExtendedProperties.Add("Generator_UserTableName", "dtReportGoodPractice")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportGoodpracticeRow() As dtReportGoodpracticeRow
            Return CType(Me.NewRow,dtReportGoodpracticeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportGoodpracticeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportGoodpracticeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportGoodpracticeRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportGoodpracticeRowChanged(Me, New dtReportGoodpracticeRowChangeEvent(CType(e.Row,dtReportGoodpracticeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportGoodpracticeRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportGoodpracticeRowChanging(Me, New dtReportGoodpracticeRowChangeEvent(CType(e.Row,dtReportGoodpracticeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportGoodpracticeRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportGoodpracticeRowDeleted(Me, New dtReportGoodpracticeRowChangeEvent(CType(e.Row,dtReportGoodpracticeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportGoodpracticeRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportGoodpracticeRowDeleting(Me, New dtReportGoodpracticeRowChangeEvent(CType(e.Row,dtReportGoodpracticeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportGoodpracticeRow(ByVal row As dtReportGoodpracticeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ResearchAndDevelopment = New ResearchAndDevelopment
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportGoodpracticeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportStatisticsDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtReportStatisticsRow)
        
        Private columnIdea As Global.System.Data.DataColumn
        
        Private columnApprovalIdea As Global.System.Data.DataColumn
        
        Private columnApprovalProject As Global.System.Data.DataColumn
        
        Private columnFormulation As Global.System.Data.DataColumn
        
        Private columnPlaneation As Global.System.Data.DataColumn
        
        Private columnExecution As Global.System.Data.DataColumn
        
        Private columnEvaluation As Global.System.Data.DataColumn
        
        Private columnClosing As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportStatistics"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApprovalIdeaColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApprovalIdea
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ApprovalProjectColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnApprovalProject
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormulationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormulation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PlaneationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPlaneation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ExecutionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnExecution
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EvaluationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEvaluation
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClosingColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClosing
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportStatisticsRow
            Get
                Return CType(Me.Rows(index),dtReportStatisticsRow)
            End Get
        End Property
        
        Public Event dtReportStatisticsRowChanging As dtReportStatisticsRowChangeEventHandler
        
        Public Event dtReportStatisticsRowChanged As dtReportStatisticsRowChangeEventHandler
        
        Public Event dtReportStatisticsRowDeleting As dtReportStatisticsRowChangeEventHandler
        
        Public Event dtReportStatisticsRowDeleted As dtReportStatisticsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportStatisticsRow(ByVal row As dtReportStatisticsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportStatisticsRow(ByVal Idea As Integer, ByVal ApprovalIdea As Integer, ByVal ApprovalProject As Integer, ByVal Formulation As Integer, ByVal Planeation As Integer, ByVal Execution As Integer, ByVal Evaluation As Integer, ByVal Closing As Integer) As dtReportStatisticsRow
            Dim rowdtReportStatisticsRow As dtReportStatisticsRow = CType(Me.NewRow,dtReportStatisticsRow)
            Dim columnValuesArray() As Object = New Object() {Idea, ApprovalIdea, ApprovalProject, Formulation, Planeation, Execution, Evaluation, Closing}
            rowdtReportStatisticsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportStatisticsRow)
            Return rowdtReportStatisticsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportStatisticsDataTable = CType(MyBase.Clone,dtReportStatisticsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportStatisticsDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnIdea = MyBase.Columns("Idea")
            Me.columnApprovalIdea = MyBase.Columns("ApprovalIdea")
            Me.columnApprovalProject = MyBase.Columns("ApprovalProject")
            Me.columnFormulation = MyBase.Columns("Formulation")
            Me.columnPlaneation = MyBase.Columns("Planeation")
            Me.columnExecution = MyBase.Columns("Execution")
            Me.columnEvaluation = MyBase.Columns("Evaluation")
            Me.columnClosing = MyBase.Columns("Closing")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnIdea = New Global.System.Data.DataColumn("Idea", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdea)
            Me.columnApprovalIdea = New Global.System.Data.DataColumn("ApprovalIdea", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApprovalIdea)
            Me.columnApprovalProject = New Global.System.Data.DataColumn("ApprovalProject", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnApprovalProject)
            Me.columnFormulation = New Global.System.Data.DataColumn("Formulation", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormulation)
            Me.columnPlaneation = New Global.System.Data.DataColumn("Planeation", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPlaneation)
            Me.columnExecution = New Global.System.Data.DataColumn("Execution", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnExecution)
            Me.columnEvaluation = New Global.System.Data.DataColumn("Evaluation", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEvaluation)
            Me.columnClosing = New Global.System.Data.DataColumn("Closing", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClosing)
            Me.columnIdea.ReadOnly = true
            Me.columnApprovalIdea.ReadOnly = true
            Me.columnApprovalProject.ReadOnly = true
            Me.columnFormulation.ReadOnly = true
            Me.columnPlaneation.ReadOnly = true
            Me.columnExecution.ReadOnly = true
            Me.columnEvaluation.ReadOnly = true
            Me.columnClosing.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportStatisticsRow() As dtReportStatisticsRow
            Return CType(Me.NewRow,dtReportStatisticsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportStatisticsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportStatisticsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportStatisticsRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportStatisticsRowChanged(Me, New dtReportStatisticsRowChangeEvent(CType(e.Row,dtReportStatisticsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportStatisticsRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportStatisticsRowChanging(Me, New dtReportStatisticsRowChangeEvent(CType(e.Row,dtReportStatisticsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportStatisticsRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportStatisticsRowDeleted(Me, New dtReportStatisticsRowChangeEvent(CType(e.Row,dtReportStatisticsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportStatisticsRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportStatisticsRowDeleting(Me, New dtReportStatisticsRowChangeEvent(CType(e.Row,dtReportStatisticsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportStatisticsRow(ByVal row As dtReportStatisticsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ResearchAndDevelopment = New ResearchAndDevelopment
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportStatisticsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class dtReportInquestDataTable
        Inherits Global.System.Data.TypedTableBase(Of dtReportInquestRow)
        
        Private columnInquestName As Global.System.Data.DataColumn
        
        Private columnQuestionText As Global.System.Data.DataColumn
        
        Private columnAnswer As Global.System.Data.DataColumn
        
        Private columnIdInquest As Global.System.Data.DataColumn
        
        Private columnIdInquestContent As Global.System.Data.DataColumn
        
        Private columnIdQuestionByInquestContent As Global.System.Data.DataColumn
        
        Private columnIdAnswerByQuestion As Global.System.Data.DataColumn
        
        Private columnProjectCode As Global.System.Data.DataColumn
        
        Private columnProjectName As Global.System.Data.DataColumn
        
        Private columnProjectId As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "dtReportInquest"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property InquestNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnInquestName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property QuestionTextColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnQuestionText
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AnswerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAnswer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdInquestColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdInquest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdInquestContentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdInquestContent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdQuestionByInquestContentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdQuestionByInquestContent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IdAnswerByQuestionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIdAnswerByQuestion
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectCodeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectCode
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ProjectIdColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnProjectId
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As dtReportInquestRow
            Get
                Return CType(Me.Rows(index),dtReportInquestRow)
            End Get
        End Property
        
        Public Event dtReportInquestRowChanging As dtReportInquestRowChangeEventHandler
        
        Public Event dtReportInquestRowChanged As dtReportInquestRowChangeEventHandler
        
        Public Event dtReportInquestRowDeleting As dtReportInquestRowChangeEventHandler
        
        Public Event dtReportInquestRowDeleted As dtReportInquestRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AdddtReportInquestRow(ByVal row As dtReportInquestRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AdddtReportInquestRow(ByVal InquestName As String, ByVal QuestionText As String, ByVal Answer As String, ByVal IdInquest As Integer, ByVal IdInquestContent As Integer, ByVal IdQuestionByInquestContent As Integer, ByVal IdAnswerByQuestion As Integer, ByVal ProjectCode As String, ByVal ProjectName As String, ByVal ProjectId As Integer) As dtReportInquestRow
            Dim rowdtReportInquestRow As dtReportInquestRow = CType(Me.NewRow,dtReportInquestRow)
            Dim columnValuesArray() As Object = New Object() {InquestName, QuestionText, Answer, IdInquest, IdInquestContent, IdQuestionByInquestContent, IdAnswerByQuestion, ProjectCode, ProjectName, ProjectId}
            rowdtReportInquestRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowdtReportInquestRow)
            Return rowdtReportInquestRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As dtReportInquestDataTable = CType(MyBase.Clone,dtReportInquestDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New dtReportInquestDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnInquestName = MyBase.Columns("InquestName")
            Me.columnQuestionText = MyBase.Columns("QuestionText")
            Me.columnAnswer = MyBase.Columns("Answer")
            Me.columnIdInquest = MyBase.Columns("IdInquest")
            Me.columnIdInquestContent = MyBase.Columns("IdInquestContent")
            Me.columnIdQuestionByInquestContent = MyBase.Columns("IdQuestionByInquestContent")
            Me.columnIdAnswerByQuestion = MyBase.Columns("IdAnswerByQuestion")
            Me.columnProjectCode = MyBase.Columns("ProjectCode")
            Me.columnProjectName = MyBase.Columns("ProjectName")
            Me.columnProjectId = MyBase.Columns("ProjectId")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnInquestName = New Global.System.Data.DataColumn("InquestName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnInquestName)
            Me.columnQuestionText = New Global.System.Data.DataColumn("QuestionText", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnQuestionText)
            Me.columnAnswer = New Global.System.Data.DataColumn("Answer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAnswer)
            Me.columnIdInquest = New Global.System.Data.DataColumn("IdInquest", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdInquest)
            Me.columnIdInquestContent = New Global.System.Data.DataColumn("IdInquestContent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdInquestContent)
            Me.columnIdQuestionByInquestContent = New Global.System.Data.DataColumn("IdQuestionByInquestContent", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdQuestionByInquestContent)
            Me.columnIdAnswerByQuestion = New Global.System.Data.DataColumn("IdAnswerByQuestion", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIdAnswerByQuestion)
            Me.columnProjectCode = New Global.System.Data.DataColumn("ProjectCode", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectCode)
            Me.columnProjectName = New Global.System.Data.DataColumn("ProjectName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectName)
            Me.columnProjectId = New Global.System.Data.DataColumn("ProjectId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnProjectId)
            Me.columnInquestName.MaxLength = 255
            Me.columnQuestionText.MaxLength = 255
            Me.columnAnswer.MaxLength = 255
            Me.columnIdInquest.AllowDBNull = false
            Me.columnIdInquestContent.AllowDBNull = false
            Me.columnIdQuestionByInquestContent.AllowDBNull = false
            Me.columnIdAnswerByQuestion.AllowDBNull = false
            Me.columnProjectCode.AllowDBNull = false
            Me.columnProjectCode.MaxLength = 50
            Me.columnProjectName.AllowDBNull = false
            Me.columnProjectName.MaxLength = 255
            Me.columnProjectId.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewdtReportInquestRow() As dtReportInquestRow
            Return CType(Me.NewRow,dtReportInquestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New dtReportInquestRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(dtReportInquestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.dtReportInquestRowChangedEvent) Is Nothing) Then
                RaiseEvent dtReportInquestRowChanged(Me, New dtReportInquestRowChangeEvent(CType(e.Row,dtReportInquestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.dtReportInquestRowChangingEvent) Is Nothing) Then
                RaiseEvent dtReportInquestRowChanging(Me, New dtReportInquestRowChangeEvent(CType(e.Row,dtReportInquestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.dtReportInquestRowDeletedEvent) Is Nothing) Then
                RaiseEvent dtReportInquestRowDeleted(Me, New dtReportInquestRowChangeEvent(CType(e.Row,dtReportInquestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.dtReportInquestRowDeletingEvent) Is Nothing) Then
                RaiseEvent dtReportInquestRowDeleting(Me, New dtReportInquestRowChangeEvent(CType(e.Row,dtReportInquestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemovedtReportInquestRow(ByVal row As dtReportInquestRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ResearchAndDevelopment = New ResearchAndDevelopment
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "dtReportInquestDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportDocumentsRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportDocuments As dtReportDocumentsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportDocuments = CType(Me.Table,dtReportDocumentsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportDocuments.ProjectColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Project' de la tabla 'dtReportDocuments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportDocuments.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Title() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportDocuments.TitleColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Title' de la tabla 'dtReportDocuments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportDocuments.TitleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntityName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportDocuments.EntityNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'EntityName' de la tabla 'dtReportDocuments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportDocuments.EntityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportDocuments.DescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Description' de la tabla 'dtReportDocuments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportDocuments.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UserName() As String
            Get
                Return CType(Me(Me.tabledtReportDocuments.UserNameColumn),String)
            End Get
            Set
                Me(Me.tabledtReportDocuments.UserNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreateDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtReportDocuments.CreateDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'CreateDate' de la tabla 'dtReportDocuments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportDocuments.CreateDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisibilityLevel() As String
            Get
                Return CType(Me(Me.tabledtReportDocuments.VisibilityLevelColumn),String)
            End Get
            Set
                Me(Me.tabledtReportDocuments.VisibilityLevelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AttachFile() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportDocuments.AttachFileColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'AttachFile' de la tabla 'dtReportDocuments' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportDocuments.AttachFileColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsProjectNull() As Boolean
            Return Me.IsNull(Me.tabledtReportDocuments.ProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetProjectNull()
            Me(Me.tabledtReportDocuments.ProjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTitleNull() As Boolean
            Return Me.IsNull(Me.tabledtReportDocuments.TitleColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTitleNull()
            Me(Me.tabledtReportDocuments.TitleColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEntityNameNull() As Boolean
            Return Me.IsNull(Me.tabledtReportDocuments.EntityNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEntityNameNull()
            Me(Me.tabledtReportDocuments.EntityNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDescriptionNull() As Boolean
            Return Me.IsNull(Me.tabledtReportDocuments.DescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDescriptionNull()
            Me(Me.tabledtReportDocuments.DescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreateDateNull() As Boolean
            Return Me.IsNull(Me.tabledtReportDocuments.CreateDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreateDateNull()
            Me(Me.tabledtReportDocuments.CreateDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAttachFileNull() As Boolean
            Return Me.IsNull(Me.tabledtReportDocuments.AttachFileColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAttachFileNull()
            Me(Me.tabledtReportDocuments.AttachFileColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportGoodpracticeRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportGoodpractice As dtReportGoodpracticeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportGoodpractice = CType(Me.Table,dtReportGoodpracticeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Project() As String
            Get
                Return CType(Me(Me.tabledtReportGoodpractice.ProjectColumn),String)
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.ProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StrategicLine() As String
            Get
                Return CType(Me(Me.tabledtReportGoodpractice.StrategicLineColumn),String)
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.StrategicLineColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Objective() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportGoodpractice.ObjectiveColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Objective' de la tabla 'dtReportGoodPractice' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.ObjectiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Depto() As String
            Get
                Return CType(Me(Me.tabledtReportGoodpractice.DeptoColumn),String)
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.DeptoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property City() As String
            Get
                Return CType(Me(Me.tabledtReportGoodpractice.CityColumn),String)
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.CityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BeginDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtReportGoodpractice.BeginDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'BeginDate' de la tabla 'dtReportGoodPractice' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.BeginDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClosingDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabledtReportGoodpractice.ClosingDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ClosingDate' de la tabla 'dtReportGoodPractice' es DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.ClosingDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TotalCost() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportGoodpractice.TotalCostColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'TotalCost' de la tabla 'dtReportGoodPractice' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.TotalCostColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FSCContribution() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabledtReportGoodpractice.FSCContributionColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'FSCContribution' de la tabla 'dtReportGoodPractice' es DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportGoodpractice.FSCContributionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectiveNull() As Boolean
            Return Me.IsNull(Me.tabledtReportGoodpractice.ObjectiveColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectiveNull()
            Me(Me.tabledtReportGoodpractice.ObjectiveColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBeginDateNull() As Boolean
            Return Me.IsNull(Me.tabledtReportGoodpractice.BeginDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBeginDateNull()
            Me(Me.tabledtReportGoodpractice.BeginDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClosingDateNull() As Boolean
            Return Me.IsNull(Me.tabledtReportGoodpractice.ClosingDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClosingDateNull()
            Me(Me.tabledtReportGoodpractice.ClosingDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTotalCostNull() As Boolean
            Return Me.IsNull(Me.tabledtReportGoodpractice.TotalCostColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTotalCostNull()
            Me(Me.tabledtReportGoodpractice.TotalCostColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFSCContributionNull() As Boolean
            Return Me.IsNull(Me.tabledtReportGoodpractice.FSCContributionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFSCContributionNull()
            Me(Me.tabledtReportGoodpractice.FSCContributionColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportStatisticsRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportStatistics As dtReportStatisticsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportStatistics = CType(Me.Table,dtReportStatisticsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Idea() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportStatistics.IdeaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Idea' de la tabla 'dtReportStatistics' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportStatistics.IdeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ApprovalIdea() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportStatistics.ApprovalIdeaColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ApprovalIdea' de la tabla 'dtReportStatistics' es DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportStatistics.ApprovalIdeaColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ApprovalProject() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportStatistics.ApprovalProjectColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'ApprovalProject' de la tabla 'dtReportStatistics' es DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportStatistics.ApprovalProjectColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Formulation() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportStatistics.FormulationColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Formulation' de la tabla 'dtReportStatistics' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportStatistics.FormulationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Planeation() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportStatistics.PlaneationColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Planeation' de la tabla 'dtReportStatistics' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportStatistics.PlaneationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Execution() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportStatistics.ExecutionColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Execution' de la tabla 'dtReportStatistics' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportStatistics.ExecutionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Evaluation() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportStatistics.EvaluationColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Evaluation' de la tabla 'dtReportStatistics' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportStatistics.EvaluationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Closing() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabledtReportStatistics.ClosingColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Closing' de la tabla 'dtReportStatistics' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportStatistics.ClosingColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdeaNull() As Boolean
            Return Me.IsNull(Me.tabledtReportStatistics.IdeaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdeaNull()
            Me(Me.tabledtReportStatistics.IdeaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApprovalIdeaNull() As Boolean
            Return Me.IsNull(Me.tabledtReportStatistics.ApprovalIdeaColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApprovalIdeaNull()
            Me(Me.tabledtReportStatistics.ApprovalIdeaColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsApprovalProjectNull() As Boolean
            Return Me.IsNull(Me.tabledtReportStatistics.ApprovalProjectColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetApprovalProjectNull()
            Me(Me.tabledtReportStatistics.ApprovalProjectColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFormulationNull() As Boolean
            Return Me.IsNull(Me.tabledtReportStatistics.FormulationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFormulationNull()
            Me(Me.tabledtReportStatistics.FormulationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlaneationNull() As Boolean
            Return Me.IsNull(Me.tabledtReportStatistics.PlaneationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlaneationNull()
            Me(Me.tabledtReportStatistics.PlaneationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsExecutionNull() As Boolean
            Return Me.IsNull(Me.tabledtReportStatistics.ExecutionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetExecutionNull()
            Me(Me.tabledtReportStatistics.ExecutionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEvaluationNull() As Boolean
            Return Me.IsNull(Me.tabledtReportStatistics.EvaluationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEvaluationNull()
            Me(Me.tabledtReportStatistics.EvaluationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClosingNull() As Boolean
            Return Me.IsNull(Me.tabledtReportStatistics.ClosingColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClosingNull()
            Me(Me.tabledtReportStatistics.ClosingColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class dtReportInquestRow
        Inherits Global.System.Data.DataRow
        
        Private tabledtReportInquest As dtReportInquestDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabledtReportInquest = CType(Me.Table,dtReportInquestDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property InquestName() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportInquest.InquestNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'InquestName' de la tabla 'dtReportInquest' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportInquest.InquestNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QuestionText() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportInquest.QuestionTextColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'QuestionText' de la tabla 'dtReportInquest' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportInquest.QuestionTextColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Answer() As String
            Get
                Try 
                    Return CType(Me(Me.tabledtReportInquest.AnswerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("El valor de la columna 'Answer' de la tabla 'dtReportInquest' es DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabledtReportInquest.AnswerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdInquest() As Integer
            Get
                Return CType(Me(Me.tabledtReportInquest.IdInquestColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportInquest.IdInquestColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdInquestContent() As Integer
            Get
                Return CType(Me(Me.tabledtReportInquest.IdInquestContentColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportInquest.IdInquestContentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdQuestionByInquestContent() As Integer
            Get
                Return CType(Me(Me.tabledtReportInquest.IdQuestionByInquestContentColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportInquest.IdQuestionByInquestContentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdAnswerByQuestion() As Integer
            Get
                Return CType(Me(Me.tabledtReportInquest.IdAnswerByQuestionColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportInquest.IdAnswerByQuestionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectCode() As String
            Get
                Return CType(Me(Me.tabledtReportInquest.ProjectCodeColumn),String)
            End Get
            Set
                Me(Me.tabledtReportInquest.ProjectCodeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectName() As String
            Get
                Return CType(Me(Me.tabledtReportInquest.ProjectNameColumn),String)
            End Get
            Set
                Me(Me.tabledtReportInquest.ProjectNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ProjectId() As Integer
            Get
                Return CType(Me(Me.tabledtReportInquest.ProjectIdColumn),Integer)
            End Get
            Set
                Me(Me.tabledtReportInquest.ProjectIdColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsInquestNameNull() As Boolean
            Return Me.IsNull(Me.tabledtReportInquest.InquestNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetInquestNameNull()
            Me(Me.tabledtReportInquest.InquestNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsQuestionTextNull() As Boolean
            Return Me.IsNull(Me.tabledtReportInquest.QuestionTextColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetQuestionTextNull()
            Me(Me.tabledtReportInquest.QuestionTextColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAnswerNull() As Boolean
            Return Me.IsNull(Me.tabledtReportInquest.AnswerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAnswerNull()
            Me(Me.tabledtReportInquest.AnswerColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportDocumentsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportDocumentsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportDocumentsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportDocumentsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportGoodpracticeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportGoodpracticeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportGoodpracticeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportGoodpracticeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportStatisticsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportStatisticsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportStatisticsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportStatisticsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class dtReportInquestRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As dtReportInquestRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As dtReportInquestRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As dtReportInquestRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
