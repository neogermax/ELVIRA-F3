'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión del motor en tiempo de ejecución:2.0.50727.3053
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<System.Data.Linq.Mapping.DatabaseAttribute(Name:="FSC_eProject_TEST")>  _
Partial Public Class MBD_FSCDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertAccumulationIndicatorSet(instance As AccumulationIndicatorSet)
    End Sub
  Partial Private Sub UpdateAccumulationIndicatorSet(instance As AccumulationIndicatorSet)
    End Sub
  Partial Private Sub DeleteAccumulationIndicatorSet(instance As AccumulationIndicatorSet)
    End Sub
  Partial Private Sub InsertVisibilityLevel(instance As VisibilityLevel)
    End Sub
  Partial Private Sub UpdateVisibilityLevel(instance As VisibilityLevel)
    End Sub
  Partial Private Sub DeleteVisibilityLevel(instance As VisibilityLevel)
    End Sub
  Partial Private Sub InsertActivity(instance As Activity)
    End Sub
  Partial Private Sub UpdateActivity(instance As Activity)
    End Sub
  Partial Private Sub DeleteActivity(instance As Activity)
    End Sub
  Partial Private Sub InsertAddressee(instance As Addressee)
    End Sub
  Partial Private Sub UpdateAddressee(instance As Addressee)
    End Sub
  Partial Private Sub DeleteAddressee(instance As Addressee)
    End Sub
  Partial Private Sub InsertAnswersByQuestion(instance As AnswersByQuestion)
    End Sub
  Partial Private Sub UpdateAnswersByQuestion(instance As AnswersByQuestion)
    End Sub
  Partial Private Sub DeleteAnswersByQuestion(instance As AnswersByQuestion)
    End Sub
  Partial Private Sub InsertAnswersByResolvedInquest(instance As AnswersByResolvedInquest)
    End Sub
  Partial Private Sub UpdateAnswersByResolvedInquest(instance As AnswersByResolvedInquest)
    End Sub
  Partial Private Sub DeleteAnswersByResolvedInquest(instance As AnswersByResolvedInquest)
    End Sub
  Partial Private Sub InsertAttachFileFormat(instance As AttachFileFormat)
    End Sub
  Partial Private Sub UpdateAttachFileFormat(instance As AttachFileFormat)
    End Sub
  Partial Private Sub DeleteAttachFileFormat(instance As AttachFileFormat)
    End Sub
  Partial Private Sub InsertCloseRegistry(instance As CloseRegistry)
    End Sub
  Partial Private Sub UpdateCloseRegistry(instance As CloseRegistry)
    End Sub
  Partial Private Sub DeleteCloseRegistry(instance As CloseRegistry)
    End Sub
  Partial Private Sub InsertCommentsByContractRequest(instance As CommentsByContractRequest)
    End Sub
  Partial Private Sub UpdateCommentsByContractRequest(instance As CommentsByContractRequest)
    End Sub
  Partial Private Sub DeleteCommentsByContractRequest(instance As CommentsByContractRequest)
    End Sub
  Partial Private Sub InsertComponent(instance As Component)
    End Sub
  Partial Private Sub UpdateComponent(instance As Component)
    End Sub
  Partial Private Sub DeleteComponent(instance As Component)
    End Sub
  Partial Private Sub InsertComponentByRisk(instance As ComponentByRisk)
    End Sub
  Partial Private Sub UpdateComponentByRisk(instance As ComponentByRisk)
    End Sub
  Partial Private Sub DeleteComponentByRisk(instance As ComponentByRisk)
    End Sub
  Partial Private Sub InsertCompromise(instance As Compromise)
    End Sub
  Partial Private Sub UpdateCompromise(instance As Compromise)
    End Sub
  Partial Private Sub DeleteCompromise(instance As Compromise)
    End Sub
  Partial Private Sub InsertContractDataByContractRequest(instance As ContractDataByContractRequest)
    End Sub
  Partial Private Sub UpdateContractDataByContractRequest(instance As ContractDataByContractRequest)
    End Sub
  Partial Private Sub DeleteContractDataByContractRequest(instance As ContractDataByContractRequest)
    End Sub
  Partial Private Sub InsertContractExecution(instance As ContractExecution)
    End Sub
  Partial Private Sub UpdateContractExecution(instance As ContractExecution)
    End Sub
  Partial Private Sub DeleteContractExecution(instance As ContractExecution)
    End Sub
  Partial Private Sub InsertContractorLegalEntityByContractRequest(instance As ContractorLegalEntityByContractRequest)
    End Sub
  Partial Private Sub UpdateContractorLegalEntityByContractRequest(instance As ContractorLegalEntityByContractRequest)
    End Sub
  Partial Private Sub DeleteContractorLegalEntityByContractRequest(instance As ContractorLegalEntityByContractRequest)
    End Sub
  Partial Private Sub InsertContractorNaturalPersonByContractRequest(instance As ContractorNaturalPersonByContractRequest)
    End Sub
  Partial Private Sub UpdateContractorNaturalPersonByContractRequest(instance As ContractorNaturalPersonByContractRequest)
    End Sub
  Partial Private Sub DeleteContractorNaturalPersonByContractRequest(instance As ContractorNaturalPersonByContractRequest)
    End Sub
  Partial Private Sub InsertContractRequest(instance As ContractRequest)
    End Sub
  Partial Private Sub UpdateContractRequest(instance As ContractRequest)
    End Sub
  Partial Private Sub DeleteContractRequest(instance As ContractRequest)
    End Sub
  Partial Private Sub InsertContractType(instance As ContractType)
    End Sub
  Partial Private Sub UpdateContractType(instance As ContractType)
    End Sub
  Partial Private Sub DeleteContractType(instance As ContractType)
    End Sub
  Partial Private Sub InsertDocuments(instance As Documents)
    End Sub
  Partial Private Sub UpdateDocuments(instance As Documents)
    End Sub
  Partial Private Sub DeleteDocuments(instance As Documents)
    End Sub
  Partial Private Sub InsertDocumentsByEntity(instance As DocumentsByEntity)
    End Sub
  Partial Private Sub UpdateDocumentsByEntity(instance As DocumentsByEntity)
    End Sub
  Partial Private Sub DeleteDocumentsByEntity(instance As DocumentsByEntity)
    End Sub
  Partial Private Sub InsertEnterprise(instance As Enterprise)
    End Sub
  Partial Private Sub UpdateEnterprise(instance As Enterprise)
    End Sub
  Partial Private Sub DeleteEnterprise(instance As Enterprise)
    End Sub
  Partial Private Sub InsertEntities(instance As Entities)
    End Sub
  Partial Private Sub UpdateEntities(instance As Entities)
    End Sub
  Partial Private Sub DeleteEntities(instance As Entities)
    End Sub
  Partial Private Sub InsertExecution(instance As Execution)
    End Sub
  Partial Private Sub UpdateExecution(instance As Execution)
    End Sub
  Partial Private Sub DeleteExecution(instance As Execution)
    End Sub
  Partial Private Sub InsertExecutionContractualPlanRegistry(instance As ExecutionContractualPlanRegistry)
    End Sub
  Partial Private Sub UpdateExecutionContractualPlanRegistry(instance As ExecutionContractualPlanRegistry)
    End Sub
  Partial Private Sub DeleteExecutionContractualPlanRegistry(instance As ExecutionContractualPlanRegistry)
    End Sub
  Partial Private Sub InsertExecutionContractualPlanRegistryDetails(instance As ExecutionContractualPlanRegistryDetails)
    End Sub
  Partial Private Sub UpdateExecutionContractualPlanRegistryDetails(instance As ExecutionContractualPlanRegistryDetails)
    End Sub
  Partial Private Sub DeleteExecutionContractualPlanRegistryDetails(instance As ExecutionContractualPlanRegistryDetails)
    End Sub
  Partial Private Sub InsertExplanatory(instance As Explanatory)
    End Sub
  Partial Private Sub UpdateExplanatory(instance As Explanatory)
    End Sub
  Partial Private Sub DeleteExplanatory(instance As Explanatory)
    End Sub
  Partial Private Sub InsertForum(instance As Forum)
    End Sub
  Partial Private Sub UpdateForum(instance As Forum)
    End Sub
  Partial Private Sub DeleteForum(instance As Forum)
    End Sub
  Partial Private Sub InsertIdea(instance As Idea)
    End Sub
  Partial Private Sub UpdateIdea(instance As Idea)
    End Sub
  Partial Private Sub DeleteIdea(instance As Idea)
    End Sub
  Partial Private Sub InsertIndicator(instance As Indicator)
    End Sub
  Partial Private Sub UpdateIndicator(instance As Indicator)
    End Sub
  Partial Private Sub DeleteIndicator(instance As Indicator)
    End Sub
  Partial Private Sub InsertIndicatorByAccumulationIndicatorSet(instance As IndicatorByAccumulationIndicatorSet)
    End Sub
  Partial Private Sub UpdateIndicatorByAccumulationIndicatorSet(instance As IndicatorByAccumulationIndicatorSet)
    End Sub
  Partial Private Sub DeleteIndicatorByAccumulationIndicatorSet(instance As IndicatorByAccumulationIndicatorSet)
    End Sub
  Partial Private Sub InsertIndicatorInformation(instance As IndicatorInformation)
    End Sub
  Partial Private Sub UpdateIndicatorInformation(instance As IndicatorInformation)
    End Sub
  Partial Private Sub DeleteIndicatorInformation(instance As IndicatorInformation)
    End Sub
  Partial Private Sub InsertInquest(instance As Inquest)
    End Sub
  Partial Private Sub UpdateInquest(instance As Inquest)
    End Sub
  Partial Private Sub DeleteInquest(instance As Inquest)
    End Sub
  Partial Private Sub InsertInquestContent(instance As InquestContent)
    End Sub
  Partial Private Sub UpdateInquestContent(instance As InquestContent)
    End Sub
  Partial Private Sub DeleteInquestContent(instance As InquestContent)
    End Sub
  Partial Private Sub InsertLocationByIdea(instance As LocationByIdea)
    End Sub
  Partial Private Sub UpdateLocationByIdea(instance As LocationByIdea)
    End Sub
  Partial Private Sub DeleteLocationByIdea(instance As LocationByIdea)
    End Sub
  Partial Private Sub InsertLocationByProposal(instance As LocationByProposal)
    End Sub
  Partial Private Sub UpdateLocationByProposal(instance As LocationByProposal)
    End Sub
  Partial Private Sub DeleteLocationByProposal(instance As LocationByProposal)
    End Sub
  Partial Private Sub InsertManagement(instance As Management)
    End Sub
  Partial Private Sub UpdateManagement(instance As Management)
    End Sub
  Partial Private Sub DeleteManagement(instance As Management)
    End Sub
  Partial Private Sub InsertMeasurementDateByIndicator(instance As MeasurementDateByIndicator)
    End Sub
  Partial Private Sub UpdateMeasurementDateByIndicator(instance As MeasurementDateByIndicator)
    End Sub
  Partial Private Sub DeleteMeasurementDateByIndicator(instance As MeasurementDateByIndicator)
    End Sub
  Partial Private Sub InsertMitigation(instance As Mitigation)
    End Sub
  Partial Private Sub UpdateMitigation(instance As Mitigation)
    End Sub
  Partial Private Sub DeleteMitigation(instance As Mitigation)
    End Sub
  Partial Private Sub InsertMitigationByRisk(instance As MitigationByRisk)
    End Sub
  Partial Private Sub UpdateMitigationByRisk(instance As MitigationByRisk)
    End Sub
  Partial Private Sub DeleteMitigationByRisk(instance As MitigationByRisk)
    End Sub
  Partial Private Sub InsertObjective(instance As Objective)
    End Sub
  Partial Private Sub UpdateObjective(instance As Objective)
    End Sub
  Partial Private Sub DeleteObjective(instance As Objective)
    End Sub
  Partial Private Sub InsertObjectiveByActivity(instance As ObjectiveByActivity)
    End Sub
  Partial Private Sub UpdateObjectiveByActivity(instance As ObjectiveByActivity)
    End Sub
  Partial Private Sub DeleteObjectiveByActivity(instance As ObjectiveByActivity)
    End Sub
  Partial Private Sub InsertOperatorByProject(instance As OperatorByProject)
    End Sub
  Partial Private Sub UpdateOperatorByProject(instance As OperatorByProject)
    End Sub
  Partial Private Sub DeleteOperatorByProject(instance As OperatorByProject)
    End Sub
  Partial Private Sub InsertPaymentflow(instance As Paymentflow)
    End Sub
  Partial Private Sub UpdatePaymentflow(instance As Paymentflow)
    End Sub
  Partial Private Sub DeletePaymentflow(instance As Paymentflow)
    End Sub
  Partial Private Sub InsertPaymentsListByContractRequest(instance As PaymentsListByContractRequest)
    End Sub
  Partial Private Sub UpdatePaymentsListByContractRequest(instance As PaymentsListByContractRequest)
    End Sub
  Partial Private Sub DeletePaymentsListByContractRequest(instance As PaymentsListByContractRequest)
    End Sub
  Partial Private Sub InsertPerspective(instance As Perspective)
    End Sub
  Partial Private Sub UpdatePerspective(instance As Perspective)
    End Sub
  Partial Private Sub DeletePerspective(instance As Perspective)
    End Sub
  Partial Private Sub InsertPoliza(instance As Poliza)
    End Sub
  Partial Private Sub UpdatePoliza(instance As Poliza)
    End Sub
  Partial Private Sub DeletePoliza(instance As Poliza)
    End Sub
  Partial Private Sub InsertPolizaDetails(instance As PolizaDetails)
    End Sub
  Partial Private Sub UpdatePolizaDetails(instance As PolizaDetails)
    End Sub
  Partial Private Sub DeletePolizaDetails(instance As PolizaDetails)
    End Sub
  Partial Private Sub InsertProceeding_Logs(instance As Proceeding_Logs)
    End Sub
  Partial Private Sub UpdateProceeding_Logs(instance As Proceeding_Logs)
    End Sub
  Partial Private Sub DeleteProceeding_Logs(instance As Proceeding_Logs)
    End Sub
  Partial Private Sub InsertProgram(instance As Program)
    End Sub
  Partial Private Sub UpdateProgram(instance As Program)
    End Sub
  Partial Private Sub DeleteProgram(instance As Program)
    End Sub
  Partial Private Sub InsertProgramComponent(instance As ProgramComponent)
    End Sub
  Partial Private Sub UpdateProgramComponent(instance As ProgramComponent)
    End Sub
  Partial Private Sub DeleteProgramComponent(instance As ProgramComponent)
    End Sub
  Partial Private Sub InsertProgramComponentByIdea(instance As ProgramComponentByIdea)
    End Sub
  Partial Private Sub UpdateProgramComponentByIdea(instance As ProgramComponentByIdea)
    End Sub
  Partial Private Sub DeleteProgramComponentByIdea(instance As ProgramComponentByIdea)
    End Sub
  Partial Private Sub InsertProgramComponentByProject(instance As ProgramComponentByProject)
    End Sub
  Partial Private Sub UpdateProgramComponentByProject(instance As ProgramComponentByProject)
    End Sub
  Partial Private Sub DeleteProgramComponentByProject(instance As ProgramComponentByProject)
    End Sub
  Partial Private Sub InsertProject(instance As Project)
    End Sub
  Partial Private Sub UpdateProject(instance As Project)
    End Sub
  Partial Private Sub DeleteProject(instance As Project)
    End Sub
  Partial Private Sub InsertProjectApprovalRecord(instance As ProjectApprovalRecord)
    End Sub
  Partial Private Sub UpdateProjectApprovalRecord(instance As ProjectApprovalRecord)
    End Sub
  Partial Private Sub DeleteProjectApprovalRecord(instance As ProjectApprovalRecord)
    End Sub
  Partial Private Sub InsertProjectLocation(instance As ProjectLocation)
    End Sub
  Partial Private Sub UpdateProjectLocation(instance As ProjectLocation)
    End Sub
  Partial Private Sub DeleteProjectLocation(instance As ProjectLocation)
    End Sub
  Partial Private Sub InsertProjectPhase(instance As ProjectPhase)
    End Sub
  Partial Private Sub UpdateProjectPhase(instance As ProjectPhase)
    End Sub
  Partial Private Sub DeleteProjectPhase(instance As ProjectPhase)
    End Sub
  Partial Private Sub InsertProposal(instance As Proposal)
    End Sub
  Partial Private Sub UpdateProposal(instance As Proposal)
    End Sub
  Partial Private Sub DeleteProposal(instance As Proposal)
    End Sub
  Partial Private Sub InsertQuestionsByInquestContent(instance As QuestionsByInquestContent)
    End Sub
  Partial Private Sub UpdateQuestionsByInquestContent(instance As QuestionsByInquestContent)
    End Sub
  Partial Private Sub DeleteQuestionsByInquestContent(instance As QuestionsByInquestContent)
    End Sub
  Partial Private Sub InsertReply(instance As Reply)
    End Sub
  Partial Private Sub UpdateReply(instance As Reply)
    End Sub
  Partial Private Sub DeleteReply(instance As Reply)
    End Sub
  Partial Private Sub InsertResolvedInquest(instance As ResolvedInquest)
    End Sub
  Partial Private Sub UpdateResolvedInquest(instance As ResolvedInquest)
    End Sub
  Partial Private Sub DeleteResolvedInquest(instance As ResolvedInquest)
    End Sub
  Partial Private Sub InsertRisk(instance As Risk)
    End Sub
  Partial Private Sub UpdateRisk(instance As Risk)
    End Sub
  Partial Private Sub DeleteRisk(instance As Risk)
    End Sub
  Partial Private Sub InsertSource(instance As Source)
    End Sub
  Partial Private Sub UpdateSource(instance As Source)
    End Sub
  Partial Private Sub DeleteSource(instance As Source)
    End Sub
  Partial Private Sub InsertSourceByProject(instance As SourceByProject)
    End Sub
  Partial Private Sub UpdateSourceByProject(instance As SourceByProject)
    End Sub
  Partial Private Sub DeleteSourceByProject(instance As SourceByProject)
    End Sub
  Partial Private Sub InsertStrategicActivity(instance As StrategicActivity)
    End Sub
  Partial Private Sub UpdateStrategicActivity(instance As StrategicActivity)
    End Sub
  Partial Private Sub DeleteStrategicActivity(instance As StrategicActivity)
    End Sub
  Partial Private Sub InsertStrategicLine(instance As StrategicLine)
    End Sub
  Partial Private Sub UpdateStrategicLine(instance As StrategicLine)
    End Sub
  Partial Private Sub DeleteStrategicLine(instance As StrategicLine)
    End Sub
  Partial Private Sub InsertStrategicObjective(instance As StrategicObjective)
    End Sub
  Partial Private Sub UpdateStrategicObjective(instance As StrategicObjective)
    End Sub
  Partial Private Sub DeleteStrategicObjective(instance As StrategicObjective)
    End Sub
  Partial Private Sub InsertStrategy(instance As Strategy)
    End Sub
  Partial Private Sub UpdateStrategy(instance As Strategy)
    End Sub
  Partial Private Sub DeleteStrategy(instance As Strategy)
    End Sub
  Partial Private Sub InsertSubActivity(instance As SubActivity)
    End Sub
  Partial Private Sub UpdateSubActivity(instance As SubActivity)
    End Sub
  Partial Private Sub DeleteSubActivity(instance As SubActivity)
    End Sub
  Partial Private Sub InsertSubactivityByThird(instance As SubactivityByThird)
    End Sub
  Partial Private Sub UpdateSubactivityByThird(instance As SubactivityByThird)
    End Sub
  Partial Private Sub DeleteSubactivityByThird(instance As SubactivityByThird)
    End Sub
  Partial Private Sub InsertSubActivityInformationRegistry(instance As SubActivityInformationRegistry)
    End Sub
  Partial Private Sub UpdateSubActivityInformationRegistry(instance As SubActivityInformationRegistry)
    End Sub
  Partial Private Sub DeleteSubActivityInformationRegistry(instance As SubActivityInformationRegistry)
    End Sub
  Partial Private Sub InsertSubjectAndValueByContractRequest(instance As SubjectAndValueByContractRequest)
    End Sub
  Partial Private Sub UpdateSubjectAndValueByContractRequest(instance As SubjectAndValueByContractRequest)
    End Sub
  Partial Private Sub DeleteSubjectAndValueByContractRequest(instance As SubjectAndValueByContractRequest)
    End Sub
  Partial Private Sub InsertSubType(instance As SubType)
    End Sub
  Partial Private Sub UpdateSubType(instance As SubType)
    End Sub
  Partial Private Sub DeleteSubType(instance As SubType)
    End Sub
  Partial Private Sub InsertSummoning(instance As Summoning)
    End Sub
  Partial Private Sub UpdateSummoning(instance As Summoning)
    End Sub
  Partial Private Sub DeleteSummoning(instance As Summoning)
    End Sub
  Partial Private Sub InsertSupplierEvaluation(instance As SupplierEvaluation)
    End Sub
  Partial Private Sub UpdateSupplierEvaluation(instance As SupplierEvaluation)
    End Sub
  Partial Private Sub DeleteSupplierEvaluation(instance As SupplierEvaluation)
    End Sub
  Partial Private Sub InsertSupplierQualification(instance As SupplierQualification)
    End Sub
  Partial Private Sub UpdateSupplierQualification(instance As SupplierQualification)
    End Sub
  Partial Private Sub DeleteSupplierQualification(instance As SupplierQualification)
    End Sub
  Partial Private Sub InsertTestimony(instance As Testimony)
    End Sub
  Partial Private Sub UpdateTestimony(instance As Testimony)
    End Sub
  Partial Private Sub DeleteTestimony(instance As Testimony)
    End Sub
  Partial Private Sub InsertThird(instance As Third)
    End Sub
  Partial Private Sub UpdateThird(instance As Third)
    End Sub
  Partial Private Sub DeleteThird(instance As Third)
    End Sub
  Partial Private Sub InsertThirdByIdea(instance As ThirdByIdea)
    End Sub
  Partial Private Sub UpdateThirdByIdea(instance As ThirdByIdea)
    End Sub
  Partial Private Sub DeleteThirdByIdea(instance As ThirdByIdea)
    End Sub
  Partial Private Sub InsertThirdByProject(instance As ThirdByProject)
    End Sub
  Partial Private Sub UpdateThirdByProject(instance As ThirdByProject)
    End Sub
  Partial Private Sub DeleteThirdByProject(instance As ThirdByProject)
    End Sub
  Partial Private Sub InsertType(instance As Type)
    End Sub
  Partial Private Sub UpdateType(instance As Type)
    End Sub
  Partial Private Sub DeleteType(instance As Type)
    End Sub
  Partial Private Sub InsertTypeContract(instance As TypeContract)
    End Sub
  Partial Private Sub UpdateTypeContract(instance As TypeContract)
    End Sub
  Partial Private Sub DeleteTypeContract(instance As TypeContract)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("FSC_eProject_TESTConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property AccumulationIndicatorSet() As System.Data.Linq.Table(Of AccumulationIndicatorSet)
		Get
			Return Me.GetTable(Of AccumulationIndicatorSet)
		End Get
	End Property
	
	Public ReadOnly Property VisibilityLevel() As System.Data.Linq.Table(Of VisibilityLevel)
		Get
			Return Me.GetTable(Of VisibilityLevel)
		End Get
	End Property
	
	Public ReadOnly Property Activity() As System.Data.Linq.Table(Of Activity)
		Get
			Return Me.GetTable(Of Activity)
		End Get
	End Property
	
	Public ReadOnly Property Addressee() As System.Data.Linq.Table(Of Addressee)
		Get
			Return Me.GetTable(Of Addressee)
		End Get
	End Property
	
	Public ReadOnly Property AnswersByQuestion() As System.Data.Linq.Table(Of AnswersByQuestion)
		Get
			Return Me.GetTable(Of AnswersByQuestion)
		End Get
	End Property
	
	Public ReadOnly Property AnswersByResolvedInquest() As System.Data.Linq.Table(Of AnswersByResolvedInquest)
		Get
			Return Me.GetTable(Of AnswersByResolvedInquest)
		End Get
	End Property
	
	Public ReadOnly Property AttachFileFormat() As System.Data.Linq.Table(Of AttachFileFormat)
		Get
			Return Me.GetTable(Of AttachFileFormat)
		End Get
	End Property
	
	Public ReadOnly Property CloseRegistry() As System.Data.Linq.Table(Of CloseRegistry)
		Get
			Return Me.GetTable(Of CloseRegistry)
		End Get
	End Property
	
	Public ReadOnly Property CommentsByContractRequest() As System.Data.Linq.Table(Of CommentsByContractRequest)
		Get
			Return Me.GetTable(Of CommentsByContractRequest)
		End Get
	End Property
	
	Public ReadOnly Property Component() As System.Data.Linq.Table(Of Component)
		Get
			Return Me.GetTable(Of Component)
		End Get
	End Property
	
	Public ReadOnly Property ComponentByRisk() As System.Data.Linq.Table(Of ComponentByRisk)
		Get
			Return Me.GetTable(Of ComponentByRisk)
		End Get
	End Property
	
	Public ReadOnly Property Compromise() As System.Data.Linq.Table(Of Compromise)
		Get
			Return Me.GetTable(Of Compromise)
		End Get
	End Property
	
	Public ReadOnly Property ContractDataByContractRequest() As System.Data.Linq.Table(Of ContractDataByContractRequest)
		Get
			Return Me.GetTable(Of ContractDataByContractRequest)
		End Get
	End Property
	
	Public ReadOnly Property ContractExecution() As System.Data.Linq.Table(Of ContractExecution)
		Get
			Return Me.GetTable(Of ContractExecution)
		End Get
	End Property
	
	Public ReadOnly Property ContractorLegalEntityByContractRequest() As System.Data.Linq.Table(Of ContractorLegalEntityByContractRequest)
		Get
			Return Me.GetTable(Of ContractorLegalEntityByContractRequest)
		End Get
	End Property
	
	Public ReadOnly Property ContractorNaturalPersonByContractRequest() As System.Data.Linq.Table(Of ContractorNaturalPersonByContractRequest)
		Get
			Return Me.GetTable(Of ContractorNaturalPersonByContractRequest)
		End Get
	End Property
	
	Public ReadOnly Property ContractRequest() As System.Data.Linq.Table(Of ContractRequest)
		Get
			Return Me.GetTable(Of ContractRequest)
		End Get
	End Property
	
	Public ReadOnly Property ContractType() As System.Data.Linq.Table(Of ContractType)
		Get
			Return Me.GetTable(Of ContractType)
		End Get
	End Property
	
	Public ReadOnly Property Documents() As System.Data.Linq.Table(Of Documents)
		Get
			Return Me.GetTable(Of Documents)
		End Get
	End Property
	
	Public ReadOnly Property DocumentsByEntity() As System.Data.Linq.Table(Of DocumentsByEntity)
		Get
			Return Me.GetTable(Of DocumentsByEntity)
		End Get
	End Property
	
	Public ReadOnly Property DocumentType() As System.Data.Linq.Table(Of DocumentType)
		Get
			Return Me.GetTable(Of DocumentType)
		End Get
	End Property
	
	Public ReadOnly Property Enterprise() As System.Data.Linq.Table(Of Enterprise)
		Get
			Return Me.GetTable(Of Enterprise)
		End Get
	End Property
	
	Public ReadOnly Property Entities() As System.Data.Linq.Table(Of Entities)
		Get
			Return Me.GetTable(Of Entities)
		End Get
	End Property
	
	Public ReadOnly Property Execution() As System.Data.Linq.Table(Of Execution)
		Get
			Return Me.GetTable(Of Execution)
		End Get
	End Property
	
	Public ReadOnly Property ExecutionContractualPlanRegistry() As System.Data.Linq.Table(Of ExecutionContractualPlanRegistry)
		Get
			Return Me.GetTable(Of ExecutionContractualPlanRegistry)
		End Get
	End Property
	
	Public ReadOnly Property ExecutionContractualPlanRegistryDetails() As System.Data.Linq.Table(Of ExecutionContractualPlanRegistryDetails)
		Get
			Return Me.GetTable(Of ExecutionContractualPlanRegistryDetails)
		End Get
	End Property
	
	Public ReadOnly Property Explanatory() As System.Data.Linq.Table(Of Explanatory)
		Get
			Return Me.GetTable(Of Explanatory)
		End Get
	End Property
	
	Public ReadOnly Property Forum() As System.Data.Linq.Table(Of Forum)
		Get
			Return Me.GetTable(Of Forum)
		End Get
	End Property
	
	Public ReadOnly Property Idea() As System.Data.Linq.Table(Of Idea)
		Get
			Return Me.GetTable(Of Idea)
		End Get
	End Property
	
	Public ReadOnly Property Indicator() As System.Data.Linq.Table(Of Indicator)
		Get
			Return Me.GetTable(Of Indicator)
		End Get
	End Property
	
	Public ReadOnly Property IndicatorByAccumulationIndicatorSet() As System.Data.Linq.Table(Of IndicatorByAccumulationIndicatorSet)
		Get
			Return Me.GetTable(Of IndicatorByAccumulationIndicatorSet)
		End Get
	End Property
	
	Public ReadOnly Property IndicatorInformation() As System.Data.Linq.Table(Of IndicatorInformation)
		Get
			Return Me.GetTable(Of IndicatorInformation)
		End Get
	End Property
	
	Public ReadOnly Property Inquest() As System.Data.Linq.Table(Of Inquest)
		Get
			Return Me.GetTable(Of Inquest)
		End Get
	End Property
	
	Public ReadOnly Property InquestContent() As System.Data.Linq.Table(Of InquestContent)
		Get
			Return Me.GetTable(Of InquestContent)
		End Get
	End Property
	
	Public ReadOnly Property LocationByIdea() As System.Data.Linq.Table(Of LocationByIdea)
		Get
			Return Me.GetTable(Of LocationByIdea)
		End Get
	End Property
	
	Public ReadOnly Property LocationByProposal() As System.Data.Linq.Table(Of LocationByProposal)
		Get
			Return Me.GetTable(Of LocationByProposal)
		End Get
	End Property
	
	Public ReadOnly Property Management() As System.Data.Linq.Table(Of Management)
		Get
			Return Me.GetTable(Of Management)
		End Get
	End Property
	
	Public ReadOnly Property MeasurementDateByIndicator() As System.Data.Linq.Table(Of MeasurementDateByIndicator)
		Get
			Return Me.GetTable(Of MeasurementDateByIndicator)
		End Get
	End Property
	
	Public ReadOnly Property Mitigation() As System.Data.Linq.Table(Of Mitigation)
		Get
			Return Me.GetTable(Of Mitigation)
		End Get
	End Property
	
	Public ReadOnly Property MitigationByRisk() As System.Data.Linq.Table(Of MitigationByRisk)
		Get
			Return Me.GetTable(Of MitigationByRisk)
		End Get
	End Property
	
	Public ReadOnly Property Objective() As System.Data.Linq.Table(Of Objective)
		Get
			Return Me.GetTable(Of Objective)
		End Get
	End Property
	
	Public ReadOnly Property ObjectiveByActivity() As System.Data.Linq.Table(Of ObjectiveByActivity)
		Get
			Return Me.GetTable(Of ObjectiveByActivity)
		End Get
	End Property
	
	Public ReadOnly Property OperatorByProject() As System.Data.Linq.Table(Of OperatorByProject)
		Get
			Return Me.GetTable(Of OperatorByProject)
		End Get
	End Property
	
	Public ReadOnly Property Paymentflow() As System.Data.Linq.Table(Of Paymentflow)
		Get
			Return Me.GetTable(Of Paymentflow)
		End Get
	End Property
	
	Public ReadOnly Property PaymentsListByContractRequest() As System.Data.Linq.Table(Of PaymentsListByContractRequest)
		Get
			Return Me.GetTable(Of PaymentsListByContractRequest)
		End Get
	End Property
	
	Public ReadOnly Property Perspective() As System.Data.Linq.Table(Of Perspective)
		Get
			Return Me.GetTable(Of Perspective)
		End Get
	End Property
	
	Public ReadOnly Property Poliza() As System.Data.Linq.Table(Of Poliza)
		Get
			Return Me.GetTable(Of Poliza)
		End Get
	End Property
	
	Public ReadOnly Property PolizaDetails() As System.Data.Linq.Table(Of PolizaDetails)
		Get
			Return Me.GetTable(Of PolizaDetails)
		End Get
	End Property
	
	Public ReadOnly Property Proceeding_Logs() As System.Data.Linq.Table(Of Proceeding_Logs)
		Get
			Return Me.GetTable(Of Proceeding_Logs)
		End Get
	End Property
	
	Public ReadOnly Property Program() As System.Data.Linq.Table(Of Program)
		Get
			Return Me.GetTable(Of Program)
		End Get
	End Property
	
	Public ReadOnly Property ProgramComponent() As System.Data.Linq.Table(Of ProgramComponent)
		Get
			Return Me.GetTable(Of ProgramComponent)
		End Get
	End Property
	
	Public ReadOnly Property ProgramComponentByIdea() As System.Data.Linq.Table(Of ProgramComponentByIdea)
		Get
			Return Me.GetTable(Of ProgramComponentByIdea)
		End Get
	End Property
	
	Public ReadOnly Property ProgramComponentByProject() As System.Data.Linq.Table(Of ProgramComponentByProject)
		Get
			Return Me.GetTable(Of ProgramComponentByProject)
		End Get
	End Property
	
	Public ReadOnly Property Project() As System.Data.Linq.Table(Of Project)
		Get
			Return Me.GetTable(Of Project)
		End Get
	End Property
	
	Public ReadOnly Property ProjectApprovalRecord() As System.Data.Linq.Table(Of ProjectApprovalRecord)
		Get
			Return Me.GetTable(Of ProjectApprovalRecord)
		End Get
	End Property
	
	Public ReadOnly Property ProjectLocation() As System.Data.Linq.Table(Of ProjectLocation)
		Get
			Return Me.GetTable(Of ProjectLocation)
		End Get
	End Property
	
	Public ReadOnly Property ProjectPhase() As System.Data.Linq.Table(Of ProjectPhase)
		Get
			Return Me.GetTable(Of ProjectPhase)
		End Get
	End Property
	
	Public ReadOnly Property Proposal() As System.Data.Linq.Table(Of Proposal)
		Get
			Return Me.GetTable(Of Proposal)
		End Get
	End Property
	
	Public ReadOnly Property QuestionsByInquestContent() As System.Data.Linq.Table(Of QuestionsByInquestContent)
		Get
			Return Me.GetTable(Of QuestionsByInquestContent)
		End Get
	End Property
	
	Public ReadOnly Property Reply() As System.Data.Linq.Table(Of Reply)
		Get
			Return Me.GetTable(Of Reply)
		End Get
	End Property
	
	Public ReadOnly Property ResolvedInquest() As System.Data.Linq.Table(Of ResolvedInquest)
		Get
			Return Me.GetTable(Of ResolvedInquest)
		End Get
	End Property
	
	Public ReadOnly Property resultsmensaje() As System.Data.Linq.Table(Of resultsmensaje)
		Get
			Return Me.GetTable(Of resultsmensaje)
		End Get
	End Property
	
	Public ReadOnly Property Risk() As System.Data.Linq.Table(Of Risk)
		Get
			Return Me.GetTable(Of Risk)
		End Get
	End Property
	
	Public ReadOnly Property Source() As System.Data.Linq.Table(Of Source)
		Get
			Return Me.GetTable(Of Source)
		End Get
	End Property
	
	Public ReadOnly Property SourceByProject() As System.Data.Linq.Table(Of SourceByProject)
		Get
			Return Me.GetTable(Of SourceByProject)
		End Get
	End Property
	
	Public ReadOnly Property StrategicActivity() As System.Data.Linq.Table(Of StrategicActivity)
		Get
			Return Me.GetTable(Of StrategicActivity)
		End Get
	End Property
	
	Public ReadOnly Property StrategicLine() As System.Data.Linq.Table(Of StrategicLine)
		Get
			Return Me.GetTable(Of StrategicLine)
		End Get
	End Property
	
	Public ReadOnly Property StrategicObjective() As System.Data.Linq.Table(Of StrategicObjective)
		Get
			Return Me.GetTable(Of StrategicObjective)
		End Get
	End Property
	
	Public ReadOnly Property Strategy() As System.Data.Linq.Table(Of Strategy)
		Get
			Return Me.GetTable(Of Strategy)
		End Get
	End Property
	
	Public ReadOnly Property SubActivity() As System.Data.Linq.Table(Of SubActivity)
		Get
			Return Me.GetTable(Of SubActivity)
		End Get
	End Property
	
	Public ReadOnly Property SubactivityByThird() As System.Data.Linq.Table(Of SubactivityByThird)
		Get
			Return Me.GetTable(Of SubactivityByThird)
		End Get
	End Property
	
	Public ReadOnly Property SubActivityInformationRegistry() As System.Data.Linq.Table(Of SubActivityInformationRegistry)
		Get
			Return Me.GetTable(Of SubActivityInformationRegistry)
		End Get
	End Property
	
	Public ReadOnly Property SubjectAndValueByContractRequest() As System.Data.Linq.Table(Of SubjectAndValueByContractRequest)
		Get
			Return Me.GetTable(Of SubjectAndValueByContractRequest)
		End Get
	End Property
	
	Public ReadOnly Property SubType() As System.Data.Linq.Table(Of SubType)
		Get
			Return Me.GetTable(Of SubType)
		End Get
	End Property
	
	Public ReadOnly Property Summoning() As System.Data.Linq.Table(Of Summoning)
		Get
			Return Me.GetTable(Of Summoning)
		End Get
	End Property
	
	Public ReadOnly Property SupplierEvaluation() As System.Data.Linq.Table(Of SupplierEvaluation)
		Get
			Return Me.GetTable(Of SupplierEvaluation)
		End Get
	End Property
	
	Public ReadOnly Property SupplierQualification() As System.Data.Linq.Table(Of SupplierQualification)
		Get
			Return Me.GetTable(Of SupplierQualification)
		End Get
	End Property
	
	Public ReadOnly Property TEMP_BORRAR_DEF() As System.Data.Linq.Table(Of TEMP_BORRAR_DEF)
		Get
			Return Me.GetTable(Of TEMP_BORRAR_DEF)
		End Get
	End Property
	
	Public ReadOnly Property TEMP_DEPURADOR() As System.Data.Linq.Table(Of TEMP_DEPURADOR)
		Get
			Return Me.GetTable(Of TEMP_DEPURADOR)
		End Get
	End Property
	
	Public ReadOnly Property TemporaryActivities() As System.Data.Linq.Table(Of TemporaryActivities)
		Get
			Return Me.GetTable(Of TemporaryActivities)
		End Get
	End Property
	
	Public ReadOnly Property Testimony() As System.Data.Linq.Table(Of Testimony)
		Get
			Return Me.GetTable(Of Testimony)
		End Get
	End Property
	
	Public ReadOnly Property Third() As System.Data.Linq.Table(Of Third)
		Get
			Return Me.GetTable(Of Third)
		End Get
	End Property
	
	Public ReadOnly Property ThirdByIdea() As System.Data.Linq.Table(Of ThirdByIdea)
		Get
			Return Me.GetTable(Of ThirdByIdea)
		End Get
	End Property
	
	Public ReadOnly Property ThirdByProject() As System.Data.Linq.Table(Of ThirdByProject)
		Get
			Return Me.GetTable(Of ThirdByProject)
		End Get
	End Property
	
	Public ReadOnly Property TmpSubActivity() As System.Data.Linq.Table(Of TmpSubActivity)
		Get
			Return Me.GetTable(Of TmpSubActivity)
		End Get
	End Property
	
	Public ReadOnly Property Type() As System.Data.Linq.Table(Of Type)
		Get
			Return Me.GetTable(Of Type)
		End Get
	End Property
	
	Public ReadOnly Property TypeActas() As System.Data.Linq.Table(Of TypeActas)
		Get
			Return Me.GetTable(Of TypeActas)
		End Get
	End Property
	
	Public ReadOnly Property TypeContract() As System.Data.Linq.Table(Of TypeContract)
		Get
			Return Me.GetTable(Of TypeContract)
		End Get
	End Property
	
	Public ReadOnly Property UsersByMailGroup() As System.Data.Linq.Table(Of UsersByMailGroup)
		Get
			Return Me.GetTable(Of UsersByMailGroup)
		End Get
	End Property
End Class

<Table(Name:="dbo.AccumulationIndicatorSet")>  _
Partial Public Class AccumulationIndicatorSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdIndicator As Integer
	
	Private _Code As String
	
	Private _Description As String
	
	Private _Name As String
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _IndicatorByAccumulationIndicatorSet As EntitySet(Of IndicatorByAccumulationIndicatorSet)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdIndicatorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIndicatorChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IndicatorByAccumulationIndicatorSet = New EntitySet(Of IndicatorByAccumulationIndicatorSet)(AddressOf Me.attach_IndicatorByAccumulationIndicatorSet, AddressOf Me.detach_IndicatorByAccumulationIndicatorSet)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdIndicator", DbType:="Int NOT NULL")>  _
	Public Property IdIndicator() As Integer
		Get
			Return Me._IdIndicator
		End Get
		Set
			If ((Me._IdIndicator = value)  _
						= false) Then
				Me.OnIdIndicatorChanging(value)
				Me.SendPropertyChanging
				Me._IdIndicator = value
				Me.SendPropertyChanged("IdIndicator")
				Me.OnIdIndicatorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="AccumulationIndicatorSet_IndicatorByAccumulationIndicatorSet", Storage:="_IndicatorByAccumulationIndicatorSet", ThisKey:="Id", OtherKey:="IdAccumulationIndicatorSet")>  _
	Public Property IndicatorByAccumulationIndicatorSet() As EntitySet(Of IndicatorByAccumulationIndicatorSet)
		Get
			Return Me._IndicatorByAccumulationIndicatorSet
		End Get
		Set
			Me._IndicatorByAccumulationIndicatorSet.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_IndicatorByAccumulationIndicatorSet(ByVal entity As IndicatorByAccumulationIndicatorSet)
		Me.SendPropertyChanging
		entity.AccumulationIndicatorSet = Me
	End Sub
	
	Private Sub detach_IndicatorByAccumulationIndicatorSet(ByVal entity As IndicatorByAccumulationIndicatorSet)
		Me.SendPropertyChanging
		entity.AccumulationIndicatorSet = Nothing
	End Sub
End Class

<Table(Name:="dbo.VisibilityLevel")>  _
Partial Public Class VisibilityLevel
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IDUser As Integer
	
	Private _Enabled As Boolean
	
	Private _CreateDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIDUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDUserChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IDUser", DbType:="Int NOT NULL")>  _
	Public Property IDUser() As Integer
		Get
			Return Me._IDUser
		End Get
		Set
			If ((Me._IDUser = value)  _
						= false) Then
				Me.OnIDUserChanging(value)
				Me.SendPropertyChanging
				Me._IDUser = value
				Me.SendPropertyChanged("IDUser")
				Me.OnIDUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Activity")>  _
Partial Public Class Activity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Number As String
	
	Private _Title As String
	
	Private _IdComponent As Integer
	
	Private _Description As String
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _idKey As System.Nullable(Of Integer)
	
	Private _isLastVersion As System.Nullable(Of Boolean)
	
	Private _IdPhase As System.Nullable(Of Integer)
	
	Private _IdProyect As System.Nullable(Of Integer)
	
	Private _SubActivity As EntitySet(Of SubActivity)
	
	Private _Component As EntityRef(Of Component)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As String)
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnIdComponentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdComponentChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnidKeyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidKeyChanged()
    End Sub
    Partial Private Sub OnisLastVersionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisLastVersionChanged()
    End Sub
    Partial Private Sub OnIdPhaseChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPhaseChanged()
    End Sub
    Partial Private Sub OnIdProyectChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProyectChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SubActivity = New EntitySet(Of SubActivity)(AddressOf Me.attach_SubActivity, AddressOf Me.detach_SubActivity)
		Me._Component = CType(Nothing, EntityRef(Of Component))
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Number", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Number() As String
		Get
			Return Me._Number
		End Get
		Set
			If (String.Equals(Me._Number, value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdComponent", DbType:="Int NOT NULL")>  _
	Public Property IdComponent() As Integer
		Get
			Return Me._IdComponent
		End Get
		Set
			If ((Me._IdComponent = value)  _
						= false) Then
				If Me._Component.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdComponentChanging(value)
				Me.SendPropertyChanging
				Me._IdComponent = value
				Me.SendPropertyChanged("IdComponent")
				Me.OnIdComponentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idKey", DbType:="Int")>  _
	Public Property idKey() As System.Nullable(Of Integer)
		Get
			Return Me._idKey
		End Get
		Set
			If (Me._idKey.Equals(value) = false) Then
				Me.OnidKeyChanging(value)
				Me.SendPropertyChanging
				Me._idKey = value
				Me.SendPropertyChanged("idKey")
				Me.OnidKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isLastVersion", DbType:="Bit")>  _
	Public Property isLastVersion() As System.Nullable(Of Boolean)
		Get
			Return Me._isLastVersion
		End Get
		Set
			If (Me._isLastVersion.Equals(value) = false) Then
				Me.OnisLastVersionChanging(value)
				Me.SendPropertyChanging
				Me._isLastVersion = value
				Me.SendPropertyChanged("isLastVersion")
				Me.OnisLastVersionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdPhase", DbType:="Int")>  _
	Public Property IdPhase() As System.Nullable(Of Integer)
		Get
			Return Me._IdPhase
		End Get
		Set
			If (Me._IdPhase.Equals(value) = false) Then
				Me.OnIdPhaseChanging(value)
				Me.SendPropertyChanging
				Me._IdPhase = value
				Me.SendPropertyChanged("IdPhase")
				Me.OnIdPhaseChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProyect", DbType:="Int")>  _
	Public Property IdProyect() As System.Nullable(Of Integer)
		Get
			Return Me._IdProyect
		End Get
		Set
			If (Me._IdProyect.Equals(value) = false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProyectChanging(value)
				Me.SendPropertyChanging
				Me._IdProyect = value
				Me.SendPropertyChanged("IdProyect")
				Me.OnIdProyectChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Activity_SubActivity", Storage:="_SubActivity", ThisKey:="Id", OtherKey:="IdActivity")>  _
	Public Property SubActivity() As EntitySet(Of SubActivity)
		Get
			Return Me._SubActivity
		End Get
		Set
			Me._SubActivity.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Component_Activity", Storage:="_Component", ThisKey:="IdComponent", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Component() As Component
		Get
			Return Me._Component.Entity
		End Get
		Set
			Dim previousValue As Component = Me._Component.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Component.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Component.Entity = Nothing
					previousValue.Activity.Remove(Me)
				End If
				Me._Component.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Activity.Add(Me)
					Me._IdComponent = value.Id
				Else
					Me._IdComponent = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Component")
			End If
		End Set
	End Property
	
	<Association(Name:="Project_Activity", Storage:="_Project", ThisKey:="IdProyect", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Activity.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Activity.Add(Me)
					Me._IdProyect = value.Id
				Else
					Me._IdProyect = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SubActivity(ByVal entity As SubActivity)
		Me.SendPropertyChanging
		entity.Activity = Me
	End Sub
	
	Private Sub detach_SubActivity(ByVal entity As SubActivity)
		Me.SendPropertyChanging
		entity.Activity = Nothing
	End Sub
End Class

<Table(Name:="dbo.Addressee")>  _
Partial Public Class Addressee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Email As String
	
	Private _IdUserGroup As System.Nullable(Of Integer)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnIdUserGroupChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserGroupChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Email", DbType:="VarChar(255)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUserGroup", DbType:="Int")>  _
	Public Property IdUserGroup() As System.Nullable(Of Integer)
		Get
			Return Me._IdUserGroup
		End Get
		Set
			If (Me._IdUserGroup.Equals(value) = false) Then
				Me.OnIdUserGroupChanging(value)
				Me.SendPropertyChanging
				Me._IdUserGroup = value
				Me.SendPropertyChanged("IdUserGroup")
				Me.OnIdUserGroupChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.AnswersByQuestion")>  _
Partial Public Class AnswersByQuestion
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdQuestionsByInquestContent As System.Nullable(Of Integer)
	
	Private _IdInquestContent As System.Nullable(Of Integer)
	
	Private _Answer As String
	
	Private _AnswersByResolvedInquest As EntitySet(Of AnswersByResolvedInquest)
	
	Private _QuestionsByInquestContent As EntityRef(Of QuestionsByInquestContent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdQuestionsByInquestContentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdQuestionsByInquestContentChanged()
    End Sub
    Partial Private Sub OnIdInquestContentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdInquestContentChanged()
    End Sub
    Partial Private Sub OnAnswerChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnswersByResolvedInquest = New EntitySet(Of AnswersByResolvedInquest)(AddressOf Me.attach_AnswersByResolvedInquest, AddressOf Me.detach_AnswersByResolvedInquest)
		Me._QuestionsByInquestContent = CType(Nothing, EntityRef(Of QuestionsByInquestContent))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdQuestionsByInquestContent", DbType:="Int")>  _
	Public Property IdQuestionsByInquestContent() As System.Nullable(Of Integer)
		Get
			Return Me._IdQuestionsByInquestContent
		End Get
		Set
			If (Me._IdQuestionsByInquestContent.Equals(value) = false) Then
				If Me._QuestionsByInquestContent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdQuestionsByInquestContentChanging(value)
				Me.SendPropertyChanging
				Me._IdQuestionsByInquestContent = value
				Me.SendPropertyChanged("IdQuestionsByInquestContent")
				Me.OnIdQuestionsByInquestContentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdInquestContent", DbType:="Int")>  _
	Public Property IdInquestContent() As System.Nullable(Of Integer)
		Get
			Return Me._IdInquestContent
		End Get
		Set
			If (Me._IdInquestContent.Equals(value) = false) Then
				Me.OnIdInquestContentChanging(value)
				Me.SendPropertyChanging
				Me._IdInquestContent = value
				Me.SendPropertyChanged("IdInquestContent")
				Me.OnIdInquestContentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Answer", DbType:="VarChar(255)")>  _
	Public Property Answer() As String
		Get
			Return Me._Answer
		End Get
		Set
			If (String.Equals(Me._Answer, value) = false) Then
				Me.OnAnswerChanging(value)
				Me.SendPropertyChanging
				Me._Answer = value
				Me.SendPropertyChanged("Answer")
				Me.OnAnswerChanged
			End If
		End Set
	End Property
	
	<Association(Name:="AnswersByQuestion_AnswersByResolvedInquest", Storage:="_AnswersByResolvedInquest", ThisKey:="Id", OtherKey:="IdAnswersByQuestion")>  _
	Public Property AnswersByResolvedInquest() As EntitySet(Of AnswersByResolvedInquest)
		Get
			Return Me._AnswersByResolvedInquest
		End Get
		Set
			Me._AnswersByResolvedInquest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="QuestionsByInquestContent_AnswersByQuestion", Storage:="_QuestionsByInquestContent", ThisKey:="IdQuestionsByInquestContent", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property QuestionsByInquestContent() As QuestionsByInquestContent
		Get
			Return Me._QuestionsByInquestContent.Entity
		End Get
		Set
			Dim previousValue As QuestionsByInquestContent = Me._QuestionsByInquestContent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QuestionsByInquestContent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QuestionsByInquestContent.Entity = Nothing
					previousValue.AnswersByQuestion.Remove(Me)
				End If
				Me._QuestionsByInquestContent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnswersByQuestion.Add(Me)
					Me._IdQuestionsByInquestContent = value.Id
				Else
					Me._IdQuestionsByInquestContent = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("QuestionsByInquestContent")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AnswersByResolvedInquest(ByVal entity As AnswersByResolvedInquest)
		Me.SendPropertyChanging
		entity.AnswersByQuestion = Me
	End Sub
	
	Private Sub detach_AnswersByResolvedInquest(ByVal entity As AnswersByResolvedInquest)
		Me.SendPropertyChanging
		entity.AnswersByQuestion = Nothing
	End Sub
End Class

<Table(Name:="dbo.AnswersByResolvedInquest")>  _
Partial Public Class AnswersByResolvedInquest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdResolvedInquest As Integer
	
	Private _IdQuestionsByInquestContent As Integer
	
	Private _IdAnswersByQuestion As System.Nullable(Of Integer)
	
	Private _AnswerText As String
	
	Private _AnswersByQuestion As EntityRef(Of AnswersByQuestion)
	
	Private _QuestionsByInquestContent As EntityRef(Of QuestionsByInquestContent)
	
	Private _ResolvedInquest As EntityRef(Of ResolvedInquest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdResolvedInquestChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdResolvedInquestChanged()
    End Sub
    Partial Private Sub OnIdQuestionsByInquestContentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdQuestionsByInquestContentChanged()
    End Sub
    Partial Private Sub OnIdAnswersByQuestionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdAnswersByQuestionChanged()
    End Sub
    Partial Private Sub OnAnswerTextChanging(value As String)
    End Sub
    Partial Private Sub OnAnswerTextChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnswersByQuestion = CType(Nothing, EntityRef(Of AnswersByQuestion))
		Me._QuestionsByInquestContent = CType(Nothing, EntityRef(Of QuestionsByInquestContent))
		Me._ResolvedInquest = CType(Nothing, EntityRef(Of ResolvedInquest))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdResolvedInquest", DbType:="Int NOT NULL")>  _
	Public Property IdResolvedInquest() As Integer
		Get
			Return Me._IdResolvedInquest
		End Get
		Set
			If ((Me._IdResolvedInquest = value)  _
						= false) Then
				If Me._ResolvedInquest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdResolvedInquestChanging(value)
				Me.SendPropertyChanging
				Me._IdResolvedInquest = value
				Me.SendPropertyChanged("IdResolvedInquest")
				Me.OnIdResolvedInquestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdQuestionsByInquestContent", DbType:="Int NOT NULL")>  _
	Public Property IdQuestionsByInquestContent() As Integer
		Get
			Return Me._IdQuestionsByInquestContent
		End Get
		Set
			If ((Me._IdQuestionsByInquestContent = value)  _
						= false) Then
				If Me._QuestionsByInquestContent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdQuestionsByInquestContentChanging(value)
				Me.SendPropertyChanging
				Me._IdQuestionsByInquestContent = value
				Me.SendPropertyChanged("IdQuestionsByInquestContent")
				Me.OnIdQuestionsByInquestContentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdAnswersByQuestion", DbType:="Int")>  _
	Public Property IdAnswersByQuestion() As System.Nullable(Of Integer)
		Get
			Return Me._IdAnswersByQuestion
		End Get
		Set
			If (Me._IdAnswersByQuestion.Equals(value) = false) Then
				If Me._AnswersByQuestion.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdAnswersByQuestionChanging(value)
				Me.SendPropertyChanging
				Me._IdAnswersByQuestion = value
				Me.SendPropertyChanged("IdAnswersByQuestion")
				Me.OnIdAnswersByQuestionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AnswerText", DbType:="VarChar(255)")>  _
	Public Property AnswerText() As String
		Get
			Return Me._AnswerText
		End Get
		Set
			If (String.Equals(Me._AnswerText, value) = false) Then
				Me.OnAnswerTextChanging(value)
				Me.SendPropertyChanging
				Me._AnswerText = value
				Me.SendPropertyChanged("AnswerText")
				Me.OnAnswerTextChanged
			End If
		End Set
	End Property
	
	<Association(Name:="AnswersByQuestion_AnswersByResolvedInquest", Storage:="_AnswersByQuestion", ThisKey:="IdAnswersByQuestion", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property AnswersByQuestion() As AnswersByQuestion
		Get
			Return Me._AnswersByQuestion.Entity
		End Get
		Set
			Dim previousValue As AnswersByQuestion = Me._AnswersByQuestion.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AnswersByQuestion.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AnswersByQuestion.Entity = Nothing
					previousValue.AnswersByResolvedInquest.Remove(Me)
				End If
				Me._AnswersByQuestion.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnswersByResolvedInquest.Add(Me)
					Me._IdAnswersByQuestion = value.Id
				Else
					Me._IdAnswersByQuestion = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("AnswersByQuestion")
			End If
		End Set
	End Property
	
	<Association(Name:="QuestionsByInquestContent_AnswersByResolvedInquest", Storage:="_QuestionsByInquestContent", ThisKey:="IdQuestionsByInquestContent", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property QuestionsByInquestContent() As QuestionsByInquestContent
		Get
			Return Me._QuestionsByInquestContent.Entity
		End Get
		Set
			Dim previousValue As QuestionsByInquestContent = Me._QuestionsByInquestContent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._QuestionsByInquestContent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._QuestionsByInquestContent.Entity = Nothing
					previousValue.AnswersByResolvedInquest.Remove(Me)
				End If
				Me._QuestionsByInquestContent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnswersByResolvedInquest.Add(Me)
					Me._IdQuestionsByInquestContent = value.Id
				Else
					Me._IdQuestionsByInquestContent = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("QuestionsByInquestContent")
			End If
		End Set
	End Property
	
	<Association(Name:="ResolvedInquest_AnswersByResolvedInquest", Storage:="_ResolvedInquest", ThisKey:="IdResolvedInquest", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property ResolvedInquest() As ResolvedInquest
		Get
			Return Me._ResolvedInquest.Entity
		End Get
		Set
			Dim previousValue As ResolvedInquest = Me._ResolvedInquest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ResolvedInquest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ResolvedInquest.Entity = Nothing
					previousValue.AnswersByResolvedInquest.Remove(Me)
				End If
				Me._ResolvedInquest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AnswersByResolvedInquest.Add(Me)
					Me._IdResolvedInquest = value.Id
				Else
					Me._IdResolvedInquest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ResolvedInquest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.AttachFileFormat")>  _
Partial Public Class AttachFileFormat
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _Enabled As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CloseRegistry")>  _
Partial Public Class CloseRegistry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProject As Integer
	
	Private _ClosingDate As System.Nullable(Of Date)
	
	Private _Weakness As String
	
	Private _Opportunity As String
	
	Private _Strengths As String
	
	Private _LearningForNewProjects As String
	
	Private _GoodPractice As System.Nullable(Of Boolean)
	
	Private _RegistrationDate As System.Nullable(Of Date)
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnClosingDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnClosingDateChanged()
    End Sub
    Partial Private Sub OnWeaknessChanging(value As String)
    End Sub
    Partial Private Sub OnWeaknessChanged()
    End Sub
    Partial Private Sub OnOpportunityChanging(value As String)
    End Sub
    Partial Private Sub OnOpportunityChanged()
    End Sub
    Partial Private Sub OnStrengthsChanging(value As String)
    End Sub
    Partial Private Sub OnStrengthsChanged()
    End Sub
    Partial Private Sub OnLearningForNewProjectsChanging(value As String)
    End Sub
    Partial Private Sub OnLearningForNewProjectsChanged()
    End Sub
    Partial Private Sub OnGoodPracticeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnGoodPracticeChanged()
    End Sub
    Partial Private Sub OnRegistrationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRegistrationDateChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ClosingDate", DbType:="DateTime")>  _
	Public Property ClosingDate() As System.Nullable(Of Date)
		Get
			Return Me._ClosingDate
		End Get
		Set
			If (Me._ClosingDate.Equals(value) = false) Then
				Me.OnClosingDateChanging(value)
				Me.SendPropertyChanging
				Me._ClosingDate = value
				Me.SendPropertyChanged("ClosingDate")
				Me.OnClosingDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Weakness", DbType:="NVarChar(300)")>  _
	Public Property Weakness() As String
		Get
			Return Me._Weakness
		End Get
		Set
			If (String.Equals(Me._Weakness, value) = false) Then
				Me.OnWeaknessChanging(value)
				Me.SendPropertyChanging
				Me._Weakness = value
				Me.SendPropertyChanged("Weakness")
				Me.OnWeaknessChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Opportunity", DbType:="NVarChar(300)")>  _
	Public Property Opportunity() As String
		Get
			Return Me._Opportunity
		End Get
		Set
			If (String.Equals(Me._Opportunity, value) = false) Then
				Me.OnOpportunityChanging(value)
				Me.SendPropertyChanging
				Me._Opportunity = value
				Me.SendPropertyChanged("Opportunity")
				Me.OnOpportunityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Strengths", DbType:="NVarChar(300)")>  _
	Public Property Strengths() As String
		Get
			Return Me._Strengths
		End Get
		Set
			If (String.Equals(Me._Strengths, value) = false) Then
				Me.OnStrengthsChanging(value)
				Me.SendPropertyChanging
				Me._Strengths = value
				Me.SendPropertyChanged("Strengths")
				Me.OnStrengthsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LearningForNewProjects", DbType:="NVarChar(300)")>  _
	Public Property LearningForNewProjects() As String
		Get
			Return Me._LearningForNewProjects
		End Get
		Set
			If (String.Equals(Me._LearningForNewProjects, value) = false) Then
				Me.OnLearningForNewProjectsChanging(value)
				Me.SendPropertyChanging
				Me._LearningForNewProjects = value
				Me.SendPropertyChanged("LearningForNewProjects")
				Me.OnLearningForNewProjectsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GoodPractice", DbType:="Bit")>  _
	Public Property GoodPractice() As System.Nullable(Of Boolean)
		Get
			Return Me._GoodPractice
		End Get
		Set
			If (Me._GoodPractice.Equals(value) = false) Then
				Me.OnGoodPracticeChanging(value)
				Me.SendPropertyChanging
				Me._GoodPractice = value
				Me.SendPropertyChanged("GoodPractice")
				Me.OnGoodPracticeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RegistrationDate", DbType:="DateTime")>  _
	Public Property RegistrationDate() As System.Nullable(Of Date)
		Get
			Return Me._RegistrationDate
		End Get
		Set
			If (Me._RegistrationDate.Equals(value) = false) Then
				Me.OnRegistrationDateChanging(value)
				Me.SendPropertyChanging
				Me._RegistrationDate = value
				Me.SendPropertyChanged("RegistrationDate")
				Me.OnRegistrationDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_CloseRegistry", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.CloseRegistry.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CloseRegistry.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.CommentsByContractRequest")>  _
Partial Public Class CommentsByContractRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdContractRequest As Integer
	
	Private _AdditionalComments As String
	
	Private _StartActRequires As System.Nullable(Of Boolean)
	
	Private _DateNoticeExpiration As System.Nullable(Of Date)
	
	Private _ContractNumber As String
	
	Private _PurchaseOrder As String
	
	Private _ContractRequest As EntityRef(Of ContractRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdContractRequestChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdContractRequestChanged()
    End Sub
    Partial Private Sub OnAdditionalCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnAdditionalCommentsChanged()
    End Sub
    Partial Private Sub OnStartActRequiresChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStartActRequiresChanged()
    End Sub
    Partial Private Sub OnDateNoticeExpirationChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateNoticeExpirationChanged()
    End Sub
    Partial Private Sub OnContractNumberChanging(value As String)
    End Sub
    Partial Private Sub OnContractNumberChanged()
    End Sub
    Partial Private Sub OnPurchaseOrderChanging(value As String)
    End Sub
    Partial Private Sub OnPurchaseOrderChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractRequest = CType(Nothing, EntityRef(Of ContractRequest))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdContractRequest", DbType:="Int NOT NULL")>  _
	Public Property IdContractRequest() As Integer
		Get
			Return Me._IdContractRequest
		End Get
		Set
			If ((Me._IdContractRequest = value)  _
						= false) Then
				If Me._ContractRequest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdContractRequestChanging(value)
				Me.SendPropertyChanging
				Me._IdContractRequest = value
				Me.SendPropertyChanged("IdContractRequest")
				Me.OnIdContractRequestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AdditionalComments", DbType:="VarChar(255)")>  _
	Public Property AdditionalComments() As String
		Get
			Return Me._AdditionalComments
		End Get
		Set
			If (String.Equals(Me._AdditionalComments, value) = false) Then
				Me.OnAdditionalCommentsChanging(value)
				Me.SendPropertyChanging
				Me._AdditionalComments = value
				Me.SendPropertyChanged("AdditionalComments")
				Me.OnAdditionalCommentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StartActRequires", DbType:="Bit")>  _
	Public Property StartActRequires() As System.Nullable(Of Boolean)
		Get
			Return Me._StartActRequires
		End Get
		Set
			If (Me._StartActRequires.Equals(value) = false) Then
				Me.OnStartActRequiresChanging(value)
				Me.SendPropertyChanging
				Me._StartActRequires = value
				Me.SendPropertyChanged("StartActRequires")
				Me.OnStartActRequiresChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateNoticeExpiration", DbType:="DateTime")>  _
	Public Property DateNoticeExpiration() As System.Nullable(Of Date)
		Get
			Return Me._DateNoticeExpiration
		End Get
		Set
			If (Me._DateNoticeExpiration.Equals(value) = false) Then
				Me.OnDateNoticeExpirationChanging(value)
				Me.SendPropertyChanging
				Me._DateNoticeExpiration = value
				Me.SendPropertyChanged("DateNoticeExpiration")
				Me.OnDateNoticeExpirationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractNumber", DbType:="VarChar(50)")>  _
	Public Property ContractNumber() As String
		Get
			Return Me._ContractNumber
		End Get
		Set
			If (String.Equals(Me._ContractNumber, value) = false) Then
				Me.OnContractNumberChanging(value)
				Me.SendPropertyChanging
				Me._ContractNumber = value
				Me.SendPropertyChanged("ContractNumber")
				Me.OnContractNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PurchaseOrder", DbType:="VarChar(50)")>  _
	Public Property PurchaseOrder() As String
		Get
			Return Me._PurchaseOrder
		End Get
		Set
			If (String.Equals(Me._PurchaseOrder, value) = false) Then
				Me.OnPurchaseOrderChanging(value)
				Me.SendPropertyChanging
				Me._PurchaseOrder = value
				Me.SendPropertyChanged("PurchaseOrder")
				Me.OnPurchaseOrderChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_CommentsByContractRequest", Storage:="_ContractRequest", ThisKey:="IdContractRequest", OtherKey:="RequestNumber", IsForeignKey:=true)>  _
	Public Property ContractRequest() As ContractRequest
		Get
			Return Me._ContractRequest.Entity
		End Get
		Set
			Dim previousValue As ContractRequest = Me._ContractRequest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractRequest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractRequest.Entity = Nothing
					previousValue.CommentsByContractRequest.Remove(Me)
				End If
				Me._ContractRequest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CommentsByContractRequest.Add(Me)
					Me._IdContractRequest = value.RequestNumber
				Else
					Me._IdContractRequest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ContractRequest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Component")>  _
Partial Public Class Component
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IdObjective As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _idKey As System.Nullable(Of Integer)
	
	Private _isLastVersion As System.Nullable(Of Boolean)
	
	Private _IdPhase As System.Nullable(Of Integer)
	
	Private _Activity As EntitySet(Of Activity)
	
	Private _ComponentByRisk As EntitySet(Of ComponentByRisk)
	
	Private _Objective As EntityRef(Of Objective)
	
	Private _ProjectPhase As EntityRef(Of ProjectPhase)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdObjectiveChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdObjectiveChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnidKeyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidKeyChanged()
    End Sub
    Partial Private Sub OnisLastVersionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisLastVersionChanged()
    End Sub
    Partial Private Sub OnIdPhaseChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPhaseChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activity = New EntitySet(Of Activity)(AddressOf Me.attach_Activity, AddressOf Me.detach_Activity)
		Me._ComponentByRisk = New EntitySet(Of ComponentByRisk)(AddressOf Me.attach_ComponentByRisk, AddressOf Me.detach_ComponentByRisk)
		Me._Objective = CType(Nothing, EntityRef(Of Objective))
		Me._ProjectPhase = CType(Nothing, EntityRef(Of ProjectPhase))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdObjective", DbType:="Int NOT NULL")>  _
	Public Property IdObjective() As Integer
		Get
			Return Me._IdObjective
		End Get
		Set
			If ((Me._IdObjective = value)  _
						= false) Then
				If Me._Objective.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdObjectiveChanging(value)
				Me.SendPropertyChanging
				Me._IdObjective = value
				Me.SendPropertyChanged("IdObjective")
				Me.OnIdObjectiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idKey", DbType:="Int")>  _
	Public Property idKey() As System.Nullable(Of Integer)
		Get
			Return Me._idKey
		End Get
		Set
			If (Me._idKey.Equals(value) = false) Then
				Me.OnidKeyChanging(value)
				Me.SendPropertyChanging
				Me._idKey = value
				Me.SendPropertyChanged("idKey")
				Me.OnidKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isLastVersion", DbType:="Bit")>  _
	Public Property isLastVersion() As System.Nullable(Of Boolean)
		Get
			Return Me._isLastVersion
		End Get
		Set
			If (Me._isLastVersion.Equals(value) = false) Then
				Me.OnisLastVersionChanging(value)
				Me.SendPropertyChanging
				Me._isLastVersion = value
				Me.SendPropertyChanged("isLastVersion")
				Me.OnisLastVersionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdPhase", DbType:="Int")>  _
	Public Property IdPhase() As System.Nullable(Of Integer)
		Get
			Return Me._IdPhase
		End Get
		Set
			If (Me._IdPhase.Equals(value) = false) Then
				If Me._ProjectPhase.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdPhaseChanging(value)
				Me.SendPropertyChanging
				Me._IdPhase = value
				Me.SendPropertyChanged("IdPhase")
				Me.OnIdPhaseChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Component_Activity", Storage:="_Activity", ThisKey:="Id", OtherKey:="IdComponent")>  _
	Public Property Activity() As EntitySet(Of Activity)
		Get
			Return Me._Activity
		End Get
		Set
			Me._Activity.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Component_ComponentByRisk", Storage:="_ComponentByRisk", ThisKey:="Id", OtherKey:="IdComponent")>  _
	Public Property ComponentByRisk() As EntitySet(Of ComponentByRisk)
		Get
			Return Me._ComponentByRisk
		End Get
		Set
			Me._ComponentByRisk.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Objective_Component", Storage:="_Objective", ThisKey:="IdObjective", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Objective() As Objective
		Get
			Return Me._Objective.Entity
		End Get
		Set
			Dim previousValue As Objective = Me._Objective.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Objective.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Objective.Entity = Nothing
					previousValue.Component.Remove(Me)
				End If
				Me._Objective.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Component.Add(Me)
					Me._IdObjective = value.Id
				Else
					Me._IdObjective = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Objective")
			End If
		End Set
	End Property
	
	<Association(Name:="ProjectPhase_Component", Storage:="_ProjectPhase", ThisKey:="IdPhase", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property ProjectPhase() As ProjectPhase
		Get
			Return Me._ProjectPhase.Entity
		End Get
		Set
			Dim previousValue As ProjectPhase = Me._ProjectPhase.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProjectPhase.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProjectPhase.Entity = Nothing
					previousValue.Component.Remove(Me)
				End If
				Me._ProjectPhase.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Component.Add(Me)
					Me._IdPhase = value.id
				Else
					Me._IdPhase = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ProjectPhase")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Activity(ByVal entity As Activity)
		Me.SendPropertyChanging
		entity.Component = Me
	End Sub
	
	Private Sub detach_Activity(ByVal entity As Activity)
		Me.SendPropertyChanging
		entity.Component = Nothing
	End Sub
	
	Private Sub attach_ComponentByRisk(ByVal entity As ComponentByRisk)
		Me.SendPropertyChanging
		entity.Component = Me
	End Sub
	
	Private Sub detach_ComponentByRisk(ByVal entity As ComponentByRisk)
		Me.SendPropertyChanging
		entity.Component = Nothing
	End Sub
End Class

<Table(Name:="dbo.ComponentByRisk")>  _
Partial Public Class ComponentByRisk
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdRisk As Integer
	
	Private _IdComponent As Integer
	
	Private _Component As EntityRef(Of Component)
	
	Private _Risk As EntityRef(Of Risk)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdRiskChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdRiskChanged()
    End Sub
    Partial Private Sub OnIdComponentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdComponentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Component = CType(Nothing, EntityRef(Of Component))
		Me._Risk = CType(Nothing, EntityRef(Of Risk))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdRisk", DbType:="Int NOT NULL")>  _
	Public Property IdRisk() As Integer
		Get
			Return Me._IdRisk
		End Get
		Set
			If ((Me._IdRisk = value)  _
						= false) Then
				If Me._Risk.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdRiskChanging(value)
				Me.SendPropertyChanging
				Me._IdRisk = value
				Me.SendPropertyChanged("IdRisk")
				Me.OnIdRiskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdComponent", DbType:="Int NOT NULL")>  _
	Public Property IdComponent() As Integer
		Get
			Return Me._IdComponent
		End Get
		Set
			If ((Me._IdComponent = value)  _
						= false) Then
				If Me._Component.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdComponentChanging(value)
				Me.SendPropertyChanging
				Me._IdComponent = value
				Me.SendPropertyChanged("IdComponent")
				Me.OnIdComponentChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Component_ComponentByRisk", Storage:="_Component", ThisKey:="IdComponent", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Component() As Component
		Get
			Return Me._Component.Entity
		End Get
		Set
			Dim previousValue As Component = Me._Component.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Component.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Component.Entity = Nothing
					previousValue.ComponentByRisk.Remove(Me)
				End If
				Me._Component.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ComponentByRisk.Add(Me)
					Me._IdComponent = value.Id
				Else
					Me._IdComponent = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Component")
			End If
		End Set
	End Property
	
	<Association(Name:="Risk_ComponentByRisk", Storage:="_Risk", ThisKey:="IdRisk", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Risk() As Risk
		Get
			Return Me._Risk.Entity
		End Get
		Set
			Dim previousValue As Risk = Me._Risk.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Risk.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Risk.Entity = Nothing
					previousValue.ComponentByRisk.Remove(Me)
				End If
				Me._Risk.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ComponentByRisk.Add(Me)
					Me._IdRisk = value.Id
				Else
					Me._IdRisk = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Risk")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Compromise")>  _
Partial Public Class Compromise
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Decimal
	
	Private _idproject As Decimal
	
	Private _liabilities As String
	
	Private _responsible As String
	
	Private _tracingdate As System.Nullable(Of Date)
	
	Private _email As String
	
	Private _Enddate As System.Nullable(Of Date)
	
	Private _IdUser As String
	
	Private _DateMod As System.Nullable(Of Date)
	
	Private _proceeding_log_id As System.Nullable(Of Integer)
	
	Private _Proceeding_Logs As EntityRef(Of Proceeding_Logs)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Decimal)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnidprojectChanging(value As Decimal)
    End Sub
    Partial Private Sub OnidprojectChanged()
    End Sub
    Partial Private Sub OnliabilitiesChanging(value As String)
    End Sub
    Partial Private Sub OnliabilitiesChanged()
    End Sub
    Partial Private Sub OnresponsibleChanging(value As String)
    End Sub
    Partial Private Sub OnresponsibleChanged()
    End Sub
    Partial Private Sub OntracingdateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OntracingdateChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnEnddateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEnddateChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As String)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnDateModChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateModChanged()
    End Sub
    Partial Private Sub Onproceeding_log_idChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub Onproceeding_log_idChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proceeding_Logs = CType(Nothing, EntityRef(Of Proceeding_Logs))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Decimal(18,0) NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Decimal
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idproject", DbType:="Decimal(18,0) NOT NULL")>  _
	Public Property idproject() As Decimal
		Get
			Return Me._idproject
		End Get
		Set
			If ((Me._idproject = value)  _
						= false) Then
				Me.OnidprojectChanging(value)
				Me.SendPropertyChanging
				Me._idproject = value
				Me.SendPropertyChanged("idproject")
				Me.OnidprojectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_liabilities", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property liabilities() As String
		Get
			Return Me._liabilities
		End Get
		Set
			If (String.Equals(Me._liabilities, value) = false) Then
				Me.OnliabilitiesChanging(value)
				Me.SendPropertyChanging
				Me._liabilities = value
				Me.SendPropertyChanged("liabilities")
				Me.OnliabilitiesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_responsible", DbType:="NVarChar(50)")>  _
	Public Property responsible() As String
		Get
			Return Me._responsible
		End Get
		Set
			If (String.Equals(Me._responsible, value) = false) Then
				Me.OnresponsibleChanging(value)
				Me.SendPropertyChanging
				Me._responsible = value
				Me.SendPropertyChanged("responsible")
				Me.OnresponsibleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_tracingdate", DbType:="DateTime")>  _
	Public Property tracingdate() As System.Nullable(Of Date)
		Get
			Return Me._tracingdate
		End Get
		Set
			If (Me._tracingdate.Equals(value) = false) Then
				Me.OntracingdateChanging(value)
				Me.SendPropertyChanging
				Me._tracingdate = value
				Me.SendPropertyChanged("tracingdate")
				Me.OntracingdateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_email", DbType:="NVarChar(50)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enddate", DbType:="DateTime")>  _
	Public Property Enddate() As System.Nullable(Of Date)
		Get
			Return Me._Enddate
		End Get
		Set
			If (Me._Enddate.Equals(value) = false) Then
				Me.OnEnddateChanging(value)
				Me.SendPropertyChanging
				Me._Enddate = value
				Me.SendPropertyChanged("Enddate")
				Me.OnEnddateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="VarChar(50)")>  _
	Public Property IdUser() As String
		Get
			Return Me._IdUser
		End Get
		Set
			If (String.Equals(Me._IdUser, value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DateMod", DbType:="DateTime")>  _
	Public Property DateMod() As System.Nullable(Of Date)
		Get
			Return Me._DateMod
		End Get
		Set
			If (Me._DateMod.Equals(value) = false) Then
				Me.OnDateModChanging(value)
				Me.SendPropertyChanging
				Me._DateMod = value
				Me.SendPropertyChanged("DateMod")
				Me.OnDateModChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_proceeding_log_id", DbType:="Int")>  _
	Public Property proceeding_log_id() As System.Nullable(Of Integer)
		Get
			Return Me._proceeding_log_id
		End Get
		Set
			If (Me._proceeding_log_id.Equals(value) = false) Then
				If Me._Proceeding_Logs.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.Onproceeding_log_idChanging(value)
				Me.SendPropertyChanging
				Me._proceeding_log_id = value
				Me.SendPropertyChanged("proceeding_log_id")
				Me.Onproceeding_log_idChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Proceeding_Logs_Compromise", Storage:="_Proceeding_Logs", ThisKey:="proceeding_log_id", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Proceeding_Logs() As Proceeding_Logs
		Get
			Return Me._Proceeding_Logs.Entity
		End Get
		Set
			Dim previousValue As Proceeding_Logs = Me._Proceeding_Logs.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proceeding_Logs.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proceeding_Logs.Entity = Nothing
					previousValue.Compromise.Remove(Me)
				End If
				Me._Proceeding_Logs.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Compromise.Add(Me)
					Me._proceeding_log_id = value.Id
				Else
					Me._proceeding_log_id = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proceeding_Logs")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ContractDataByContractRequest")>  _
Partial Public Class ContractDataByContractRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdContractRequest As Integer
	
	Private _ContractDuration As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _Supervisor As String
	
	Private _BudgetValidity As String
	
	Private _ContactData As String
	
	Private _Email As String
	
	Private _Telephone As String
	
	Private _ContractRequest As EntityRef(Of ContractRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdContractRequestChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdContractRequestChanged()
    End Sub
    Partial Private Sub OnContractDurationChanging(value As String)
    End Sub
    Partial Private Sub OnContractDurationChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnSupervisorChanging(value As String)
    End Sub
    Partial Private Sub OnSupervisorChanged()
    End Sub
    Partial Private Sub OnBudgetValidityChanging(value As String)
    End Sub
    Partial Private Sub OnBudgetValidityChanged()
    End Sub
    Partial Private Sub OnContactDataChanging(value As String)
    End Sub
    Partial Private Sub OnContactDataChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnTelephoneChanging(value As String)
    End Sub
    Partial Private Sub OnTelephoneChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractRequest = CType(Nothing, EntityRef(Of ContractRequest))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdContractRequest", DbType:="Int NOT NULL")>  _
	Public Property IdContractRequest() As Integer
		Get
			Return Me._IdContractRequest
		End Get
		Set
			If ((Me._IdContractRequest = value)  _
						= false) Then
				If Me._ContractRequest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdContractRequestChanging(value)
				Me.SendPropertyChanging
				Me._IdContractRequest = value
				Me.SendPropertyChanged("IdContractRequest")
				Me.OnIdContractRequestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractDuration", DbType:="VarChar(150)")>  _
	Public Property ContractDuration() As String
		Get
			Return Me._ContractDuration
		End Get
		Set
			If (String.Equals(Me._ContractDuration, value) = false) Then
				Me.OnContractDurationChanging(value)
				Me.SendPropertyChanging
				Me._ContractDuration = value
				Me.SendPropertyChanged("ContractDuration")
				Me.OnContractDurationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Supervisor", DbType:="VarChar(255)")>  _
	Public Property Supervisor() As String
		Get
			Return Me._Supervisor
		End Get
		Set
			If (String.Equals(Me._Supervisor, value) = false) Then
				Me.OnSupervisorChanging(value)
				Me.SendPropertyChanging
				Me._Supervisor = value
				Me.SendPropertyChanged("Supervisor")
				Me.OnSupervisorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BudgetValidity", DbType:="VarChar(255)")>  _
	Public Property BudgetValidity() As String
		Get
			Return Me._BudgetValidity
		End Get
		Set
			If (String.Equals(Me._BudgetValidity, value) = false) Then
				Me.OnBudgetValidityChanging(value)
				Me.SendPropertyChanging
				Me._BudgetValidity = value
				Me.SendPropertyChanged("BudgetValidity")
				Me.OnBudgetValidityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContactData", DbType:="VarChar(255)")>  _
	Public Property ContactData() As String
		Get
			Return Me._ContactData
		End Get
		Set
			If (String.Equals(Me._ContactData, value) = false) Then
				Me.OnContactDataChanging(value)
				Me.SendPropertyChanging
				Me._ContactData = value
				Me.SendPropertyChanged("ContactData")
				Me.OnContactDataChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Email", DbType:="VarChar(200)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Telephone", DbType:="VarChar(50)")>  _
	Public Property Telephone() As String
		Get
			Return Me._Telephone
		End Get
		Set
			If (String.Equals(Me._Telephone, value) = false) Then
				Me.OnTelephoneChanging(value)
				Me.SendPropertyChanging
				Me._Telephone = value
				Me.SendPropertyChanged("Telephone")
				Me.OnTelephoneChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_ContractDataByContractRequest", Storage:="_ContractRequest", ThisKey:="IdContractRequest", OtherKey:="RequestNumber", IsForeignKey:=true)>  _
	Public Property ContractRequest() As ContractRequest
		Get
			Return Me._ContractRequest.Entity
		End Get
		Set
			Dim previousValue As ContractRequest = Me._ContractRequest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractRequest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractRequest.Entity = Nothing
					previousValue.ContractDataByContractRequest.Remove(Me)
				End If
				Me._ContractRequest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContractDataByContractRequest.Add(Me)
					Me._IdContractRequest = value.RequestNumber
				Else
					Me._IdContractRequest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ContractRequest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ContractExecution")>  _
Partial Public Class ContractExecution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IdContractRequest As Integer
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _PaymentDate As System.Nullable(Of Date)
	
	Private _ContractNumber As String
	
	Private _OrderNumber As String
	
	Private _ClosingComments As String
	
	Private _ClosingDate As System.Nullable(Of Date)
	
	Private _FinalPaymentDate As System.Nullable(Of Date)
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ContractRequest As EntityRef(Of ContractRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdContractRequestChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdContractRequestChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnPaymentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPaymentDateChanged()
    End Sub
    Partial Private Sub OnContractNumberChanging(value As String)
    End Sub
    Partial Private Sub OnContractNumberChanged()
    End Sub
    Partial Private Sub OnOrderNumberChanging(value As String)
    End Sub
    Partial Private Sub OnOrderNumberChanged()
    End Sub
    Partial Private Sub OnClosingCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnClosingCommentsChanged()
    End Sub
    Partial Private Sub OnClosingDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnClosingDateChanged()
    End Sub
    Partial Private Sub OnFinalPaymentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFinalPaymentDateChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractRequest = CType(Nothing, EntityRef(Of ContractRequest))
		OnCreated
	End Sub
	
	<Column(Storage:="_IdContractRequest", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IdContractRequest() As Integer
		Get
			Return Me._IdContractRequest
		End Get
		Set
			If ((Me._IdContractRequest = value)  _
						= false) Then
				If Me._ContractRequest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdContractRequestChanging(value)
				Me.SendPropertyChanging
				Me._IdContractRequest = value
				Me.SendPropertyChanged("IdContractRequest")
				Me.OnIdContractRequestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PaymentDate", DbType:="DateTime")>  _
	Public Property PaymentDate() As System.Nullable(Of Date)
		Get
			Return Me._PaymentDate
		End Get
		Set
			If (Me._PaymentDate.Equals(value) = false) Then
				Me.OnPaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._PaymentDate = value
				Me.SendPropertyChanged("PaymentDate")
				Me.OnPaymentDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractNumber", DbType:="VarChar(50)")>  _
	Public Property ContractNumber() As String
		Get
			Return Me._ContractNumber
		End Get
		Set
			If (String.Equals(Me._ContractNumber, value) = false) Then
				Me.OnContractNumberChanging(value)
				Me.SendPropertyChanging
				Me._ContractNumber = value
				Me.SendPropertyChanged("ContractNumber")
				Me.OnContractNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OrderNumber", DbType:="VarChar(50)")>  _
	Public Property OrderNumber() As String
		Get
			Return Me._OrderNumber
		End Get
		Set
			If (String.Equals(Me._OrderNumber, value) = false) Then
				Me.OnOrderNumberChanging(value)
				Me.SendPropertyChanging
				Me._OrderNumber = value
				Me.SendPropertyChanged("OrderNumber")
				Me.OnOrderNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ClosingComments", DbType:="VarChar(255)")>  _
	Public Property ClosingComments() As String
		Get
			Return Me._ClosingComments
		End Get
		Set
			If (String.Equals(Me._ClosingComments, value) = false) Then
				Me.OnClosingCommentsChanging(value)
				Me.SendPropertyChanging
				Me._ClosingComments = value
				Me.SendPropertyChanged("ClosingComments")
				Me.OnClosingCommentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ClosingDate", DbType:="DateTime")>  _
	Public Property ClosingDate() As System.Nullable(Of Date)
		Get
			Return Me._ClosingDate
		End Get
		Set
			If (Me._ClosingDate.Equals(value) = false) Then
				Me.OnClosingDateChanging(value)
				Me.SendPropertyChanging
				Me._ClosingDate = value
				Me.SendPropertyChanged("ClosingDate")
				Me.OnClosingDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FinalPaymentDate", DbType:="DateTime")>  _
	Public Property FinalPaymentDate() As System.Nullable(Of Date)
		Get
			Return Me._FinalPaymentDate
		End Get
		Set
			If (Me._FinalPaymentDate.Equals(value) = false) Then
				Me.OnFinalPaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._FinalPaymentDate = value
				Me.SendPropertyChanged("FinalPaymentDate")
				Me.OnFinalPaymentDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Value", DbType:="Decimal(17,2)")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_ContractExecution", Storage:="_ContractRequest", ThisKey:="IdContractRequest", OtherKey:="RequestNumber", IsForeignKey:=true)>  _
	Public Property ContractRequest() As ContractRequest
		Get
			Return Me._ContractRequest.Entity
		End Get
		Set
			Dim previousValue As ContractRequest = Me._ContractRequest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractRequest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractRequest.Entity = Nothing
					previousValue.ContractExecution = Nothing
				End If
				Me._ContractRequest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContractExecution = Me
					Me._IdContractRequest = value.RequestNumber
				Else
					Me._IdContractRequest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ContractRequest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ContractorLegalEntityByContractRequest")>  _
Partial Public Class ContractorLegalEntityByContractRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdContractRequest As Integer
	
	Private _EntityNameDescription As String
	
	Private _Nit As String
	
	Private _LegalRepresentative As String
	
	Private _ContractorName As String
	
	Private _IdentificationNumber As String
	
	Private _ContractRequest As EntityRef(Of ContractRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdContractRequestChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdContractRequestChanged()
    End Sub
    Partial Private Sub OnEntityNameDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnEntityNameDescriptionChanged()
    End Sub
    Partial Private Sub OnNitChanging(value As String)
    End Sub
    Partial Private Sub OnNitChanged()
    End Sub
    Partial Private Sub OnLegalRepresentativeChanging(value As String)
    End Sub
    Partial Private Sub OnLegalRepresentativeChanged()
    End Sub
    Partial Private Sub OnContractorNameChanging(value As String)
    End Sub
    Partial Private Sub OnContractorNameChanged()
    End Sub
    Partial Private Sub OnIdentificationNumberChanging(value As String)
    End Sub
    Partial Private Sub OnIdentificationNumberChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractRequest = CType(Nothing, EntityRef(Of ContractRequest))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdContractRequest", DbType:="Int NOT NULL")>  _
	Public Property IdContractRequest() As Integer
		Get
			Return Me._IdContractRequest
		End Get
		Set
			If ((Me._IdContractRequest = value)  _
						= false) Then
				If Me._ContractRequest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdContractRequestChanging(value)
				Me.SendPropertyChanging
				Me._IdContractRequest = value
				Me.SendPropertyChanged("IdContractRequest")
				Me.OnIdContractRequestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntityNameDescription", DbType:="VarChar(255)")>  _
	Public Property EntityNameDescription() As String
		Get
			Return Me._EntityNameDescription
		End Get
		Set
			If (String.Equals(Me._EntityNameDescription, value) = false) Then
				Me.OnEntityNameDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._EntityNameDescription = value
				Me.SendPropertyChanged("EntityNameDescription")
				Me.OnEntityNameDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Nit", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nit() As String
		Get
			Return Me._Nit
		End Get
		Set
			If (String.Equals(Me._Nit, value) = false) Then
				Me.OnNitChanging(value)
				Me.SendPropertyChanging
				Me._Nit = value
				Me.SendPropertyChanged("Nit")
				Me.OnNitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LegalRepresentative", DbType:="VarChar(255)")>  _
	Public Property LegalRepresentative() As String
		Get
			Return Me._LegalRepresentative
		End Get
		Set
			If (String.Equals(Me._LegalRepresentative, value) = false) Then
				Me.OnLegalRepresentativeChanging(value)
				Me.SendPropertyChanging
				Me._LegalRepresentative = value
				Me.SendPropertyChanged("LegalRepresentative")
				Me.OnLegalRepresentativeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractorName", DbType:="VarChar(150)")>  _
	Public Property ContractorName() As String
		Get
			Return Me._ContractorName
		End Get
		Set
			If (String.Equals(Me._ContractorName, value) = false) Then
				Me.OnContractorNameChanging(value)
				Me.SendPropertyChanging
				Me._ContractorName = value
				Me.SendPropertyChanged("ContractorName")
				Me.OnContractorNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdentificationNumber", DbType:="VarChar(50)")>  _
	Public Property IdentificationNumber() As String
		Get
			Return Me._IdentificationNumber
		End Get
		Set
			If (String.Equals(Me._IdentificationNumber, value) = false) Then
				Me.OnIdentificationNumberChanging(value)
				Me.SendPropertyChanging
				Me._IdentificationNumber = value
				Me.SendPropertyChanged("IdentificationNumber")
				Me.OnIdentificationNumberChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_ContractorLegalEntityByContractRequest", Storage:="_ContractRequest", ThisKey:="IdContractRequest", OtherKey:="RequestNumber", IsForeignKey:=true)>  _
	Public Property ContractRequest() As ContractRequest
		Get
			Return Me._ContractRequest.Entity
		End Get
		Set
			Dim previousValue As ContractRequest = Me._ContractRequest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractRequest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractRequest.Entity = Nothing
					previousValue.ContractorLegalEntityByContractRequest.Remove(Me)
				End If
				Me._ContractRequest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContractorLegalEntityByContractRequest.Add(Me)
					Me._IdContractRequest = value.RequestNumber
				Else
					Me._IdContractRequest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ContractRequest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ContractorNaturalPersonByContractRequest")>  _
Partial Public Class ContractorNaturalPersonByContractRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdContractRequest As Integer
	
	Private _Nit As String
	
	Private _ContractorName As String
	
	Private _ContractRequest As EntityRef(Of ContractRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdContractRequestChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdContractRequestChanged()
    End Sub
    Partial Private Sub OnNitChanging(value As String)
    End Sub
    Partial Private Sub OnNitChanged()
    End Sub
    Partial Private Sub OnContractorNameChanging(value As String)
    End Sub
    Partial Private Sub OnContractorNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractRequest = CType(Nothing, EntityRef(Of ContractRequest))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdContractRequest", DbType:="Int NOT NULL")>  _
	Public Property IdContractRequest() As Integer
		Get
			Return Me._IdContractRequest
		End Get
		Set
			If ((Me._IdContractRequest = value)  _
						= false) Then
				If Me._ContractRequest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdContractRequestChanging(value)
				Me.SendPropertyChanging
				Me._IdContractRequest = value
				Me.SendPropertyChanged("IdContractRequest")
				Me.OnIdContractRequestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Nit", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Nit() As String
		Get
			Return Me._Nit
		End Get
		Set
			If (String.Equals(Me._Nit, value) = false) Then
				Me.OnNitChanging(value)
				Me.SendPropertyChanging
				Me._Nit = value
				Me.SendPropertyChanged("Nit")
				Me.OnNitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractorName", DbType:="VarChar(150)")>  _
	Public Property ContractorName() As String
		Get
			Return Me._ContractorName
		End Get
		Set
			If (String.Equals(Me._ContractorName, value) = false) Then
				Me.OnContractorNameChanging(value)
				Me.SendPropertyChanging
				Me._ContractorName = value
				Me.SendPropertyChanged("ContractorName")
				Me.OnContractorNameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_ContractorNaturalPersonByContractRequest", Storage:="_ContractRequest", ThisKey:="IdContractRequest", OtherKey:="RequestNumber", IsForeignKey:=true)>  _
	Public Property ContractRequest() As ContractRequest
		Get
			Return Me._ContractRequest.Entity
		End Get
		Set
			Dim previousValue As ContractRequest = Me._ContractRequest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractRequest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractRequest.Entity = Nothing
					previousValue.ContractorNaturalPersonByContractRequest.Remove(Me)
				End If
				Me._ContractRequest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContractorNaturalPersonByContractRequest.Add(Me)
					Me._IdContractRequest = value.RequestNumber
				Else
					Me._IdContractRequest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ContractRequest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ContractRequest")>  _
Partial Public Class ContractRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RequestNumber As Integer
	
	Private _IdManagement As System.Nullable(Of Integer)
	
	Private _IdProject As System.Nullable(Of Integer)
	
	Private _IdContractNature As System.Nullable(Of Integer)
	
	Private _ContractNumberAdjusted As String
	
	Private _IdProcessInstance As System.Nullable(Of Integer)
	
	Private _IdActivityInstance As System.Nullable(Of Integer)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _PolizaId As System.Nullable(Of Integer)
	
	Private _SignedContract As System.Nullable(Of Boolean)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _SuscriptDate As System.Nullable(Of Date)
	
	Private _Confidential As System.Nullable(Of Integer)
	
	Private _Finished As System.Nullable(Of Boolean)
	
	Private _MonthDuration As System.Nullable(Of Decimal)
	
	Private _Supervisor As String
	
	Private _Notes As String
	
	Private _CommentsByContractRequest As EntitySet(Of CommentsByContractRequest)
	
	Private _ContractDataByContractRequest As EntitySet(Of ContractDataByContractRequest)
	
	Private _ContractExecution As EntityRef(Of ContractExecution)
	
	Private _ContractorLegalEntityByContractRequest As EntitySet(Of ContractorLegalEntityByContractRequest)
	
	Private _ContractorNaturalPersonByContractRequest As EntitySet(Of ContractorNaturalPersonByContractRequest)
	
	Private _PaymentsListByContractRequest As EntitySet(Of PaymentsListByContractRequest)
	
	Private _SubjectAndValueByContractRequest As EntitySet(Of SubjectAndValueByContractRequest)
	
	Private _Management As EntityRef(Of Management)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRequestNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnRequestNumberChanged()
    End Sub
    Partial Private Sub OnIdManagementChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdManagementChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnIdContractNatureChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdContractNatureChanged()
    End Sub
    Partial Private Sub OnContractNumberAdjustedChanging(value As String)
    End Sub
    Partial Private Sub OnContractNumberAdjustedChanged()
    End Sub
    Partial Private Sub OnIdProcessInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProcessInstanceChanged()
    End Sub
    Partial Private Sub OnIdActivityInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdActivityInstanceChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnPolizaIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPolizaIdChanged()
    End Sub
    Partial Private Sub OnSignedContractChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSignedContractChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnSuscriptDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnSuscriptDateChanged()
    End Sub
    Partial Private Sub OnConfidentialChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnConfidentialChanged()
    End Sub
    Partial Private Sub OnFinishedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnFinishedChanged()
    End Sub
    Partial Private Sub OnMonthDurationChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMonthDurationChanged()
    End Sub
    Partial Private Sub OnSupervisorChanging(value As String)
    End Sub
    Partial Private Sub OnSupervisorChanged()
    End Sub
    Partial Private Sub OnNotesChanging(value As String)
    End Sub
    Partial Private Sub OnNotesChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CommentsByContractRequest = New EntitySet(Of CommentsByContractRequest)(AddressOf Me.attach_CommentsByContractRequest, AddressOf Me.detach_CommentsByContractRequest)
		Me._ContractDataByContractRequest = New EntitySet(Of ContractDataByContractRequest)(AddressOf Me.attach_ContractDataByContractRequest, AddressOf Me.detach_ContractDataByContractRequest)
		Me._ContractExecution = CType(Nothing, EntityRef(Of ContractExecution))
		Me._ContractorLegalEntityByContractRequest = New EntitySet(Of ContractorLegalEntityByContractRequest)(AddressOf Me.attach_ContractorLegalEntityByContractRequest, AddressOf Me.detach_ContractorLegalEntityByContractRequest)
		Me._ContractorNaturalPersonByContractRequest = New EntitySet(Of ContractorNaturalPersonByContractRequest)(AddressOf Me.attach_ContractorNaturalPersonByContractRequest, AddressOf Me.detach_ContractorNaturalPersonByContractRequest)
		Me._PaymentsListByContractRequest = New EntitySet(Of PaymentsListByContractRequest)(AddressOf Me.attach_PaymentsListByContractRequest, AddressOf Me.detach_PaymentsListByContractRequest)
		Me._SubjectAndValueByContractRequest = New EntitySet(Of SubjectAndValueByContractRequest)(AddressOf Me.attach_SubjectAndValueByContractRequest, AddressOf Me.detach_SubjectAndValueByContractRequest)
		Me._Management = CType(Nothing, EntityRef(Of Management))
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_RequestNumber", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RequestNumber() As Integer
		Get
			Return Me._RequestNumber
		End Get
		Set
			If ((Me._RequestNumber = value)  _
						= false) Then
				Me.OnRequestNumberChanging(value)
				Me.SendPropertyChanging
				Me._RequestNumber = value
				Me.SendPropertyChanged("RequestNumber")
				Me.OnRequestNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdManagement", DbType:="Int")>  _
	Public Property IdManagement() As System.Nullable(Of Integer)
		Get
			Return Me._IdManagement
		End Get
		Set
			If (Me._IdManagement.Equals(value) = false) Then
				If Me._Management.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdManagementChanging(value)
				Me.SendPropertyChanging
				Me._IdManagement = value
				Me.SendPropertyChanged("IdManagement")
				Me.OnIdManagementChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int")>  _
	Public Property IdProject() As System.Nullable(Of Integer)
		Get
			Return Me._IdProject
		End Get
		Set
			If (Me._IdProject.Equals(value) = false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdContractNature", DbType:="Int")>  _
	Public Property IdContractNature() As System.Nullable(Of Integer)
		Get
			Return Me._IdContractNature
		End Get
		Set
			If (Me._IdContractNature.Equals(value) = false) Then
				Me.OnIdContractNatureChanging(value)
				Me.SendPropertyChanging
				Me._IdContractNature = value
				Me.SendPropertyChanged("IdContractNature")
				Me.OnIdContractNatureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractNumberAdjusted", DbType:="VarChar(50)")>  _
	Public Property ContractNumberAdjusted() As String
		Get
			Return Me._ContractNumberAdjusted
		End Get
		Set
			If (String.Equals(Me._ContractNumberAdjusted, value) = false) Then
				Me.OnContractNumberAdjustedChanging(value)
				Me.SendPropertyChanging
				Me._ContractNumberAdjusted = value
				Me.SendPropertyChanged("ContractNumberAdjusted")
				Me.OnContractNumberAdjustedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProcessInstance", DbType:="Int")>  _
	Public Property IdProcessInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdProcessInstance
		End Get
		Set
			If (Me._IdProcessInstance.Equals(value) = false) Then
				Me.OnIdProcessInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdProcessInstance = value
				Me.SendPropertyChanged("IdProcessInstance")
				Me.OnIdProcessInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdActivityInstance", DbType:="Int")>  _
	Public Property IdActivityInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdActivityInstance
		End Get
		Set
			If (Me._IdActivityInstance.Equals(value) = false) Then
				Me.OnIdActivityInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdActivityInstance = value
				Me.SendPropertyChanged("IdActivityInstance")
				Me.OnIdActivityInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PolizaId", DbType:="Int")>  _
	Public Property PolizaId() As System.Nullable(Of Integer)
		Get
			Return Me._PolizaId
		End Get
		Set
			If (Me._PolizaId.Equals(value) = false) Then
				Me.OnPolizaIdChanging(value)
				Me.SendPropertyChanging
				Me._PolizaId = value
				Me.SendPropertyChanged("PolizaId")
				Me.OnPolizaIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SignedContract", DbType:="Bit")>  _
	Public Property SignedContract() As System.Nullable(Of Boolean)
		Get
			Return Me._SignedContract
		End Get
		Set
			If (Me._SignedContract.Equals(value) = false) Then
				Me.OnSignedContractChanging(value)
				Me.SendPropertyChanging
				Me._SignedContract = value
				Me.SendPropertyChanged("SignedContract")
				Me.OnSignedContractChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SuscriptDate", DbType:="DateTime")>  _
	Public Property SuscriptDate() As System.Nullable(Of Date)
		Get
			Return Me._SuscriptDate
		End Get
		Set
			If (Me._SuscriptDate.Equals(value) = false) Then
				Me.OnSuscriptDateChanging(value)
				Me.SendPropertyChanging
				Me._SuscriptDate = value
				Me.SendPropertyChanged("SuscriptDate")
				Me.OnSuscriptDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Confidential", DbType:="Int")>  _
	Public Property Confidential() As System.Nullable(Of Integer)
		Get
			Return Me._Confidential
		End Get
		Set
			If (Me._Confidential.Equals(value) = false) Then
				Me.OnConfidentialChanging(value)
				Me.SendPropertyChanging
				Me._Confidential = value
				Me.SendPropertyChanged("Confidential")
				Me.OnConfidentialChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Finished", DbType:="Bit")>  _
	Public Property Finished() As System.Nullable(Of Boolean)
		Get
			Return Me._Finished
		End Get
		Set
			If (Me._Finished.Equals(value) = false) Then
				Me.OnFinishedChanging(value)
				Me.SendPropertyChanging
				Me._Finished = value
				Me.SendPropertyChanged("Finished")
				Me.OnFinishedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MonthDuration", DbType:="Decimal(18,0)")>  _
	Public Property MonthDuration() As System.Nullable(Of Decimal)
		Get
			Return Me._MonthDuration
		End Get
		Set
			If (Me._MonthDuration.Equals(value) = false) Then
				Me.OnMonthDurationChanging(value)
				Me.SendPropertyChanging
				Me._MonthDuration = value
				Me.SendPropertyChanged("MonthDuration")
				Me.OnMonthDurationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Supervisor", DbType:="VarChar(50)")>  _
	Public Property Supervisor() As String
		Get
			Return Me._Supervisor
		End Get
		Set
			If (String.Equals(Me._Supervisor, value) = false) Then
				Me.OnSupervisorChanging(value)
				Me.SendPropertyChanging
				Me._Supervisor = value
				Me.SendPropertyChanged("Supervisor")
				Me.OnSupervisorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Notes", DbType:="VarChar(255)")>  _
	Public Property Notes() As String
		Get
			Return Me._Notes
		End Get
		Set
			If (String.Equals(Me._Notes, value) = false) Then
				Me.OnNotesChanging(value)
				Me.SendPropertyChanging
				Me._Notes = value
				Me.SendPropertyChanged("Notes")
				Me.OnNotesChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_CommentsByContractRequest", Storage:="_CommentsByContractRequest", ThisKey:="RequestNumber", OtherKey:="IdContractRequest")>  _
	Public Property CommentsByContractRequest() As EntitySet(Of CommentsByContractRequest)
		Get
			Return Me._CommentsByContractRequest
		End Get
		Set
			Me._CommentsByContractRequest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ContractRequest_ContractDataByContractRequest", Storage:="_ContractDataByContractRequest", ThisKey:="RequestNumber", OtherKey:="IdContractRequest")>  _
	Public Property ContractDataByContractRequest() As EntitySet(Of ContractDataByContractRequest)
		Get
			Return Me._ContractDataByContractRequest
		End Get
		Set
			Me._ContractDataByContractRequest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ContractRequest_ContractExecution", Storage:="_ContractExecution", ThisKey:="RequestNumber", OtherKey:="IdContractRequest", IsUnique:=true, IsForeignKey:=false)>  _
	Public Property ContractExecution() As ContractExecution
		Get
			Return Me._ContractExecution.Entity
		End Get
		Set
			Dim previousValue As ContractExecution = Me._ContractExecution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractExecution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractExecution.Entity = Nothing
					previousValue.ContractRequest = Nothing
				End If
				Me._ContractExecution.Entity = value
				If (Object.Equals(value, Nothing) = false) Then
					value.ContractRequest = Me
				End If
				Me.SendPropertyChanged("ContractExecution")
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_ContractorLegalEntityByContractRequest", Storage:="_ContractorLegalEntityByContractRequest", ThisKey:="RequestNumber", OtherKey:="IdContractRequest")>  _
	Public Property ContractorLegalEntityByContractRequest() As EntitySet(Of ContractorLegalEntityByContractRequest)
		Get
			Return Me._ContractorLegalEntityByContractRequest
		End Get
		Set
			Me._ContractorLegalEntityByContractRequest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ContractRequest_ContractorNaturalPersonByContractRequest", Storage:="_ContractorNaturalPersonByContractRequest", ThisKey:="RequestNumber", OtherKey:="IdContractRequest")>  _
	Public Property ContractorNaturalPersonByContractRequest() As EntitySet(Of ContractorNaturalPersonByContractRequest)
		Get
			Return Me._ContractorNaturalPersonByContractRequest
		End Get
		Set
			Me._ContractorNaturalPersonByContractRequest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ContractRequest_PaymentsListByContractRequest", Storage:="_PaymentsListByContractRequest", ThisKey:="RequestNumber", OtherKey:="IdContractRequest")>  _
	Public Property PaymentsListByContractRequest() As EntitySet(Of PaymentsListByContractRequest)
		Get
			Return Me._PaymentsListByContractRequest
		End Get
		Set
			Me._PaymentsListByContractRequest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ContractRequest_SubjectAndValueByContractRequest", Storage:="_SubjectAndValueByContractRequest", ThisKey:="RequestNumber", OtherKey:="IdContractRequest")>  _
	Public Property SubjectAndValueByContractRequest() As EntitySet(Of SubjectAndValueByContractRequest)
		Get
			Return Me._SubjectAndValueByContractRequest
		End Get
		Set
			Me._SubjectAndValueByContractRequest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Management_ContractRequest", Storage:="_Management", ThisKey:="IdManagement", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Management() As Management
		Get
			Return Me._Management.Entity
		End Get
		Set
			Dim previousValue As Management = Me._Management.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Management.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Management.Entity = Nothing
					previousValue.ContractRequest.Remove(Me)
				End If
				Me._Management.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContractRequest.Add(Me)
					Me._IdManagement = value.id
				Else
					Me._IdManagement = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Management")
			End If
		End Set
	End Property
	
	<Association(Name:="Project_ContractRequest", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.ContractRequest.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContractRequest.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CommentsByContractRequest(ByVal entity As CommentsByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Me
	End Sub
	
	Private Sub detach_CommentsByContractRequest(ByVal entity As CommentsByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Nothing
	End Sub
	
	Private Sub attach_ContractDataByContractRequest(ByVal entity As ContractDataByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Me
	End Sub
	
	Private Sub detach_ContractDataByContractRequest(ByVal entity As ContractDataByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Nothing
	End Sub
	
	Private Sub attach_ContractorLegalEntityByContractRequest(ByVal entity As ContractorLegalEntityByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Me
	End Sub
	
	Private Sub detach_ContractorLegalEntityByContractRequest(ByVal entity As ContractorLegalEntityByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Nothing
	End Sub
	
	Private Sub attach_ContractorNaturalPersonByContractRequest(ByVal entity As ContractorNaturalPersonByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Me
	End Sub
	
	Private Sub detach_ContractorNaturalPersonByContractRequest(ByVal entity As ContractorNaturalPersonByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Nothing
	End Sub
	
	Private Sub attach_PaymentsListByContractRequest(ByVal entity As PaymentsListByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Me
	End Sub
	
	Private Sub detach_PaymentsListByContractRequest(ByVal entity As PaymentsListByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Nothing
	End Sub
	
	Private Sub attach_SubjectAndValueByContractRequest(ByVal entity As SubjectAndValueByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Me
	End Sub
	
	Private Sub detach_SubjectAndValueByContractRequest(ByVal entity As SubjectAndValueByContractRequest)
		Me.SendPropertyChanging
		entity.ContractRequest = Nothing
	End Sub
End Class

<Table(Name:="dbo.ContractType")>  _
Partial Public Class ContractType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _ExecutionContractualPlanRegistryDetails As EntitySet(Of ExecutionContractualPlanRegistryDetails)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ExecutionContractualPlanRegistryDetails = New EntitySet(Of ExecutionContractualPlanRegistryDetails)(AddressOf Me.attach_ExecutionContractualPlanRegistryDetails, AddressOf Me.detach_ExecutionContractualPlanRegistryDetails)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractType_ExecutionContractualPlanRegistryDetails", Storage:="_ExecutionContractualPlanRegistryDetails", ThisKey:="Id", OtherKey:="IdContractType")>  _
	Public Property ExecutionContractualPlanRegistryDetails() As EntitySet(Of ExecutionContractualPlanRegistryDetails)
		Get
			Return Me._ExecutionContractualPlanRegistryDetails
		End Get
		Set
			Me._ExecutionContractualPlanRegistryDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ExecutionContractualPlanRegistryDetails(ByVal entity As ExecutionContractualPlanRegistryDetails)
		Me.SendPropertyChanging
		entity.ContractType = Me
	End Sub
	
	Private Sub detach_ExecutionContractualPlanRegistryDetails(ByVal entity As ExecutionContractualPlanRegistryDetails)
		Me.SendPropertyChanging
		entity.ContractType = Nothing
	End Sub
End Class

<Table(Name:="dbo.Documents")>  _
Partial Public Class Documents
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Title As String
	
	Private _Description As String
	
	Private _IdEditedFor As System.Nullable(Of Integer)
	
	Private _IdVisibilityLevel As System.Nullable(Of Integer)
	
	Private _IdDocumentType As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _AttachFile As String
	
	Private _Enabled As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIdEditedForChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdEditedForChanged()
    End Sub
    Partial Private Sub OnIdVisibilityLevelChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdVisibilityLevelChanged()
    End Sub
    Partial Private Sub OnIdDocumentTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDocumentTypeChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnAttachFileChanging(value As String)
    End Sub
    Partial Private Sub OnAttachFileChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Title", DbType:="VarChar(255)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdEditedFor", DbType:="Int")>  _
	Public Property IdEditedFor() As System.Nullable(Of Integer)
		Get
			Return Me._IdEditedFor
		End Get
		Set
			If (Me._IdEditedFor.Equals(value) = false) Then
				Me.OnIdEditedForChanging(value)
				Me.SendPropertyChanging
				Me._IdEditedFor = value
				Me.SendPropertyChanged("IdEditedFor")
				Me.OnIdEditedForChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdVisibilityLevel", DbType:="Int")>  _
	Public Property IdVisibilityLevel() As System.Nullable(Of Integer)
		Get
			Return Me._IdVisibilityLevel
		End Get
		Set
			If (Me._IdVisibilityLevel.Equals(value) = false) Then
				Me.OnIdVisibilityLevelChanging(value)
				Me.SendPropertyChanging
				Me._IdVisibilityLevel = value
				Me.SendPropertyChanged("IdVisibilityLevel")
				Me.OnIdVisibilityLevelChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdDocumentType", DbType:="Int")>  _
	Public Property IdDocumentType() As System.Nullable(Of Integer)
		Get
			Return Me._IdDocumentType
		End Get
		Set
			If (Me._IdDocumentType.Equals(value) = false) Then
				Me.OnIdDocumentTypeChanging(value)
				Me.SendPropertyChanging
				Me._IdDocumentType = value
				Me.SendPropertyChanged("IdDocumentType")
				Me.OnIdDocumentTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AttachFile", DbType:="VarChar(200)")>  _
	Public Property AttachFile() As String
		Get
			Return Me._AttachFile
		End Get
		Set
			If (String.Equals(Me._AttachFile, value) = false) Then
				Me.OnAttachFileChanging(value)
				Me.SendPropertyChanging
				Me._AttachFile = value
				Me.SendPropertyChanged("AttachFile")
				Me.OnAttachFileChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.DocumentsByEntity")>  _
Partial Public Class DocumentsByEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdDocuments As System.Nullable(Of Integer)
	
	Private _IdnEntity As System.Nullable(Of Integer)
	
	Private _EntityName As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdDocumentsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDocumentsChanged()
    End Sub
    Partial Private Sub OnIdnEntityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdnEntityChanged()
    End Sub
    Partial Private Sub OnEntityNameChanging(value As String)
    End Sub
    Partial Private Sub OnEntityNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdDocuments", DbType:="Int")>  _
	Public Property IdDocuments() As System.Nullable(Of Integer)
		Get
			Return Me._IdDocuments
		End Get
		Set
			If (Me._IdDocuments.Equals(value) = false) Then
				Me.OnIdDocumentsChanging(value)
				Me.SendPropertyChanging
				Me._IdDocuments = value
				Me.SendPropertyChanged("IdDocuments")
				Me.OnIdDocumentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdnEntity", DbType:="Int")>  _
	Public Property IdnEntity() As System.Nullable(Of Integer)
		Get
			Return Me._IdnEntity
		End Get
		Set
			If (Me._IdnEntity.Equals(value) = false) Then
				Me.OnIdnEntityChanging(value)
				Me.SendPropertyChanging
				Me._IdnEntity = value
				Me.SendPropertyChanged("IdnEntity")
				Me.OnIdnEntityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntityName", DbType:="VarChar(255)")>  _
	Public Property EntityName() As String
		Get
			Return Me._EntityName
		End Get
		Set
			If (String.Equals(Me._EntityName, value) = false) Then
				Me.OnEntityNameChanging(value)
				Me.SendPropertyChanging
				Me._EntityName = value
				Me.SendPropertyChanged("EntityName")
				Me.OnEntityNameChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.DocumentType")>  _
Partial Public Class DocumentType
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Enabled As Boolean
	
	Private _IDUser As Integer
	
	Private _CreateDate As Date
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me._Code = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me._Enabled = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_IDUser", DbType:="Int NOT NULL")>  _
	Public Property IDUser() As Integer
		Get
			Return Me._IDUser
		End Get
		Set
			If ((Me._IDUser = value)  _
						= false) Then
				Me._IDUser = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me._CreateDate = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.Enterprise")>  _
Partial Public Class Enterprise
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IDUser As Integer
	
	Private _Enabled As Boolean
	
	Private _CreateDate As Date
	
	Private _Management As EntitySet(Of Management)
	
	Private _Perspective As EntitySet(Of Perspective)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIDUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDUserChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Management = New EntitySet(Of Management)(AddressOf Me.attach_Management, AddressOf Me.detach_Management)
		Me._Perspective = New EntitySet(Of Perspective)(AddressOf Me.attach_Perspective, AddressOf Me.detach_Perspective)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IDUser", DbType:="Int NOT NULL")>  _
	Public Property IDUser() As Integer
		Get
			Return Me._IDUser
		End Get
		Set
			If ((Me._IDUser = value)  _
						= false) Then
				Me.OnIDUserChanging(value)
				Me.SendPropertyChanging
				Me._IDUser = value
				Me.SendPropertyChanged("IDUser")
				Me.OnIDUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Enterprise_Management", Storage:="_Management", ThisKey:="Id", OtherKey:="IdEnterprise")>  _
	Public Property Management() As EntitySet(Of Management)
		Get
			Return Me._Management
		End Get
		Set
			Me._Management.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Enterprise_Perspective", Storage:="_Perspective", ThisKey:="Id", OtherKey:="IdEnterprise")>  _
	Public Property Perspective() As EntitySet(Of Perspective)
		Get
			Return Me._Perspective
		End Get
		Set
			Me._Perspective.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Management(ByVal entity As Management)
		Me.SendPropertyChanging
		entity.Enterprise = Me
	End Sub
	
	Private Sub detach_Management(ByVal entity As Management)
		Me.SendPropertyChanging
		entity.Enterprise = Nothing
	End Sub
	
	Private Sub attach_Perspective(ByVal entity As Perspective)
		Me.SendPropertyChanging
		entity.Enterprise = Me
	End Sub
	
	Private Sub detach_Perspective(ByVal entity As Perspective)
		Me.SendPropertyChanging
		entity.Enterprise = Nothing
	End Sub
End Class

<Table(Name:="dbo.Entities")>  _
Partial Public Class Entities
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _EntityName As String
	
	Private _Equivalence As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnEntityNameChanging(value As String)
    End Sub
    Partial Private Sub OnEntityNameChanged()
    End Sub
    Partial Private Sub OnEquivalenceChanging(value As String)
    End Sub
    Partial Private Sub OnEquivalenceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EntityName", DbType:="VarChar(255)")>  _
	Public Property EntityName() As String
		Get
			Return Me._EntityName
		End Get
		Set
			If (String.Equals(Me._EntityName, value) = false) Then
				Me.OnEntityNameChanging(value)
				Me.SendPropertyChanging
				Me._EntityName = value
				Me.SendPropertyChanged("EntityName")
				Me.OnEntityNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Equivalence", DbType:="VarChar(255)")>  _
	Public Property Equivalence() As String
		Get
			Return Me._Equivalence
		End Get
		Set
			If (String.Equals(Me._Equivalence, value) = false) Then
				Me.OnEquivalenceChanging(value)
				Me.SendPropertyChanging
				Me._Equivalence = value
				Me.SendPropertyChanged("Equivalence")
				Me.OnEquivalenceChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Execution")>  _
Partial Public Class Execution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProject As Integer
	
	Private _QualitativeIndicators As String
	
	Private _Learning As String
	
	Private _Adjust As String
	
	Private _achievements As String
	
	Private _Enable As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _Testimony As EntitySet(Of Testimony)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnQualitativeIndicatorsChanging(value As String)
    End Sub
    Partial Private Sub OnQualitativeIndicatorsChanged()
    End Sub
    Partial Private Sub OnLearningChanging(value As String)
    End Sub
    Partial Private Sub OnLearningChanged()
    End Sub
    Partial Private Sub OnAdjustChanging(value As String)
    End Sub
    Partial Private Sub OnAdjustChanged()
    End Sub
    Partial Private Sub OnachievementsChanging(value As String)
    End Sub
    Partial Private Sub OnachievementsChanged()
    End Sub
    Partial Private Sub OnEnableChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnableChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Testimony = New EntitySet(Of Testimony)(AddressOf Me.attach_Testimony, AddressOf Me.detach_Testimony)
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_QualitativeIndicators", DbType:="NVarChar(2000)")>  _
	Public Property QualitativeIndicators() As String
		Get
			Return Me._QualitativeIndicators
		End Get
		Set
			If (String.Equals(Me._QualitativeIndicators, value) = false) Then
				Me.OnQualitativeIndicatorsChanging(value)
				Me.SendPropertyChanging
				Me._QualitativeIndicators = value
				Me.SendPropertyChanged("QualitativeIndicators")
				Me.OnQualitativeIndicatorsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Learning", DbType:="NVarChar(4000)")>  _
	Public Property Learning() As String
		Get
			Return Me._Learning
		End Get
		Set
			If (String.Equals(Me._Learning, value) = false) Then
				Me.OnLearningChanging(value)
				Me.SendPropertyChanging
				Me._Learning = value
				Me.SendPropertyChanged("Learning")
				Me.OnLearningChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Adjust", DbType:="NVarChar(4000)")>  _
	Public Property Adjust() As String
		Get
			Return Me._Adjust
		End Get
		Set
			If (String.Equals(Me._Adjust, value) = false) Then
				Me.OnAdjustChanging(value)
				Me.SendPropertyChanging
				Me._Adjust = value
				Me.SendPropertyChanged("Adjust")
				Me.OnAdjustChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_achievements", DbType:="NVarChar(4000)")>  _
	Public Property achievements() As String
		Get
			Return Me._achievements
		End Get
		Set
			If (String.Equals(Me._achievements, value) = false) Then
				Me.OnachievementsChanging(value)
				Me.SendPropertyChanging
				Me._achievements = value
				Me.SendPropertyChanged("achievements")
				Me.OnachievementsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enable", DbType:="Bit NOT NULL")>  _
	Public Property Enable() As Boolean
		Get
			Return Me._Enable
		End Get
		Set
			If ((Me._Enable = value)  _
						= false) Then
				Me.OnEnableChanging(value)
				Me.SendPropertyChanging
				Me._Enable = value
				Me.SendPropertyChanged("Enable")
				Me.OnEnableChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Execution_Testimony", Storage:="_Testimony", ThisKey:="Id", OtherKey:="IdExecution")>  _
	Public Property Testimony() As EntitySet(Of Testimony)
		Get
			Return Me._Testimony
		End Get
		Set
			Me._Testimony.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Execution", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Execution.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Execution.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Testimony(ByVal entity As Testimony)
		Me.SendPropertyChanging
		entity.Execution = Me
	End Sub
	
	Private Sub detach_Testimony(ByVal entity As Testimony)
		Me.SendPropertyChanging
		entity.Execution = Nothing
	End Sub
End Class

<Table(Name:="dbo.ExecutionContractualPlanRegistry")>  _
Partial Public Class ExecutionContractualPlanRegistry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _ExecutionContractualPlanRegistryDetails As EntitySet(Of ExecutionContractualPlanRegistryDetails)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ExecutionContractualPlanRegistryDetails = New EntitySet(Of ExecutionContractualPlanRegistryDetails)(AddressOf Me.attach_ExecutionContractualPlanRegistryDetails, AddressOf Me.detach_ExecutionContractualPlanRegistryDetails)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ExecutionContractualPlanRegistry_ExecutionContractualPlanRegistryDetails", Storage:="_ExecutionContractualPlanRegistryDetails", ThisKey:="Id", OtherKey:="IdExecutionContractualPlanRegistry")>  _
	Public Property ExecutionContractualPlanRegistryDetails() As EntitySet(Of ExecutionContractualPlanRegistryDetails)
		Get
			Return Me._ExecutionContractualPlanRegistryDetails
		End Get
		Set
			Me._ExecutionContractualPlanRegistryDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ExecutionContractualPlanRegistryDetails(ByVal entity As ExecutionContractualPlanRegistryDetails)
		Me.SendPropertyChanging
		entity.ExecutionContractualPlanRegistry = Me
	End Sub
	
	Private Sub detach_ExecutionContractualPlanRegistryDetails(ByVal entity As ExecutionContractualPlanRegistryDetails)
		Me.SendPropertyChanging
		entity.ExecutionContractualPlanRegistry = Nothing
	End Sub
End Class

<Table(Name:="dbo.ExecutionContractualPlanRegistryDetails")>  _
Partial Public Class ExecutionContractualPlanRegistryDetails
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdExecutionContractualPlanRegistry As Integer
	
	Private _IdProject As Integer
	
	Private _Concept As String
	
	Private _IdContractType As System.Nullable(Of Integer)
	
	Private _TotalCost As System.Nullable(Of Decimal)
	
	Private _EngagementDate As System.Nullable(Of Date)
	
	Private _Comments As String
	
	Private _CreateDate As Date
	
	Private _ContractType As EntityRef(Of ContractType)
	
	Private _ExecutionContractualPlanRegistry As EntityRef(Of ExecutionContractualPlanRegistry)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdExecutionContractualPlanRegistryChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdExecutionContractualPlanRegistryChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnConceptChanging(value As String)
    End Sub
    Partial Private Sub OnConceptChanged()
    End Sub
    Partial Private Sub OnIdContractTypeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdContractTypeChanged()
    End Sub
    Partial Private Sub OnTotalCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalCostChanged()
    End Sub
    Partial Private Sub OnEngagementDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEngagementDateChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractType = CType(Nothing, EntityRef(Of ContractType))
		Me._ExecutionContractualPlanRegistry = CType(Nothing, EntityRef(Of ExecutionContractualPlanRegistry))
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdExecutionContractualPlanRegistry", DbType:="Int NOT NULL")>  _
	Public Property IdExecutionContractualPlanRegistry() As Integer
		Get
			Return Me._IdExecutionContractualPlanRegistry
		End Get
		Set
			If ((Me._IdExecutionContractualPlanRegistry = value)  _
						= false) Then
				If Me._ExecutionContractualPlanRegistry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdExecutionContractualPlanRegistryChanging(value)
				Me.SendPropertyChanging
				Me._IdExecutionContractualPlanRegistry = value
				Me.SendPropertyChanged("IdExecutionContractualPlanRegistry")
				Me.OnIdExecutionContractualPlanRegistryChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Concept", DbType:="NVarChar(300)")>  _
	Public Property Concept() As String
		Get
			Return Me._Concept
		End Get
		Set
			If (String.Equals(Me._Concept, value) = false) Then
				Me.OnConceptChanging(value)
				Me.SendPropertyChanging
				Me._Concept = value
				Me.SendPropertyChanged("Concept")
				Me.OnConceptChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdContractType", DbType:="Int")>  _
	Public Property IdContractType() As System.Nullable(Of Integer)
		Get
			Return Me._IdContractType
		End Get
		Set
			If (Me._IdContractType.Equals(value) = false) Then
				If Me._ContractType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdContractTypeChanging(value)
				Me.SendPropertyChanging
				Me._IdContractType = value
				Me.SendPropertyChanged("IdContractType")
				Me.OnIdContractTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalCost", DbType:="Decimal(18,3)")>  _
	Public Property TotalCost() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalCost
		End Get
		Set
			If (Me._TotalCost.Equals(value) = false) Then
				Me.OnTotalCostChanging(value)
				Me.SendPropertyChanging
				Me._TotalCost = value
				Me.SendPropertyChanged("TotalCost")
				Me.OnTotalCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EngagementDate", DbType:="DateTime")>  _
	Public Property EngagementDate() As System.Nullable(Of Date)
		Get
			Return Me._EngagementDate
		End Get
		Set
			If (Me._EngagementDate.Equals(value) = false) Then
				Me.OnEngagementDateChanging(value)
				Me.SendPropertyChanging
				Me._EngagementDate = value
				Me.SendPropertyChanged("EngagementDate")
				Me.OnEngagementDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comments", DbType:="VarChar(300)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractType_ExecutionContractualPlanRegistryDetails", Storage:="_ContractType", ThisKey:="IdContractType", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property ContractType() As ContractType
		Get
			Return Me._ContractType.Entity
		End Get
		Set
			Dim previousValue As ContractType = Me._ContractType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractType.Entity = Nothing
					previousValue.ExecutionContractualPlanRegistryDetails.Remove(Me)
				End If
				Me._ContractType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ExecutionContractualPlanRegistryDetails.Add(Me)
					Me._IdContractType = value.Id
				Else
					Me._IdContractType = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ContractType")
			End If
		End Set
	End Property
	
	<Association(Name:="ExecutionContractualPlanRegistry_ExecutionContractualPlanRegistryDetails", Storage:="_ExecutionContractualPlanRegistry", ThisKey:="IdExecutionContractualPlanRegistry", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property ExecutionContractualPlanRegistry() As ExecutionContractualPlanRegistry
		Get
			Return Me._ExecutionContractualPlanRegistry.Entity
		End Get
		Set
			Dim previousValue As ExecutionContractualPlanRegistry = Me._ExecutionContractualPlanRegistry.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ExecutionContractualPlanRegistry.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ExecutionContractualPlanRegistry.Entity = Nothing
					previousValue.ExecutionContractualPlanRegistryDetails.Remove(Me)
				End If
				Me._ExecutionContractualPlanRegistry.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ExecutionContractualPlanRegistryDetails.Add(Me)
					Me._IdExecutionContractualPlanRegistry = value.Id
				Else
					Me._IdExecutionContractualPlanRegistry = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ExecutionContractualPlanRegistry")
			End If
		End Set
	End Property
	
	<Association(Name:="Project_ExecutionContractualPlanRegistryDetails", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.ExecutionContractualPlanRegistryDetails.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ExecutionContractualPlanRegistryDetails.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Explanatory")>  _
Partial Public Class Explanatory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _observation As String
	
	Private _fecha As Date
	
	Private _idproject As Integer
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnobservationChanging(value As String)
    End Sub
    Partial Private Sub OnobservationChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As Date)
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnidprojectChanging(value As Integer)
    End Sub
    Partial Private Sub OnidprojectChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_observation", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property observation() As String
		Get
			Return Me._observation
		End Get
		Set
			If (String.Equals(Me._observation, value) = false) Then
				Me.OnobservationChanging(value)
				Me.SendPropertyChanging
				Me._observation = value
				Me.SendPropertyChanged("observation")
				Me.OnobservationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fecha", DbType:="Date NOT NULL")>  _
	Public Property fecha() As Date
		Get
			Return Me._fecha
		End Get
		Set
			If ((Me._fecha = value)  _
						= false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idproject", DbType:="Int NOT NULL")>  _
	Public Property idproject() As Integer
		Get
			Return Me._idproject
		End Get
		Set
			If ((Me._idproject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidprojectChanging(value)
				Me.SendPropertyChanging
				Me._idproject = value
				Me.SendPropertyChanged("idproject")
				Me.OnidprojectChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_Explanatory", Storage:="_Project", ThisKey:="idproject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Explanatory.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Explanatory.Add(Me)
					Me._idproject = value.Id
				Else
					Me._idproject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Forum")>  _
Partial Public Class Forum
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProject As Integer
	
	Private _Subject As String
	
	Private _Message As String
	
	Private _Attachment As String
	
	Private _UpdatedDate As System.Nullable(Of Date)
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _Reply As EntitySet(Of Reply)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    Partial Private Sub OnMessageChanging(value As String)
    End Sub
    Partial Private Sub OnMessageChanged()
    End Sub
    Partial Private Sub OnAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnAttachmentChanged()
    End Sub
    Partial Private Sub OnUpdatedDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdatedDateChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Reply = New EntitySet(Of Reply)(AddressOf Me.attach_Reply, AddressOf Me.detach_Reply)
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Subject", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set
			If (String.Equals(Me._Subject, value) = false) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Message", DbType:="VarChar(150) NOT NULL", CanBeNull:=false)>  _
	Public Property Message() As String
		Get
			Return Me._Message
		End Get
		Set
			If (String.Equals(Me._Message, value) = false) Then
				Me.OnMessageChanging(value)
				Me.SendPropertyChanging
				Me._Message = value
				Me.SendPropertyChanged("Message")
				Me.OnMessageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Attachment", DbType:="VarChar(200)")>  _
	Public Property Attachment() As String
		Get
			Return Me._Attachment
		End Get
		Set
			If (String.Equals(Me._Attachment, value) = false) Then
				Me.OnAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._Attachment = value
				Me.SendPropertyChanged("Attachment")
				Me.OnAttachmentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UpdatedDate", DbType:="DateTime")>  _
	Public Property UpdatedDate() As System.Nullable(Of Date)
		Get
			Return Me._UpdatedDate
		End Get
		Set
			If (Me._UpdatedDate.Equals(value) = false) Then
				Me.OnUpdatedDateChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedDate = value
				Me.SendPropertyChanged("UpdatedDate")
				Me.OnUpdatedDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Forum_Reply", Storage:="_Reply", ThisKey:="Id", OtherKey:="IdForum")>  _
	Public Property Reply() As EntitySet(Of Reply)
		Get
			Return Me._Reply
		End Get
		Set
			Me._Reply.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Forum", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Forum.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Forum.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Reply(ByVal entity As Reply)
		Me.SendPropertyChanging
		entity.Forum = Me
	End Sub
	
	Private Sub detach_Reply(ByVal entity As Reply)
		Me.SendPropertyChanging
		entity.Forum = Nothing
	End Sub
End Class

<Table(Name:="dbo.Idea")>  _
Partial Public Class Idea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Objective As String
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _Duration As String
	
	Private _AreaDescription As String
	
	Private _Population As String
	
	Private _Cost As System.Nullable(Of Decimal)
	
	Private _StrategyDescription As String
	
	Private _Results As String
	
	Private _Source As String
	
	Private _IdSummoning As System.Nullable(Of Integer)
	
	Private _StartProcess As System.Nullable(Of Boolean)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _IDUser As System.Nullable(Of Integer)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _IdProcessInstance As System.Nullable(Of Integer)
	
	Private _IdActivityInstance As System.Nullable(Of Integer)
	
	Private _Justification As String
	
	Private _FSCContribution As System.Nullable(Of Decimal)
	
	Private _CounterpartValue As System.Nullable(Of Decimal)
	
	Private _ResultsKnowledgeManagement As String
	
	Private _ResultsInstalledCapacity As String
	
	Private _Loadingobservations As String
	
	Private _Idtypecontract As System.Nullable(Of Integer)
	
	Private _Enddate As System.Nullable(Of Date)
	
	Private _ProjectApprovalRecord As EntitySet(Of ProjectApprovalRecord)
	
	Private _ThirdByIdea As EntitySet(Of ThirdByIdea)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnObjectiveChanging(value As String)
    End Sub
    Partial Private Sub OnObjectiveChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As String)
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    Partial Private Sub OnAreaDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnAreaDescriptionChanged()
    End Sub
    Partial Private Sub OnPopulationChanging(value As String)
    End Sub
    Partial Private Sub OnPopulationChanged()
    End Sub
    Partial Private Sub OnCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCostChanged()
    End Sub
    Partial Private Sub OnStrategyDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnStrategyDescriptionChanged()
    End Sub
    Partial Private Sub OnResultsChanging(value As String)
    End Sub
    Partial Private Sub OnResultsChanged()
    End Sub
    Partial Private Sub OnSourceChanging(value As String)
    End Sub
    Partial Private Sub OnSourceChanged()
    End Sub
    Partial Private Sub OnIdSummoningChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSummoningChanged()
    End Sub
    Partial Private Sub OnStartProcessChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStartProcessChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnIDUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDUserChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdProcessInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProcessInstanceChanged()
    End Sub
    Partial Private Sub OnIdActivityInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdActivityInstanceChanged()
    End Sub
    Partial Private Sub OnJustificationChanging(value As String)
    End Sub
    Partial Private Sub OnJustificationChanged()
    End Sub
    Partial Private Sub OnFSCContributionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFSCContributionChanged()
    End Sub
    Partial Private Sub OnCounterpartValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCounterpartValueChanged()
    End Sub
    Partial Private Sub OnResultsKnowledgeManagementChanging(value As String)
    End Sub
    Partial Private Sub OnResultsKnowledgeManagementChanged()
    End Sub
    Partial Private Sub OnResultsInstalledCapacityChanging(value As String)
    End Sub
    Partial Private Sub OnResultsInstalledCapacityChanged()
    End Sub
    Partial Private Sub OnLoadingobservationsChanging(value As String)
    End Sub
    Partial Private Sub OnLoadingobservationsChanged()
    End Sub
    Partial Private Sub OnIdtypecontractChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdtypecontractChanged()
    End Sub
    Partial Private Sub OnEnddateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEnddateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProjectApprovalRecord = New EntitySet(Of ProjectApprovalRecord)(AddressOf Me.attach_ProjectApprovalRecord, AddressOf Me.detach_ProjectApprovalRecord)
		Me._ThirdByIdea = New EntitySet(Of ThirdByIdea)(AddressOf Me.attach_ThirdByIdea, AddressOf Me.detach_ThirdByIdea)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(MAX)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(MAX)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective", DbType:="VarChar(MAX)")>  _
	Public Property Objective() As String
		Get
			Return Me._Objective
		End Get
		Set
			If (String.Equals(Me._Objective, value) = false) Then
				Me.OnObjectiveChanging(value)
				Me.SendPropertyChanging
				Me._Objective = value
				Me.SendPropertyChanged("Objective")
				Me.OnObjectiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Duration", DbType:="VarChar(MAX)")>  _
	Public Property Duration() As String
		Get
			Return Me._Duration
		End Get
		Set
			If (String.Equals(Me._Duration, value) = false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AreaDescription", DbType:="VarChar(MAX)")>  _
	Public Property AreaDescription() As String
		Get
			Return Me._AreaDescription
		End Get
		Set
			If (String.Equals(Me._AreaDescription, value) = false) Then
				Me.OnAreaDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._AreaDescription = value
				Me.SendPropertyChanged("AreaDescription")
				Me.OnAreaDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Population", DbType:="VarChar(MAX)")>  _
	Public Property Population() As String
		Get
			Return Me._Population
		End Get
		Set
			If (String.Equals(Me._Population, value) = false) Then
				Me.OnPopulationChanging(value)
				Me.SendPropertyChanging
				Me._Population = value
				Me.SendPropertyChanged("Population")
				Me.OnPopulationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Cost", DbType:="Decimal(30,0)")>  _
	Public Property Cost() As System.Nullable(Of Decimal)
		Get
			Return Me._Cost
		End Get
		Set
			If (Me._Cost.Equals(value) = false) Then
				Me.OnCostChanging(value)
				Me.SendPropertyChanging
				Me._Cost = value
				Me.SendPropertyChanged("Cost")
				Me.OnCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StrategyDescription", DbType:="VarChar(MAX)")>  _
	Public Property StrategyDescription() As String
		Get
			Return Me._StrategyDescription
		End Get
		Set
			If (String.Equals(Me._StrategyDescription, value) = false) Then
				Me.OnStrategyDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._StrategyDescription = value
				Me.SendPropertyChanged("StrategyDescription")
				Me.OnStrategyDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Results", DbType:="VarChar(MAX)")>  _
	Public Property Results() As String
		Get
			Return Me._Results
		End Get
		Set
			If (String.Equals(Me._Results, value) = false) Then
				Me.OnResultsChanging(value)
				Me.SendPropertyChanging
				Me._Results = value
				Me.SendPropertyChanged("Results")
				Me.OnResultsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Source", DbType:="VarChar(MAX)")>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me.OnSourceChanging(value)
				Me.SendPropertyChanging
				Me._Source = value
				Me.SendPropertyChanged("Source")
				Me.OnSourceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdSummoning", DbType:="Int")>  _
	Public Property IdSummoning() As System.Nullable(Of Integer)
		Get
			Return Me._IdSummoning
		End Get
		Set
			If (Me._IdSummoning.Equals(value) = false) Then
				Me.OnIdSummoningChanging(value)
				Me.SendPropertyChanging
				Me._IdSummoning = value
				Me.SendPropertyChanged("IdSummoning")
				Me.OnIdSummoningChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StartProcess", DbType:="Bit")>  _
	Public Property StartProcess() As System.Nullable(Of Boolean)
		Get
			Return Me._StartProcess
		End Get
		Set
			If (Me._StartProcess.Equals(value) = false) Then
				Me.OnStartProcessChanging(value)
				Me.SendPropertyChanging
				Me._StartProcess = value
				Me.SendPropertyChanged("StartProcess")
				Me.OnStartProcessChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IDUser", DbType:="Int")>  _
	Public Property IDUser() As System.Nullable(Of Integer)
		Get
			Return Me._IDUser
		End Get
		Set
			If (Me._IDUser.Equals(value) = false) Then
				Me.OnIDUserChanging(value)
				Me.SendPropertyChanging
				Me._IDUser = value
				Me.SendPropertyChanged("IDUser")
				Me.OnIDUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProcessInstance", DbType:="Int")>  _
	Public Property IdProcessInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdProcessInstance
		End Get
		Set
			If (Me._IdProcessInstance.Equals(value) = false) Then
				Me.OnIdProcessInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdProcessInstance = value
				Me.SendPropertyChanged("IdProcessInstance")
				Me.OnIdProcessInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdActivityInstance", DbType:="Int")>  _
	Public Property IdActivityInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdActivityInstance
		End Get
		Set
			If (Me._IdActivityInstance.Equals(value) = false) Then
				Me.OnIdActivityInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdActivityInstance = value
				Me.SendPropertyChanged("IdActivityInstance")
				Me.OnIdActivityInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Justification", DbType:="NVarChar(MAX)")>  _
	Public Property Justification() As String
		Get
			Return Me._Justification
		End Get
		Set
			If (String.Equals(Me._Justification, value) = false) Then
				Me.OnJustificationChanging(value)
				Me.SendPropertyChanging
				Me._Justification = value
				Me.SendPropertyChanged("Justification")
				Me.OnJustificationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FSCContribution", DbType:="Decimal(30,0)")>  _
	Public Property FSCContribution() As System.Nullable(Of Decimal)
		Get
			Return Me._FSCContribution
		End Get
		Set
			If (Me._FSCContribution.Equals(value) = false) Then
				Me.OnFSCContributionChanging(value)
				Me.SendPropertyChanging
				Me._FSCContribution = value
				Me.SendPropertyChanged("FSCContribution")
				Me.OnFSCContributionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CounterpartValue", DbType:="Decimal(30,0)")>  _
	Public Property CounterpartValue() As System.Nullable(Of Decimal)
		Get
			Return Me._CounterpartValue
		End Get
		Set
			If (Me._CounterpartValue.Equals(value) = false) Then
				Me.OnCounterpartValueChanging(value)
				Me.SendPropertyChanging
				Me._CounterpartValue = value
				Me.SendPropertyChanged("CounterpartValue")
				Me.OnCounterpartValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ResultsKnowledgeManagement", DbType:="VarChar(MAX)")>  _
	Public Property ResultsKnowledgeManagement() As String
		Get
			Return Me._ResultsKnowledgeManagement
		End Get
		Set
			If (String.Equals(Me._ResultsKnowledgeManagement, value) = false) Then
				Me.OnResultsKnowledgeManagementChanging(value)
				Me.SendPropertyChanging
				Me._ResultsKnowledgeManagement = value
				Me.SendPropertyChanged("ResultsKnowledgeManagement")
				Me.OnResultsKnowledgeManagementChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ResultsInstalledCapacity", DbType:="VarChar(MAX)")>  _
	Public Property ResultsInstalledCapacity() As String
		Get
			Return Me._ResultsInstalledCapacity
		End Get
		Set
			If (String.Equals(Me._ResultsInstalledCapacity, value) = false) Then
				Me.OnResultsInstalledCapacityChanging(value)
				Me.SendPropertyChanging
				Me._ResultsInstalledCapacity = value
				Me.SendPropertyChanged("ResultsInstalledCapacity")
				Me.OnResultsInstalledCapacityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Loadingobservations", DbType:="VarChar(MAX)")>  _
	Public Property Loadingobservations() As String
		Get
			Return Me._Loadingobservations
		End Get
		Set
			If (String.Equals(Me._Loadingobservations, value) = false) Then
				Me.OnLoadingobservationsChanging(value)
				Me.SendPropertyChanging
				Me._Loadingobservations = value
				Me.SendPropertyChanged("Loadingobservations")
				Me.OnLoadingobservationsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Idtypecontract", DbType:="Int")>  _
	Public Property Idtypecontract() As System.Nullable(Of Integer)
		Get
			Return Me._Idtypecontract
		End Get
		Set
			If (Me._Idtypecontract.Equals(value) = false) Then
				Me.OnIdtypecontractChanging(value)
				Me.SendPropertyChanging
				Me._Idtypecontract = value
				Me.SendPropertyChanged("Idtypecontract")
				Me.OnIdtypecontractChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enddate", DbType:="DateTime")>  _
	Public Property Enddate() As System.Nullable(Of Date)
		Get
			Return Me._Enddate
		End Get
		Set
			If (Me._Enddate.Equals(value) = false) Then
				Me.OnEnddateChanging(value)
				Me.SendPropertyChanging
				Me._Enddate = value
				Me.SendPropertyChanged("Enddate")
				Me.OnEnddateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Idea_ProjectApprovalRecord", Storage:="_ProjectApprovalRecord", ThisKey:="Id", OtherKey:="Ididea")>  _
	Public Property ProjectApprovalRecord() As EntitySet(Of ProjectApprovalRecord)
		Get
			Return Me._ProjectApprovalRecord
		End Get
		Set
			Me._ProjectApprovalRecord.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Idea_ThirdByIdea", Storage:="_ThirdByIdea", ThisKey:="Id", OtherKey:="IdIdea")>  _
	Public Property ThirdByIdea() As EntitySet(Of ThirdByIdea)
		Get
			Return Me._ThirdByIdea
		End Get
		Set
			Me._ThirdByIdea.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProjectApprovalRecord(ByVal entity As ProjectApprovalRecord)
		Me.SendPropertyChanging
		entity.Idea = Me
	End Sub
	
	Private Sub detach_ProjectApprovalRecord(ByVal entity As ProjectApprovalRecord)
		Me.SendPropertyChanging
		entity.Idea = Nothing
	End Sub
	
	Private Sub attach_ThirdByIdea(ByVal entity As ThirdByIdea)
		Me.SendPropertyChanging
		entity.Idea = Me
	End Sub
	
	Private Sub detach_ThirdByIdea(ByVal entity As ThirdByIdea)
		Me.SendPropertyChanging
		entity.Idea = Nothing
	End Sub
End Class

<Table(Name:="dbo.Indicator")>  _
Partial Public Class Indicator
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _LevelIndicator As String
	
	Private _IdEntities As Integer
	
	Private _Code As String
	
	Private _Description As String
	
	Private _Type As String
	
	Private _Goal As String
	
	Private _GreenValue As String
	
	Private _YellowValue As String
	
	Private _RedValue As String
	
	Private _Assumptions As String
	
	Private _SourceVerification As String
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _IdResponsable As System.Nullable(Of Integer)
	
	Private _IndicatorByAccumulationIndicatorSet As EntitySet(Of IndicatorByAccumulationIndicatorSet)
	
	Private _IndicatorInformation As EntitySet(Of IndicatorInformation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnLevelIndicatorChanging(value As String)
    End Sub
    Partial Private Sub OnLevelIndicatorChanged()
    End Sub
    Partial Private Sub OnIdEntitiesChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEntitiesChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnGoalChanging(value As String)
    End Sub
    Partial Private Sub OnGoalChanged()
    End Sub
    Partial Private Sub OnGreenValueChanging(value As String)
    End Sub
    Partial Private Sub OnGreenValueChanged()
    End Sub
    Partial Private Sub OnYellowValueChanging(value As String)
    End Sub
    Partial Private Sub OnYellowValueChanged()
    End Sub
    Partial Private Sub OnRedValueChanging(value As String)
    End Sub
    Partial Private Sub OnRedValueChanged()
    End Sub
    Partial Private Sub OnAssumptionsChanging(value As String)
    End Sub
    Partial Private Sub OnAssumptionsChanged()
    End Sub
    Partial Private Sub OnSourceVerificationChanging(value As String)
    End Sub
    Partial Private Sub OnSourceVerificationChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnIdResponsableChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdResponsableChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IndicatorByAccumulationIndicatorSet = New EntitySet(Of IndicatorByAccumulationIndicatorSet)(AddressOf Me.attach_IndicatorByAccumulationIndicatorSet, AddressOf Me.detach_IndicatorByAccumulationIndicatorSet)
		Me._IndicatorInformation = New EntitySet(Of IndicatorInformation)(AddressOf Me.attach_IndicatorInformation, AddressOf Me.detach_IndicatorInformation)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_LevelIndicator", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property LevelIndicator() As String
		Get
			Return Me._LevelIndicator
		End Get
		Set
			If (String.Equals(Me._LevelIndicator, value) = false) Then
				Me.OnLevelIndicatorChanging(value)
				Me.SendPropertyChanging
				Me._LevelIndicator = value
				Me.SendPropertyChanged("LevelIndicator")
				Me.OnLevelIndicatorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdEntities", DbType:="Int NOT NULL")>  _
	Public Property IdEntities() As Integer
		Get
			Return Me._IdEntities
		End Get
		Set
			If ((Me._IdEntities = value)  _
						= false) Then
				Me.OnIdEntitiesChanging(value)
				Me.SendPropertyChanging
				Me._IdEntities = value
				Me.SendPropertyChanged("IdEntities")
				Me.OnIdEntitiesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Type", DbType:="Char(2) NOT NULL", CanBeNull:=false)>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Goal", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Goal() As String
		Get
			Return Me._Goal
		End Get
		Set
			If (String.Equals(Me._Goal, value) = false) Then
				Me.OnGoalChanging(value)
				Me.SendPropertyChanging
				Me._Goal = value
				Me.SendPropertyChanged("Goal")
				Me.OnGoalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_GreenValue", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property GreenValue() As String
		Get
			Return Me._GreenValue
		End Get
		Set
			If (String.Equals(Me._GreenValue, value) = false) Then
				Me.OnGreenValueChanging(value)
				Me.SendPropertyChanging
				Me._GreenValue = value
				Me.SendPropertyChanged("GreenValue")
				Me.OnGreenValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_YellowValue", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property YellowValue() As String
		Get
			Return Me._YellowValue
		End Get
		Set
			If (String.Equals(Me._YellowValue, value) = false) Then
				Me.OnYellowValueChanging(value)
				Me.SendPropertyChanging
				Me._YellowValue = value
				Me.SendPropertyChanged("YellowValue")
				Me.OnYellowValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RedValue", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property RedValue() As String
		Get
			Return Me._RedValue
		End Get
		Set
			If (String.Equals(Me._RedValue, value) = false) Then
				Me.OnRedValueChanging(value)
				Me.SendPropertyChanging
				Me._RedValue = value
				Me.SendPropertyChanged("RedValue")
				Me.OnRedValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Assumptions", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Assumptions() As String
		Get
			Return Me._Assumptions
		End Get
		Set
			If (String.Equals(Me._Assumptions, value) = false) Then
				Me.OnAssumptionsChanging(value)
				Me.SendPropertyChanging
				Me._Assumptions = value
				Me.SendPropertyChanged("Assumptions")
				Me.OnAssumptionsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SourceVerification", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property SourceVerification() As String
		Get
			Return Me._SourceVerification
		End Get
		Set
			If (String.Equals(Me._SourceVerification, value) = false) Then
				Me.OnSourceVerificationChanging(value)
				Me.SendPropertyChanging
				Me._SourceVerification = value
				Me.SendPropertyChanged("SourceVerification")
				Me.OnSourceVerificationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdResponsable", DbType:="Int")>  _
	Public Property IdResponsable() As System.Nullable(Of Integer)
		Get
			Return Me._IdResponsable
		End Get
		Set
			If (Me._IdResponsable.Equals(value) = false) Then
				Me.OnIdResponsableChanging(value)
				Me.SendPropertyChanging
				Me._IdResponsable = value
				Me.SendPropertyChanged("IdResponsable")
				Me.OnIdResponsableChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Indicator_IndicatorByAccumulationIndicatorSet", Storage:="_IndicatorByAccumulationIndicatorSet", ThisKey:="Id", OtherKey:="IdIndicator")>  _
	Public Property IndicatorByAccumulationIndicatorSet() As EntitySet(Of IndicatorByAccumulationIndicatorSet)
		Get
			Return Me._IndicatorByAccumulationIndicatorSet
		End Get
		Set
			Me._IndicatorByAccumulationIndicatorSet.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Indicator_IndicatorInformation", Storage:="_IndicatorInformation", ThisKey:="Id", OtherKey:="IdIndicator")>  _
	Public Property IndicatorInformation() As EntitySet(Of IndicatorInformation)
		Get
			Return Me._IndicatorInformation
		End Get
		Set
			Me._IndicatorInformation.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_IndicatorByAccumulationIndicatorSet(ByVal entity As IndicatorByAccumulationIndicatorSet)
		Me.SendPropertyChanging
		entity.Indicator = Me
	End Sub
	
	Private Sub detach_IndicatorByAccumulationIndicatorSet(ByVal entity As IndicatorByAccumulationIndicatorSet)
		Me.SendPropertyChanging
		entity.Indicator = Nothing
	End Sub
	
	Private Sub attach_IndicatorInformation(ByVal entity As IndicatorInformation)
		Me.SendPropertyChanging
		entity.Indicator = Me
	End Sub
	
	Private Sub detach_IndicatorInformation(ByVal entity As IndicatorInformation)
		Me.SendPropertyChanging
		entity.Indicator = Nothing
	End Sub
End Class

<Table(Name:="dbo.IndicatorByAccumulationIndicatorSet")>  _
Partial Public Class IndicatorByAccumulationIndicatorSet
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdAccumulationIndicatorSet As Integer
	
	Private _IdIndicator As Integer
	
	Private _AccumulationIndicatorSet As EntityRef(Of AccumulationIndicatorSet)
	
	Private _Indicator As EntityRef(Of Indicator)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdAccumulationIndicatorSetChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdAccumulationIndicatorSetChanged()
    End Sub
    Partial Private Sub OnIdIndicatorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIndicatorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AccumulationIndicatorSet = CType(Nothing, EntityRef(Of AccumulationIndicatorSet))
		Me._Indicator = CType(Nothing, EntityRef(Of Indicator))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdAccumulationIndicatorSet", DbType:="Int NOT NULL")>  _
	Public Property IdAccumulationIndicatorSet() As Integer
		Get
			Return Me._IdAccumulationIndicatorSet
		End Get
		Set
			If ((Me._IdAccumulationIndicatorSet = value)  _
						= false) Then
				If Me._AccumulationIndicatorSet.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdAccumulationIndicatorSetChanging(value)
				Me.SendPropertyChanging
				Me._IdAccumulationIndicatorSet = value
				Me.SendPropertyChanged("IdAccumulationIndicatorSet")
				Me.OnIdAccumulationIndicatorSetChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdIndicator", DbType:="Int NOT NULL")>  _
	Public Property IdIndicator() As Integer
		Get
			Return Me._IdIndicator
		End Get
		Set
			If ((Me._IdIndicator = value)  _
						= false) Then
				If Me._Indicator.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdIndicatorChanging(value)
				Me.SendPropertyChanging
				Me._IdIndicator = value
				Me.SendPropertyChanged("IdIndicator")
				Me.OnIdIndicatorChanged
			End If
		End Set
	End Property
	
	<Association(Name:="AccumulationIndicatorSet_IndicatorByAccumulationIndicatorSet", Storage:="_AccumulationIndicatorSet", ThisKey:="IdAccumulationIndicatorSet", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property AccumulationIndicatorSet() As AccumulationIndicatorSet
		Get
			Return Me._AccumulationIndicatorSet.Entity
		End Get
		Set
			Dim previousValue As AccumulationIndicatorSet = Me._AccumulationIndicatorSet.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AccumulationIndicatorSet.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AccumulationIndicatorSet.Entity = Nothing
					previousValue.IndicatorByAccumulationIndicatorSet.Remove(Me)
				End If
				Me._AccumulationIndicatorSet.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IndicatorByAccumulationIndicatorSet.Add(Me)
					Me._IdAccumulationIndicatorSet = value.Id
				Else
					Me._IdAccumulationIndicatorSet = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("AccumulationIndicatorSet")
			End If
		End Set
	End Property
	
	<Association(Name:="Indicator_IndicatorByAccumulationIndicatorSet", Storage:="_Indicator", ThisKey:="IdIndicator", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Indicator() As Indicator
		Get
			Return Me._Indicator.Entity
		End Get
		Set
			Dim previousValue As Indicator = Me._Indicator.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Indicator.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Indicator.Entity = Nothing
					previousValue.IndicatorByAccumulationIndicatorSet.Remove(Me)
				End If
				Me._Indicator.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IndicatorByAccumulationIndicatorSet.Add(Me)
					Me._IdIndicator = value.Id
				Else
					Me._IdIndicator = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Indicator")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.IndicatorInformation")>  _
Partial Public Class IndicatorInformation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdMeasurementDateByIndicator As System.Nullable(Of Integer)
	
	Private _IdIndicator As System.Nullable(Of Integer)
	
	Private _Description As String
	
	Private _Goal As String
	
	Private _Value As String
	
	Private _Comments As String
	
	Private _RegistrationDate As System.Nullable(Of Date)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _MeasureDate As System.Nullable(Of Date)
	
	Private _Indicator As EntityRef(Of Indicator)
	
	Private _MeasurementDateByIndicator As EntityRef(Of MeasurementDateByIndicator)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdMeasurementDateByIndicatorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdMeasurementDateByIndicatorChanged()
    End Sub
    Partial Private Sub OnIdIndicatorChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdIndicatorChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnGoalChanging(value As String)
    End Sub
    Partial Private Sub OnGoalChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As String)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnRegistrationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnRegistrationDateChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnMeasureDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnMeasureDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Indicator = CType(Nothing, EntityRef(Of Indicator))
		Me._MeasurementDateByIndicator = CType(Nothing, EntityRef(Of MeasurementDateByIndicator))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdMeasurementDateByIndicator", DbType:="Int")>  _
	Public Property IdMeasurementDateByIndicator() As System.Nullable(Of Integer)
		Get
			Return Me._IdMeasurementDateByIndicator
		End Get
		Set
			If (Me._IdMeasurementDateByIndicator.Equals(value) = false) Then
				If Me._MeasurementDateByIndicator.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdMeasurementDateByIndicatorChanging(value)
				Me.SendPropertyChanging
				Me._IdMeasurementDateByIndicator = value
				Me.SendPropertyChanged("IdMeasurementDateByIndicator")
				Me.OnIdMeasurementDateByIndicatorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdIndicator", DbType:="Int")>  _
	Public Property IdIndicator() As System.Nullable(Of Integer)
		Get
			Return Me._IdIndicator
		End Get
		Set
			If (Me._IdIndicator.Equals(value) = false) Then
				If Me._Indicator.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdIndicatorChanging(value)
				Me.SendPropertyChanging
				Me._IdIndicator = value
				Me.SendPropertyChanged("IdIndicator")
				Me.OnIdIndicatorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Goal", DbType:="VarChar(255)")>  _
	Public Property Goal() As String
		Get
			Return Me._Goal
		End Get
		Set
			If (String.Equals(Me._Goal, value) = false) Then
				Me.OnGoalChanging(value)
				Me.SendPropertyChanging
				Me._Goal = value
				Me.SendPropertyChanged("Goal")
				Me.OnGoalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Value", DbType:="VarChar(255)")>  _
	Public Property Value() As String
		Get
			Return Me._Value
		End Get
		Set
			If (String.Equals(Me._Value, value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comments", DbType:="VarChar(255)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RegistrationDate", DbType:="DateTime")>  _
	Public Property RegistrationDate() As System.Nullable(Of Date)
		Get
			Return Me._RegistrationDate
		End Get
		Set
			If (Me._RegistrationDate.Equals(value) = false) Then
				Me.OnRegistrationDateChanging(value)
				Me.SendPropertyChanging
				Me._RegistrationDate = value
				Me.SendPropertyChanged("RegistrationDate")
				Me.OnRegistrationDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MeasureDate", DbType:="DateTime")>  _
	Public Property MeasureDate() As System.Nullable(Of Date)
		Get
			Return Me._MeasureDate
		End Get
		Set
			If (Me._MeasureDate.Equals(value) = false) Then
				Me.OnMeasureDateChanging(value)
				Me.SendPropertyChanging
				Me._MeasureDate = value
				Me.SendPropertyChanged("MeasureDate")
				Me.OnMeasureDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Indicator_IndicatorInformation", Storage:="_Indicator", ThisKey:="IdIndicator", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Indicator() As Indicator
		Get
			Return Me._Indicator.Entity
		End Get
		Set
			Dim previousValue As Indicator = Me._Indicator.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Indicator.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Indicator.Entity = Nothing
					previousValue.IndicatorInformation.Remove(Me)
				End If
				Me._Indicator.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IndicatorInformation.Add(Me)
					Me._IdIndicator = value.Id
				Else
					Me._IdIndicator = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Indicator")
			End If
		End Set
	End Property
	
	<Association(Name:="MeasurementDateByIndicator_IndicatorInformation", Storage:="_MeasurementDateByIndicator", ThisKey:="IdMeasurementDateByIndicator", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property MeasurementDateByIndicator() As MeasurementDateByIndicator
		Get
			Return Me._MeasurementDateByIndicator.Entity
		End Get
		Set
			Dim previousValue As MeasurementDateByIndicator = Me._MeasurementDateByIndicator.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MeasurementDateByIndicator.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MeasurementDateByIndicator.Entity = Nothing
					previousValue.IndicatorInformation.Remove(Me)
				End If
				Me._MeasurementDateByIndicator.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.IndicatorInformation.Add(Me)
					Me._IdMeasurementDateByIndicator = value.Id
				Else
					Me._IdMeasurementDateByIndicator = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("MeasurementDateByIndicator")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Inquest")>  _
Partial Public Class Inquest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IdProject As System.Nullable(Of Integer)
	
	Private _ProjectPhase As String
	
	Private _IdUserGroup As System.Nullable(Of Integer)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _InquestContent As EntitySet(Of InquestContent)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnProjectPhaseChanging(value As String)
    End Sub
    Partial Private Sub OnProjectPhaseChanged()
    End Sub
    Partial Private Sub OnIdUserGroupChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserGroupChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._InquestContent = New EntitySet(Of InquestContent)(AddressOf Me.attach_InquestContent, AddressOf Me.detach_InquestContent)
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int")>  _
	Public Property IdProject() As System.Nullable(Of Integer)
		Get
			Return Me._IdProject
		End Get
		Set
			If (Me._IdProject.Equals(value) = false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProjectPhase", DbType:="VarChar(255)")>  _
	Public Property ProjectPhase() As String
		Get
			Return Me._ProjectPhase
		End Get
		Set
			If (String.Equals(Me._ProjectPhase, value) = false) Then
				Me.OnProjectPhaseChanging(value)
				Me.SendPropertyChanging
				Me._ProjectPhase = value
				Me.SendPropertyChanged("ProjectPhase")
				Me.OnProjectPhaseChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUserGroup", DbType:="Int")>  _
	Public Property IdUserGroup() As System.Nullable(Of Integer)
		Get
			Return Me._IdUserGroup
		End Get
		Set
			If (Me._IdUserGroup.Equals(value) = false) Then
				Me.OnIdUserGroupChanging(value)
				Me.SendPropertyChanging
				Me._IdUserGroup = value
				Me.SendPropertyChanged("IdUserGroup")
				Me.OnIdUserGroupChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Inquest_InquestContent", Storage:="_InquestContent", ThisKey:="Id", OtherKey:="IdInquest")>  _
	Public Property InquestContent() As EntitySet(Of InquestContent)
		Get
			Return Me._InquestContent
		End Get
		Set
			Me._InquestContent.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Inquest", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Inquest.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Inquest.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_InquestContent(ByVal entity As InquestContent)
		Me.SendPropertyChanging
		entity.Inquest = Me
	End Sub
	
	Private Sub detach_InquestContent(ByVal entity As InquestContent)
		Me.SendPropertyChanging
		entity.Inquest = Nothing
	End Sub
End Class

<Table(Name:="dbo.InquestContent")>  _
Partial Public Class InquestContent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdInquest As System.Nullable(Of Integer)
	
	Private _Code As String
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _QuestionsByInquestContent As EntitySet(Of QuestionsByInquestContent)
	
	Private _ResolvedInquest As EntitySet(Of ResolvedInquest)
	
	Private _Inquest As EntityRef(Of Inquest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdInquestChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdInquestChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._QuestionsByInquestContent = New EntitySet(Of QuestionsByInquestContent)(AddressOf Me.attach_QuestionsByInquestContent, AddressOf Me.detach_QuestionsByInquestContent)
		Me._ResolvedInquest = New EntitySet(Of ResolvedInquest)(AddressOf Me.attach_ResolvedInquest, AddressOf Me.detach_ResolvedInquest)
		Me._Inquest = CType(Nothing, EntityRef(Of Inquest))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdInquest", DbType:="Int")>  _
	Public Property IdInquest() As System.Nullable(Of Integer)
		Get
			Return Me._IdInquest
		End Get
		Set
			If (Me._IdInquest.Equals(value) = false) Then
				If Me._Inquest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdInquestChanging(value)
				Me.SendPropertyChanging
				Me._IdInquest = value
				Me.SendPropertyChanged("IdInquest")
				Me.OnIdInquestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="InquestContent_QuestionsByInquestContent", Storage:="_QuestionsByInquestContent", ThisKey:="Id", OtherKey:="IdInquestContent")>  _
	Public Property QuestionsByInquestContent() As EntitySet(Of QuestionsByInquestContent)
		Get
			Return Me._QuestionsByInquestContent
		End Get
		Set
			Me._QuestionsByInquestContent.Assign(value)
		End Set
	End Property
	
	<Association(Name:="InquestContent_ResolvedInquest", Storage:="_ResolvedInquest", ThisKey:="Id", OtherKey:="IdInquestContent")>  _
	Public Property ResolvedInquest() As EntitySet(Of ResolvedInquest)
		Get
			Return Me._ResolvedInquest
		End Get
		Set
			Me._ResolvedInquest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Inquest_InquestContent", Storage:="_Inquest", ThisKey:="IdInquest", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Inquest() As Inquest
		Get
			Return Me._Inquest.Entity
		End Get
		Set
			Dim previousValue As Inquest = Me._Inquest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Inquest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Inquest.Entity = Nothing
					previousValue.InquestContent.Remove(Me)
				End If
				Me._Inquest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.InquestContent.Add(Me)
					Me._IdInquest = value.Id
				Else
					Me._IdInquest = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Inquest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_QuestionsByInquestContent(ByVal entity As QuestionsByInquestContent)
		Me.SendPropertyChanging
		entity.InquestContent = Me
	End Sub
	
	Private Sub detach_QuestionsByInquestContent(ByVal entity As QuestionsByInquestContent)
		Me.SendPropertyChanging
		entity.InquestContent = Nothing
	End Sub
	
	Private Sub attach_ResolvedInquest(ByVal entity As ResolvedInquest)
		Me.SendPropertyChanging
		entity.InquestContent = Me
	End Sub
	
	Private Sub detach_ResolvedInquest(ByVal entity As ResolvedInquest)
		Me.SendPropertyChanging
		entity.InquestContent = Nothing
	End Sub
End Class

<Table(Name:="dbo.LocationByIdea")>  _
Partial Public Class LocationByIdea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdIdea As System.Nullable(Of Integer)
	
	Private _IdDepto As System.Nullable(Of Integer)
	
	Private _IdCity As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdIdeaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdIdeaChanged()
    End Sub
    Partial Private Sub OnIdDeptoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDeptoChanged()
    End Sub
    Partial Private Sub OnIdCityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdIdea", DbType:="Int")>  _
	Public Property IdIdea() As System.Nullable(Of Integer)
		Get
			Return Me._IdIdea
		End Get
		Set
			If (Me._IdIdea.Equals(value) = false) Then
				Me.OnIdIdeaChanging(value)
				Me.SendPropertyChanging
				Me._IdIdea = value
				Me.SendPropertyChanged("IdIdea")
				Me.OnIdIdeaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdDepto", DbType:="Int")>  _
	Public Property IdDepto() As System.Nullable(Of Integer)
		Get
			Return Me._IdDepto
		End Get
		Set
			If (Me._IdDepto.Equals(value) = false) Then
				Me.OnIdDeptoChanging(value)
				Me.SendPropertyChanging
				Me._IdDepto = value
				Me.SendPropertyChanged("IdDepto")
				Me.OnIdDeptoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdCity", DbType:="Int")>  _
	Public Property IdCity() As System.Nullable(Of Integer)
		Get
			Return Me._IdCity
		End Get
		Set
			If (Me._IdCity.Equals(value) = false) Then
				Me.OnIdCityChanging(value)
				Me.SendPropertyChanging
				Me._IdCity = value
				Me.SendPropertyChanged("IdCity")
				Me.OnIdCityChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.LocationByProposal")>  _
Partial Public Class LocationByProposal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProposal As System.Nullable(Of Integer)
	
	Private _IdDepto As System.Nullable(Of Integer)
	
	Private _IdCity As System.Nullable(Of Integer)
	
	Private _Proposal As EntityRef(Of Proposal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProposalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProposalChanged()
    End Sub
    Partial Private Sub OnIdDeptoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdDeptoChanged()
    End Sub
    Partial Private Sub OnIdCityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proposal = CType(Nothing, EntityRef(Of Proposal))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProposal", DbType:="Int")>  _
	Public Property IdProposal() As System.Nullable(Of Integer)
		Get
			Return Me._IdProposal
		End Get
		Set
			If (Me._IdProposal.Equals(value) = false) Then
				If Me._Proposal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProposalChanging(value)
				Me.SendPropertyChanging
				Me._IdProposal = value
				Me.SendPropertyChanged("IdProposal")
				Me.OnIdProposalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdDepto", DbType:="Int")>  _
	Public Property IdDepto() As System.Nullable(Of Integer)
		Get
			Return Me._IdDepto
		End Get
		Set
			If (Me._IdDepto.Equals(value) = false) Then
				Me.OnIdDeptoChanging(value)
				Me.SendPropertyChanging
				Me._IdDepto = value
				Me.SendPropertyChanged("IdDepto")
				Me.OnIdDeptoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdCity", DbType:="Int")>  _
	Public Property IdCity() As System.Nullable(Of Integer)
		Get
			Return Me._IdCity
		End Get
		Set
			If (Me._IdCity.Equals(value) = false) Then
				Me.OnIdCityChanging(value)
				Me.SendPropertyChanging
				Me._IdCity = value
				Me.SendPropertyChanged("IdCity")
				Me.OnIdCityChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Proposal_LocationByProposal", Storage:="_Proposal", ThisKey:="IdProposal", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Proposal() As Proposal
		Get
			Return Me._Proposal.Entity
		End Get
		Set
			Dim previousValue As Proposal = Me._Proposal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Proposal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Proposal.Entity = Nothing
					previousValue.LocationByProposal.Remove(Me)
				End If
				Me._Proposal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.LocationByProposal.Add(Me)
					Me._IdProposal = value.Id
				Else
					Me._IdProposal = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Proposal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Management")>  _
Partial Public Class Management
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IdEnterprise As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _ContractRequest As EntitySet(Of ContractRequest)
	
	Private _StrategicLine As EntitySet(Of StrategicLine)
	
	Private _Strategy As EntitySet(Of Strategy)
	
	Private _Enterprise As EntityRef(Of Enterprise)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdEnterpriseChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEnterpriseChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractRequest = New EntitySet(Of ContractRequest)(AddressOf Me.attach_ContractRequest, AddressOf Me.detach_ContractRequest)
		Me._StrategicLine = New EntitySet(Of StrategicLine)(AddressOf Me.attach_StrategicLine, AddressOf Me.detach_StrategicLine)
		Me._Strategy = New EntitySet(Of Strategy)(AddressOf Me.attach_Strategy, AddressOf Me.detach_Strategy)
		Me._Enterprise = CType(Nothing, EntityRef(Of Enterprise))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdEnterprise", DbType:="Int NOT NULL")>  _
	Public Property IdEnterprise() As Integer
		Get
			Return Me._IdEnterprise
		End Get
		Set
			If ((Me._IdEnterprise = value)  _
						= false) Then
				If Me._Enterprise.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdEnterpriseChanging(value)
				Me.SendPropertyChanging
				Me._IdEnterprise = value
				Me.SendPropertyChanged("IdEnterprise")
				Me.OnIdEnterpriseChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Management_ContractRequest", Storage:="_ContractRequest", ThisKey:="id", OtherKey:="IdManagement")>  _
	Public Property ContractRequest() As EntitySet(Of ContractRequest)
		Get
			Return Me._ContractRequest
		End Get
		Set
			Me._ContractRequest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Management_StrategicLine", Storage:="_StrategicLine", ThisKey:="id", OtherKey:="IdManagment")>  _
	Public Property StrategicLine() As EntitySet(Of StrategicLine)
		Get
			Return Me._StrategicLine
		End Get
		Set
			Me._StrategicLine.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Management_Strategy", Storage:="_Strategy", ThisKey:="id", OtherKey:="IdManagment")>  _
	Public Property Strategy() As EntitySet(Of Strategy)
		Get
			Return Me._Strategy
		End Get
		Set
			Me._Strategy.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Enterprise_Management", Storage:="_Enterprise", ThisKey:="IdEnterprise", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Enterprise() As Enterprise
		Get
			Return Me._Enterprise.Entity
		End Get
		Set
			Dim previousValue As Enterprise = Me._Enterprise.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Enterprise.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Enterprise.Entity = Nothing
					previousValue.Management.Remove(Me)
				End If
				Me._Enterprise.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Management.Add(Me)
					Me._IdEnterprise = value.Id
				Else
					Me._IdEnterprise = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Enterprise")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ContractRequest(ByVal entity As ContractRequest)
		Me.SendPropertyChanging
		entity.Management = Me
	End Sub
	
	Private Sub detach_ContractRequest(ByVal entity As ContractRequest)
		Me.SendPropertyChanging
		entity.Management = Nothing
	End Sub
	
	Private Sub attach_StrategicLine(ByVal entity As StrategicLine)
		Me.SendPropertyChanging
		entity.Management = Me
	End Sub
	
	Private Sub detach_StrategicLine(ByVal entity As StrategicLine)
		Me.SendPropertyChanging
		entity.Management = Nothing
	End Sub
	
	Private Sub attach_Strategy(ByVal entity As Strategy)
		Me.SendPropertyChanging
		entity.Management = Me
	End Sub
	
	Private Sub detach_Strategy(ByVal entity As Strategy)
		Me.SendPropertyChanging
		entity.Management = Nothing
	End Sub
End Class

<Table(Name:="dbo.MeasurementDateByIndicator")>  _
Partial Public Class MeasurementDateByIndicator
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdIndicator As Integer
	
	Private _measurementDate As Date
	
	Private _Measure As String
	
	Private _MeasureType As String
	
	Private _IndicatorInformation As EntitySet(Of IndicatorInformation)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdIndicatorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIndicatorChanged()
    End Sub
    Partial Private Sub OnmeasurementDateChanging(value As Date)
    End Sub
    Partial Private Sub OnmeasurementDateChanged()
    End Sub
    Partial Private Sub OnMeasureChanging(value As String)
    End Sub
    Partial Private Sub OnMeasureChanged()
    End Sub
    Partial Private Sub OnMeasureTypeChanging(value As String)
    End Sub
    Partial Private Sub OnMeasureTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IndicatorInformation = New EntitySet(Of IndicatorInformation)(AddressOf Me.attach_IndicatorInformation, AddressOf Me.detach_IndicatorInformation)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdIndicator", DbType:="Int NOT NULL")>  _
	Public Property IdIndicator() As Integer
		Get
			Return Me._IdIndicator
		End Get
		Set
			If ((Me._IdIndicator = value)  _
						= false) Then
				Me.OnIdIndicatorChanging(value)
				Me.SendPropertyChanging
				Me._IdIndicator = value
				Me.SendPropertyChanged("IdIndicator")
				Me.OnIdIndicatorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_measurementDate", DbType:="DateTime NOT NULL")>  _
	Public Property measurementDate() As Date
		Get
			Return Me._measurementDate
		End Get
		Set
			If ((Me._measurementDate = value)  _
						= false) Then
				Me.OnmeasurementDateChanging(value)
				Me.SendPropertyChanging
				Me._measurementDate = value
				Me.SendPropertyChanged("measurementDate")
				Me.OnmeasurementDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Measure", DbType:="NVarChar(50)")>  _
	Public Property Measure() As String
		Get
			Return Me._Measure
		End Get
		Set
			If (String.Equals(Me._Measure, value) = false) Then
				Me.OnMeasureChanging(value)
				Me.SendPropertyChanging
				Me._Measure = value
				Me.SendPropertyChanged("Measure")
				Me.OnMeasureChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MeasureType", DbType:="NVarChar(50)")>  _
	Public Property MeasureType() As String
		Get
			Return Me._MeasureType
		End Get
		Set
			If (String.Equals(Me._MeasureType, value) = false) Then
				Me.OnMeasureTypeChanging(value)
				Me.SendPropertyChanging
				Me._MeasureType = value
				Me.SendPropertyChanged("MeasureType")
				Me.OnMeasureTypeChanged
			End If
		End Set
	End Property
	
	<Association(Name:="MeasurementDateByIndicator_IndicatorInformation", Storage:="_IndicatorInformation", ThisKey:="Id", OtherKey:="IdMeasurementDateByIndicator")>  _
	Public Property IndicatorInformation() As EntitySet(Of IndicatorInformation)
		Get
			Return Me._IndicatorInformation
		End Get
		Set
			Me._IndicatorInformation.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_IndicatorInformation(ByVal entity As IndicatorInformation)
		Me.SendPropertyChanging
		entity.MeasurementDateByIndicator = Me
	End Sub
	
	Private Sub detach_IndicatorInformation(ByVal entity As IndicatorInformation)
		Me.SendPropertyChanging
		entity.MeasurementDateByIndicator = Nothing
	End Sub
End Class

<Table(Name:="dbo.Mitigation")>  _
Partial Public Class Mitigation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _ImpactOnRisk As Byte
	
	Private _IdResponsible As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _MitigationByRisk As EntitySet(Of MitigationByRisk)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnImpactOnRiskChanging(value As Byte)
    End Sub
    Partial Private Sub OnImpactOnRiskChanged()
    End Sub
    Partial Private Sub OnIdResponsibleChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdResponsibleChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MitigationByRisk = New EntitySet(Of MitigationByRisk)(AddressOf Me.attach_MitigationByRisk, AddressOf Me.detach_MitigationByRisk)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ImpactOnRisk", DbType:="TinyInt NOT NULL")>  _
	Public Property ImpactOnRisk() As Byte
		Get
			Return Me._ImpactOnRisk
		End Get
		Set
			If ((Me._ImpactOnRisk = value)  _
						= false) Then
				Me.OnImpactOnRiskChanging(value)
				Me.SendPropertyChanging
				Me._ImpactOnRisk = value
				Me.SendPropertyChanged("ImpactOnRisk")
				Me.OnImpactOnRiskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdResponsible", DbType:="Int NOT NULL")>  _
	Public Property IdResponsible() As Integer
		Get
			Return Me._IdResponsible
		End Get
		Set
			If ((Me._IdResponsible = value)  _
						= false) Then
				Me.OnIdResponsibleChanging(value)
				Me.SendPropertyChanging
				Me._IdResponsible = value
				Me.SendPropertyChanged("IdResponsible")
				Me.OnIdResponsibleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Mitigation_MitigationByRisk", Storage:="_MitigationByRisk", ThisKey:="Id", OtherKey:="IdMitigation")>  _
	Public Property MitigationByRisk() As EntitySet(Of MitigationByRisk)
		Get
			Return Me._MitigationByRisk
		End Get
		Set
			Me._MitigationByRisk.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MitigationByRisk(ByVal entity As MitigationByRisk)
		Me.SendPropertyChanging
		entity.Mitigation = Me
	End Sub
	
	Private Sub detach_MitigationByRisk(ByVal entity As MitigationByRisk)
		Me.SendPropertyChanging
		entity.Mitigation = Nothing
	End Sub
End Class

<Table(Name:="dbo.MitigationByRisk")>  _
Partial Public Class MitigationByRisk
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdRisk As System.Nullable(Of Integer)
	
	Private _IdMitigation As System.Nullable(Of Integer)
	
	Private _Mitigation As EntityRef(Of Mitigation)
	
	Private _Risk As EntityRef(Of Risk)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdRiskChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdRiskChanged()
    End Sub
    Partial Private Sub OnIdMitigationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdMitigationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Mitigation = CType(Nothing, EntityRef(Of Mitigation))
		Me._Risk = CType(Nothing, EntityRef(Of Risk))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdRisk", DbType:="Int")>  _
	Public Property IdRisk() As System.Nullable(Of Integer)
		Get
			Return Me._IdRisk
		End Get
		Set
			If (Me._IdRisk.Equals(value) = false) Then
				If Me._Risk.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdRiskChanging(value)
				Me.SendPropertyChanging
				Me._IdRisk = value
				Me.SendPropertyChanged("IdRisk")
				Me.OnIdRiskChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdMitigation", DbType:="Int")>  _
	Public Property IdMitigation() As System.Nullable(Of Integer)
		Get
			Return Me._IdMitigation
		End Get
		Set
			If (Me._IdMitigation.Equals(value) = false) Then
				If Me._Mitigation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdMitigationChanging(value)
				Me.SendPropertyChanging
				Me._IdMitigation = value
				Me.SendPropertyChanged("IdMitigation")
				Me.OnIdMitigationChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Mitigation_MitigationByRisk", Storage:="_Mitigation", ThisKey:="IdMitigation", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Mitigation() As Mitigation
		Get
			Return Me._Mitigation.Entity
		End Get
		Set
			Dim previousValue As Mitigation = Me._Mitigation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Mitigation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Mitigation.Entity = Nothing
					previousValue.MitigationByRisk.Remove(Me)
				End If
				Me._Mitigation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MitigationByRisk.Add(Me)
					Me._IdMitigation = value.Id
				Else
					Me._IdMitigation = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Mitigation")
			End If
		End Set
	End Property
	
	<Association(Name:="Risk_MitigationByRisk", Storage:="_Risk", ThisKey:="IdRisk", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Risk() As Risk
		Get
			Return Me._Risk.Entity
		End Get
		Set
			Dim previousValue As Risk = Me._Risk.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Risk.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Risk.Entity = Nothing
					previousValue.MitigationByRisk.Remove(Me)
				End If
				Me._Risk.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MitigationByRisk.Add(Me)
					Me._IdRisk = value.Id
				Else
					Me._IdRisk = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Risk")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Objective")>  _
Partial Public Class Objective
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IdProject As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _idKey As System.Nullable(Of Integer)
	
	Private _isLastVersion As System.Nullable(Of Boolean)
	
	Private _IdPhase As System.Nullable(Of Integer)
	
	Private _Component As EntitySet(Of Component)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnidKeyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidKeyChanged()
    End Sub
    Partial Private Sub OnisLastVersionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisLastVersionChanged()
    End Sub
    Partial Private Sub OnIdPhaseChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPhaseChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Component = New EntitySet(Of Component)(AddressOf Me.attach_Component, AddressOf Me.detach_Component)
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(800) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idKey", DbType:="Int")>  _
	Public Property idKey() As System.Nullable(Of Integer)
		Get
			Return Me._idKey
		End Get
		Set
			If (Me._idKey.Equals(value) = false) Then
				Me.OnidKeyChanging(value)
				Me.SendPropertyChanging
				Me._idKey = value
				Me.SendPropertyChanged("idKey")
				Me.OnidKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isLastVersion", DbType:="Bit")>  _
	Public Property isLastVersion() As System.Nullable(Of Boolean)
		Get
			Return Me._isLastVersion
		End Get
		Set
			If (Me._isLastVersion.Equals(value) = false) Then
				Me.OnisLastVersionChanging(value)
				Me.SendPropertyChanging
				Me._isLastVersion = value
				Me.SendPropertyChanged("isLastVersion")
				Me.OnisLastVersionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdPhase", DbType:="Int")>  _
	Public Property IdPhase() As System.Nullable(Of Integer)
		Get
			Return Me._IdPhase
		End Get
		Set
			If (Me._IdPhase.Equals(value) = false) Then
				Me.OnIdPhaseChanging(value)
				Me.SendPropertyChanging
				Me._IdPhase = value
				Me.SendPropertyChanged("IdPhase")
				Me.OnIdPhaseChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Objective_Component", Storage:="_Component", ThisKey:="Id", OtherKey:="IdObjective")>  _
	Public Property Component() As EntitySet(Of Component)
		Get
			Return Me._Component
		End Get
		Set
			Me._Component.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Objective", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Objective1.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Objective1.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Component(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.Objective = Me
	End Sub
	
	Private Sub detach_Component(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.Objective = Nothing
	End Sub
End Class

<Table(Name:="dbo.ObjectiveByActivity")>  _
Partial Public Class ObjectiveByActivity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdActivity As System.Nullable(Of Integer)
	
	Private _IdObjective As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdActivityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdActivityChanged()
    End Sub
    Partial Private Sub OnIdObjectiveChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdObjectiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdActivity", DbType:="Int")>  _
	Public Property IdActivity() As System.Nullable(Of Integer)
		Get
			Return Me._IdActivity
		End Get
		Set
			If (Me._IdActivity.Equals(value) = false) Then
				Me.OnIdActivityChanging(value)
				Me.SendPropertyChanging
				Me._IdActivity = value
				Me.SendPropertyChanged("IdActivity")
				Me.OnIdActivityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdObjective", DbType:="Int")>  _
	Public Property IdObjective() As System.Nullable(Of Integer)
		Get
			Return Me._IdObjective
		End Get
		Set
			If (Me._IdObjective.Equals(value) = false) Then
				Me.OnIdObjectiveChanging(value)
				Me.SendPropertyChanging
				Me._IdObjective = value
				Me.SendPropertyChanged("IdObjective")
				Me.OnIdObjectiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.OperatorByProject")>  _
Partial Public Class OperatorByProject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProject As Integer
	
	Private _IdOperator As Integer
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnIdOperatorChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdOperatorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdOperator", DbType:="Int NOT NULL")>  _
	Public Property IdOperator() As Integer
		Get
			Return Me._IdOperator
		End Get
		Set
			If ((Me._IdOperator = value)  _
						= false) Then
				Me.OnIdOperatorChanging(value)
				Me.SendPropertyChanging
				Me._IdOperator = value
				Me.SendPropertyChanged("IdOperator")
				Me.OnIdOperatorChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_OperatorByProject", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.OperatorByProject.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OperatorByProject.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Paymentflow")>  _
Partial Public Class Paymentflow
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _idproject As Integer
	
	Private _fecha As System.Nullable(Of Date)
	
	Private _porcentaje As System.Nullable(Of Decimal)
	
	Private _entregable As String
	
	Private _ididea As Integer
	
	Private _valorparcial As System.Nullable(Of Decimal)
	
	Private _valortotal As System.Nullable(Of Decimal)
	
	Private _idideaaproval As System.Nullable(Of Integer)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnidprojectChanging(value As Integer)
    End Sub
    Partial Private Sub OnidprojectChanged()
    End Sub
    Partial Private Sub OnfechaChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnfechaChanged()
    End Sub
    Partial Private Sub OnporcentajeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnporcentajeChanged()
    End Sub
    Partial Private Sub OnentregableChanging(value As String)
    End Sub
    Partial Private Sub OnentregableChanged()
    End Sub
    Partial Private Sub OnidideaChanging(value As Integer)
    End Sub
    Partial Private Sub OnidideaChanged()
    End Sub
    Partial Private Sub OnvalorparcialChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnvalorparcialChanged()
    End Sub
    Partial Private Sub OnvalortotalChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnvalortotalChanged()
    End Sub
    Partial Private Sub OnidideaaprovalChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidideaaprovalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idproject", DbType:="Int NOT NULL")>  _
	Public Property idproject() As Integer
		Get
			Return Me._idproject
		End Get
		Set
			If ((Me._idproject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnidprojectChanging(value)
				Me.SendPropertyChanging
				Me._idproject = value
				Me.SendPropertyChanged("idproject")
				Me.OnidprojectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fecha", DbType:="DateTime")>  _
	Public Property fecha() As System.Nullable(Of Date)
		Get
			Return Me._fecha
		End Get
		Set
			If (Me._fecha.Equals(value) = false) Then
				Me.OnfechaChanging(value)
				Me.SendPropertyChanging
				Me._fecha = value
				Me.SendPropertyChanged("fecha")
				Me.OnfechaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_porcentaje", DbType:="Decimal(18,1)")>  _
	Public Property porcentaje() As System.Nullable(Of Decimal)
		Get
			Return Me._porcentaje
		End Get
		Set
			If (Me._porcentaje.Equals(value) = false) Then
				Me.OnporcentajeChanging(value)
				Me.SendPropertyChanging
				Me._porcentaje = value
				Me.SendPropertyChanged("porcentaje")
				Me.OnporcentajeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_entregable", DbType:="Text", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property entregable() As String
		Get
			Return Me._entregable
		End Get
		Set
			If (String.Equals(Me._entregable, value) = false) Then
				Me.OnentregableChanging(value)
				Me.SendPropertyChanging
				Me._entregable = value
				Me.SendPropertyChanged("entregable")
				Me.OnentregableChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ididea", DbType:="Int NOT NULL")>  _
	Public Property ididea() As Integer
		Get
			Return Me._ididea
		End Get
		Set
			If ((Me._ididea = value)  _
						= false) Then
				Me.OnidideaChanging(value)
				Me.SendPropertyChanging
				Me._ididea = value
				Me.SendPropertyChanged("ididea")
				Me.OnidideaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_valorparcial", DbType:="Decimal(18,1)")>  _
	Public Property valorparcial() As System.Nullable(Of Decimal)
		Get
			Return Me._valorparcial
		End Get
		Set
			If (Me._valorparcial.Equals(value) = false) Then
				Me.OnvalorparcialChanging(value)
				Me.SendPropertyChanging
				Me._valorparcial = value
				Me.SendPropertyChanged("valorparcial")
				Me.OnvalorparcialChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_valortotal", DbType:="Decimal(18,1)")>  _
	Public Property valortotal() As System.Nullable(Of Decimal)
		Get
			Return Me._valortotal
		End Get
		Set
			If (Me._valortotal.Equals(value) = false) Then
				Me.OnvalortotalChanging(value)
				Me.SendPropertyChanging
				Me._valortotal = value
				Me.SendPropertyChanged("valortotal")
				Me.OnvalortotalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idideaaproval", DbType:="Int")>  _
	Public Property idideaaproval() As System.Nullable(Of Integer)
		Get
			Return Me._idideaaproval
		End Get
		Set
			If (Me._idideaaproval.Equals(value) = false) Then
				Me.OnidideaaprovalChanging(value)
				Me.SendPropertyChanging
				Me._idideaaproval = value
				Me.SendPropertyChanged("idideaaproval")
				Me.OnidideaaprovalChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_Paymentflow", Storage:="_Project", ThisKey:="idproject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Paymentflow.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Paymentflow.Add(Me)
					Me._idproject = value.Id
				Else
					Me._idproject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.PaymentsListByContractRequest")>  _
Partial Public Class PaymentsListByContractRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdContractRequest As Integer
	
	Private _Value As System.Nullable(Of Decimal)
	
	Private _Percentage As System.Nullable(Of Decimal)
	
	Private _Date As System.Nullable(Of Date)
	
	Private _FinalPaymentDate As System.Nullable(Of Date)
	
	Private _FinalPaymentValue As System.Nullable(Of Decimal)
	
	Private _ContractRequest As EntityRef(Of ContractRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdContractRequestChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdContractRequestChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnPercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPercentageChanged()
    End Sub
    Partial Private Sub OnDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateChanged()
    End Sub
    Partial Private Sub OnFinalPaymentDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnFinalPaymentDateChanged()
    End Sub
    Partial Private Sub OnFinalPaymentValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFinalPaymentValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractRequest = CType(Nothing, EntityRef(Of ContractRequest))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdContractRequest", DbType:="Int NOT NULL")>  _
	Public Property IdContractRequest() As Integer
		Get
			Return Me._IdContractRequest
		End Get
		Set
			If ((Me._IdContractRequest = value)  _
						= false) Then
				If Me._ContractRequest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdContractRequestChanging(value)
				Me.SendPropertyChanging
				Me._IdContractRequest = value
				Me.SendPropertyChanged("IdContractRequest")
				Me.OnIdContractRequestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Value", DbType:="Decimal(17,2)")>  _
	Public Property Value() As System.Nullable(Of Decimal)
		Get
			Return Me._Value
		End Get
		Set
			If (Me._Value.Equals(value) = false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Percentage", DbType:="Decimal(4,2)")>  _
	Public Property Percentage() As System.Nullable(Of Decimal)
		Get
			Return Me._Percentage
		End Get
		Set
			If (Me._Percentage.Equals(value) = false) Then
				Me.OnPercentageChanging(value)
				Me.SendPropertyChanging
				Me._Percentage = value
				Me.SendPropertyChanged("Percentage")
				Me.OnPercentageChanged
			End If
		End Set
	End Property
	
	<Column(Name:="Date", Storage:="_Date", DbType:="DateTime")>  _
	Public Property [Date]() As System.Nullable(Of Date)
		Get
			Return Me._Date
		End Get
		Set
			If (Me._Date.Equals(value) = false) Then
				Me.OnDateChanging(value)
				Me.SendPropertyChanging
				Me._Date = value
				Me.SendPropertyChanged("[Date]")
				Me.OnDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FinalPaymentDate", DbType:="DateTime")>  _
	Public Property FinalPaymentDate() As System.Nullable(Of Date)
		Get
			Return Me._FinalPaymentDate
		End Get
		Set
			If (Me._FinalPaymentDate.Equals(value) = false) Then
				Me.OnFinalPaymentDateChanging(value)
				Me.SendPropertyChanging
				Me._FinalPaymentDate = value
				Me.SendPropertyChanged("FinalPaymentDate")
				Me.OnFinalPaymentDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FinalPaymentValue", DbType:="Decimal(17,2)")>  _
	Public Property FinalPaymentValue() As System.Nullable(Of Decimal)
		Get
			Return Me._FinalPaymentValue
		End Get
		Set
			If (Me._FinalPaymentValue.Equals(value) = false) Then
				Me.OnFinalPaymentValueChanging(value)
				Me.SendPropertyChanging
				Me._FinalPaymentValue = value
				Me.SendPropertyChanged("FinalPaymentValue")
				Me.OnFinalPaymentValueChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_PaymentsListByContractRequest", Storage:="_ContractRequest", ThisKey:="IdContractRequest", OtherKey:="RequestNumber", IsForeignKey:=true)>  _
	Public Property ContractRequest() As ContractRequest
		Get
			Return Me._ContractRequest.Entity
		End Get
		Set
			Dim previousValue As ContractRequest = Me._ContractRequest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractRequest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractRequest.Entity = Nothing
					previousValue.PaymentsListByContractRequest.Remove(Me)
				End If
				Me._ContractRequest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PaymentsListByContractRequest.Add(Me)
					Me._IdContractRequest = value.RequestNumber
				Else
					Me._IdContractRequest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ContractRequest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Perspective")>  _
Partial Public Class Perspective
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IdEnterprise As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _StrategicObjective As EntitySet(Of StrategicObjective)
	
	Private _Enterprise As EntityRef(Of Enterprise)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdEnterpriseChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEnterpriseChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._StrategicObjective = New EntitySet(Of StrategicObjective)(AddressOf Me.attach_StrategicObjective, AddressOf Me.detach_StrategicObjective)
		Me._Enterprise = CType(Nothing, EntityRef(Of Enterprise))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdEnterprise", DbType:="Int NOT NULL")>  _
	Public Property IdEnterprise() As Integer
		Get
			Return Me._IdEnterprise
		End Get
		Set
			If ((Me._IdEnterprise = value)  _
						= false) Then
				If Me._Enterprise.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdEnterpriseChanging(value)
				Me.SendPropertyChanging
				Me._IdEnterprise = value
				Me.SendPropertyChanged("IdEnterprise")
				Me.OnIdEnterpriseChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Perspective_StrategicObjective", Storage:="_StrategicObjective", ThisKey:="Id", OtherKey:="IdPerspective")>  _
	Public Property StrategicObjective() As EntitySet(Of StrategicObjective)
		Get
			Return Me._StrategicObjective
		End Get
		Set
			Me._StrategicObjective.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Enterprise_Perspective", Storage:="_Enterprise", ThisKey:="IdEnterprise", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Enterprise() As Enterprise
		Get
			Return Me._Enterprise.Entity
		End Get
		Set
			Dim previousValue As Enterprise = Me._Enterprise.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Enterprise.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Enterprise.Entity = Nothing
					previousValue.Perspective.Remove(Me)
				End If
				Me._Enterprise.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Perspective.Add(Me)
					Me._IdEnterprise = value.Id
				Else
					Me._IdEnterprise = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Enterprise")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_StrategicObjective(ByVal entity As StrategicObjective)
		Me.SendPropertyChanging
		entity.Perspective = Me
	End Sub
	
	Private Sub detach_StrategicObjective(ByVal entity As StrategicObjective)
		Me.SendPropertyChanging
		entity.Perspective = Nothing
	End Sub
End Class

<Table(Name:="dbo.Poliza")>  _
Partial Public Class Poliza
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _numero_poliza As String
	
	Private _consecutivo As System.Nullable(Of Integer)
	
	Private _contrato_id As Integer
	
	Private _fecha_exp As System.Nullable(Of Date)
	
	Private _fecha_ven As System.Nullable(Of Date)
	
	Private _aseguradora As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub Onnumero_polizaChanging(value As String)
    End Sub
    Partial Private Sub Onnumero_polizaChanged()
    End Sub
    Partial Private Sub OnconsecutivoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnconsecutivoChanged()
    End Sub
    Partial Private Sub Oncontrato_idChanging(value As Integer)
    End Sub
    Partial Private Sub Oncontrato_idChanged()
    End Sub
    Partial Private Sub Onfecha_expChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_expChanged()
    End Sub
    Partial Private Sub Onfecha_venChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub Onfecha_venChanged()
    End Sub
    Partial Private Sub OnaseguradoraChanging(value As String)
    End Sub
    Partial Private Sub OnaseguradoraChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_numero_poliza", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property numero_poliza() As String
		Get
			Return Me._numero_poliza
		End Get
		Set
			If (String.Equals(Me._numero_poliza, value) = false) Then
				Me.Onnumero_polizaChanging(value)
				Me.SendPropertyChanging
				Me._numero_poliza = value
				Me.SendPropertyChanged("numero_poliza")
				Me.Onnumero_polizaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_consecutivo", DbType:="Int")>  _
	Public Property consecutivo() As System.Nullable(Of Integer)
		Get
			Return Me._consecutivo
		End Get
		Set
			If (Me._consecutivo.Equals(value) = false) Then
				Me.OnconsecutivoChanging(value)
				Me.SendPropertyChanging
				Me._consecutivo = value
				Me.SendPropertyChanged("consecutivo")
				Me.OnconsecutivoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contrato_id", DbType:="Int NOT NULL")>  _
	Public Property contrato_id() As Integer
		Get
			Return Me._contrato_id
		End Get
		Set
			If ((Me._contrato_id = value)  _
						= false) Then
				Me.Oncontrato_idChanging(value)
				Me.SendPropertyChanging
				Me._contrato_id = value
				Me.SendPropertyChanged("contrato_id")
				Me.Oncontrato_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fecha_exp", DbType:="DateTime")>  _
	Public Property fecha_exp() As System.Nullable(Of Date)
		Get
			Return Me._fecha_exp
		End Get
		Set
			If (Me._fecha_exp.Equals(value) = false) Then
				Me.Onfecha_expChanging(value)
				Me.SendPropertyChanging
				Me._fecha_exp = value
				Me.SendPropertyChanged("fecha_exp")
				Me.Onfecha_expChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_fecha_ven", DbType:="DateTime")>  _
	Public Property fecha_ven() As System.Nullable(Of Date)
		Get
			Return Me._fecha_ven
		End Get
		Set
			If (Me._fecha_ven.Equals(value) = false) Then
				Me.Onfecha_venChanging(value)
				Me.SendPropertyChanging
				Me._fecha_ven = value
				Me.SendPropertyChanged("fecha_ven")
				Me.Onfecha_venChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_aseguradora", DbType:="VarChar(255)")>  _
	Public Property aseguradora() As String
		Get
			Return Me._aseguradora
		End Get
		Set
			If (String.Equals(Me._aseguradora, value) = false) Then
				Me.OnaseguradoraChanging(value)
				Me.SendPropertyChanging
				Me._aseguradora = value
				Me.SendPropertyChanged("aseguradora")
				Me.OnaseguradoraChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.PolizaDetails")>  _
Partial Public Class PolizaDetails
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Id_Poliza As Integer
	
	Private _Concepto As String
	
	Private _Consecutivo As String
	
	Private _aseguradora As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnId_PolizaChanging(value As Integer)
    End Sub
    Partial Private Sub OnId_PolizaChanged()
    End Sub
    Partial Private Sub OnConceptoChanging(value As String)
    End Sub
    Partial Private Sub OnConceptoChanged()
    End Sub
    Partial Private Sub OnConsecutivoChanging(value As String)
    End Sub
    Partial Private Sub OnConsecutivoChanged()
    End Sub
    Partial Private Sub OnaseguradoraChanging(value As String)
    End Sub
    Partial Private Sub OnaseguradoraChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Id_Poliza", DbType:="Int NOT NULL")>  _
	Public Property Id_Poliza() As Integer
		Get
			Return Me._Id_Poliza
		End Get
		Set
			If ((Me._Id_Poliza = value)  _
						= false) Then
				Me.OnId_PolizaChanging(value)
				Me.SendPropertyChanging
				Me._Id_Poliza = value
				Me.SendPropertyChanged("Id_Poliza")
				Me.OnId_PolizaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Concepto", DbType:="VarChar(50)")>  _
	Public Property Concepto() As String
		Get
			Return Me._Concepto
		End Get
		Set
			If (String.Equals(Me._Concepto, value) = false) Then
				Me.OnConceptoChanging(value)
				Me.SendPropertyChanging
				Me._Concepto = value
				Me.SendPropertyChanged("Concepto")
				Me.OnConceptoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Consecutivo", DbType:="VarChar(50)")>  _
	Public Property Consecutivo() As String
		Get
			Return Me._Consecutivo
		End Get
		Set
			If (String.Equals(Me._Consecutivo, value) = false) Then
				Me.OnConsecutivoChanging(value)
				Me.SendPropertyChanging
				Me._Consecutivo = value
				Me.SendPropertyChanged("Consecutivo")
				Me.OnConsecutivoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_aseguradora", DbType:="VarChar(200)")>  _
	Public Property aseguradora() As String
		Get
			Return Me._aseguradora
		End Get
		Set
			If (String.Equals(Me._aseguradora, value) = false) Then
				Me.OnaseguradoraChanging(value)
				Me.SendPropertyChanging
				Me._aseguradora = value
				Me.SendPropertyChanged("aseguradora")
				Me.OnaseguradoraChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Proceeding_Logs")>  _
Partial Public Class Proceeding_Logs
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Project_Id As Integer
	
	Private _Acta_id As Integer
	
	Private _Tipo_Acta_id As Integer
	
	Private _User_id As Integer
	
	Private _Create_Date As Date
	
	Private _FileName As String
	
	Private _Compromise As EntitySet(Of Compromise)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnProject_IdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProject_IdChanged()
    End Sub
    Partial Private Sub OnActa_idChanging(value As Integer)
    End Sub
    Partial Private Sub OnActa_idChanged()
    End Sub
    Partial Private Sub OnTipo_Acta_idChanging(value As Integer)
    End Sub
    Partial Private Sub OnTipo_Acta_idChanged()
    End Sub
    Partial Private Sub OnUser_idChanging(value As Integer)
    End Sub
    Partial Private Sub OnUser_idChanged()
    End Sub
    Partial Private Sub OnCreate_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreate_DateChanged()
    End Sub
    Partial Private Sub OnFileNameChanging(value As String)
    End Sub
    Partial Private Sub OnFileNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Compromise = New EntitySet(Of Compromise)(AddressOf Me.attach_Compromise, AddressOf Me.detach_Compromise)
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Project_Id", DbType:="Int NOT NULL")>  _
	Public Property Project_Id() As Integer
		Get
			Return Me._Project_Id
		End Get
		Set
			If ((Me._Project_Id = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnProject_IdChanging(value)
				Me.SendPropertyChanging
				Me._Project_Id = value
				Me.SendPropertyChanged("Project_Id")
				Me.OnProject_IdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Acta_id", DbType:="Int NOT NULL")>  _
	Public Property Acta_id() As Integer
		Get
			Return Me._Acta_id
		End Get
		Set
			If ((Me._Acta_id = value)  _
						= false) Then
				Me.OnActa_idChanging(value)
				Me.SendPropertyChanging
				Me._Acta_id = value
				Me.SendPropertyChanged("Acta_id")
				Me.OnActa_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Tipo_Acta_id", DbType:="Int NOT NULL")>  _
	Public Property Tipo_Acta_id() As Integer
		Get
			Return Me._Tipo_Acta_id
		End Get
		Set
			If ((Me._Tipo_Acta_id = value)  _
						= false) Then
				Me.OnTipo_Acta_idChanging(value)
				Me.SendPropertyChanging
				Me._Tipo_Acta_id = value
				Me.SendPropertyChanged("Tipo_Acta_id")
				Me.OnTipo_Acta_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_User_id", DbType:="Int NOT NULL")>  _
	Public Property User_id() As Integer
		Get
			Return Me._User_id
		End Get
		Set
			If ((Me._User_id = value)  _
						= false) Then
				Me.OnUser_idChanging(value)
				Me.SendPropertyChanging
				Me._User_id = value
				Me.SendPropertyChanged("User_id")
				Me.OnUser_idChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Create_Date", DbType:="DateTime NOT NULL")>  _
	Public Property Create_Date() As Date
		Get
			Return Me._Create_Date
		End Get
		Set
			If ((Me._Create_Date = value)  _
						= false) Then
				Me.OnCreate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Create_Date = value
				Me.SendPropertyChanged("Create_Date")
				Me.OnCreate_DateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FileName", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property FileName() As String
		Get
			Return Me._FileName
		End Get
		Set
			If (String.Equals(Me._FileName, value) = false) Then
				Me.OnFileNameChanging(value)
				Me.SendPropertyChanging
				Me._FileName = value
				Me.SendPropertyChanged("FileName")
				Me.OnFileNameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Proceeding_Logs_Compromise", Storage:="_Compromise", ThisKey:="Id", OtherKey:="proceeding_log_id")>  _
	Public Property Compromise() As EntitySet(Of Compromise)
		Get
			Return Me._Compromise
		End Get
		Set
			Me._Compromise.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Proceeding_Logs", Storage:="_Project", ThisKey:="Project_Id", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.Proceeding_Logs.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proceeding_Logs.Add(Me)
					Me._Project_Id = value.Id
				Else
					Me._Project_Id = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Compromise(ByVal entity As Compromise)
		Me.SendPropertyChanging
		entity.Proceeding_Logs = Me
	End Sub
	
	Private Sub detach_Compromise(ByVal entity As Compromise)
		Me.SendPropertyChanging
		entity.Proceeding_Logs = Nothing
	End Sub
End Class

<Table(Name:="dbo.Program")>  _
Partial Public Class Program
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IdStrategicLine As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _ProgramComponent As EntitySet(Of ProgramComponent)
	
	Private _StrategicLine As EntityRef(Of StrategicLine)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdStrategicLineChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdStrategicLineChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProgramComponent = New EntitySet(Of ProgramComponent)(AddressOf Me.attach_ProgramComponent, AddressOf Me.detach_ProgramComponent)
		Me._StrategicLine = CType(Nothing, EntityRef(Of StrategicLine))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(255)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdStrategicLine", DbType:="Int NOT NULL")>  _
	Public Property IdStrategicLine() As Integer
		Get
			Return Me._IdStrategicLine
		End Get
		Set
			If ((Me._IdStrategicLine = value)  _
						= false) Then
				If Me._StrategicLine.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdStrategicLineChanging(value)
				Me.SendPropertyChanging
				Me._IdStrategicLine = value
				Me.SendPropertyChanged("IdStrategicLine")
				Me.OnIdStrategicLineChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Program_ProgramComponent", Storage:="_ProgramComponent", ThisKey:="Id", OtherKey:="IdProgram")>  _
	Public Property ProgramComponent() As EntitySet(Of ProgramComponent)
		Get
			Return Me._ProgramComponent
		End Get
		Set
			Me._ProgramComponent.Assign(value)
		End Set
	End Property
	
	<Association(Name:="StrategicLine_Program", Storage:="_StrategicLine", ThisKey:="IdStrategicLine", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property StrategicLine() As StrategicLine
		Get
			Return Me._StrategicLine.Entity
		End Get
		Set
			Dim previousValue As StrategicLine = Me._StrategicLine.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StrategicLine.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StrategicLine.Entity = Nothing
					previousValue.Program.Remove(Me)
				End If
				Me._StrategicLine.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Program.Add(Me)
					Me._IdStrategicLine = value.Id
				Else
					Me._IdStrategicLine = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("StrategicLine")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProgramComponent(ByVal entity As ProgramComponent)
		Me.SendPropertyChanging
		entity.Program = Me
	End Sub
	
	Private Sub detach_ProgramComponent(ByVal entity As ProgramComponent)
		Me.SendPropertyChanging
		entity.Program = Nothing
	End Sub
End Class

<Table(Name:="dbo.ProgramComponent")>  _
Partial Public Class ProgramComponent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _IdProgram As Integer
	
	Private _IdResponsible As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _ProgramComponentByProject As EntitySet(Of ProgramComponentByProject)
	
	Private _Program As EntityRef(Of Program)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIdProgramChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProgramChanged()
    End Sub
    Partial Private Sub OnIdResponsibleChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdResponsibleChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProgramComponentByProject = New EntitySet(Of ProgramComponentByProject)(AddressOf Me.attach_ProgramComponentByProject, AddressOf Me.detach_ProgramComponentByProject)
		Me._Program = CType(Nothing, EntityRef(Of Program))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProgram", DbType:="Int NOT NULL")>  _
	Public Property IdProgram() As Integer
		Get
			Return Me._IdProgram
		End Get
		Set
			If ((Me._IdProgram = value)  _
						= false) Then
				If Me._Program.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProgramChanging(value)
				Me.SendPropertyChanging
				Me._IdProgram = value
				Me.SendPropertyChanged("IdProgram")
				Me.OnIdProgramChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdResponsible", DbType:="Int NOT NULL")>  _
	Public Property IdResponsible() As Integer
		Get
			Return Me._IdResponsible
		End Get
		Set
			If ((Me._IdResponsible = value)  _
						= false) Then
				Me.OnIdResponsibleChanging(value)
				Me.SendPropertyChanging
				Me._IdResponsible = value
				Me.SendPropertyChanged("IdResponsible")
				Me.OnIdResponsibleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProgramComponent_ProgramComponentByProject", Storage:="_ProgramComponentByProject", ThisKey:="Id", OtherKey:="IdProgramComponent")>  _
	Public Property ProgramComponentByProject() As EntitySet(Of ProgramComponentByProject)
		Get
			Return Me._ProgramComponentByProject
		End Get
		Set
			Me._ProgramComponentByProject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Program_ProgramComponent", Storage:="_Program", ThisKey:="IdProgram", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Program() As Program
		Get
			Return Me._Program.Entity
		End Get
		Set
			Dim previousValue As Program = Me._Program.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Program.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Program.Entity = Nothing
					previousValue.ProgramComponent.Remove(Me)
				End If
				Me._Program.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProgramComponent.Add(Me)
					Me._IdProgram = value.Id
				Else
					Me._IdProgram = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Program")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProgramComponentByProject(ByVal entity As ProgramComponentByProject)
		Me.SendPropertyChanging
		entity.ProgramComponent = Me
	End Sub
	
	Private Sub detach_ProgramComponentByProject(ByVal entity As ProgramComponentByProject)
		Me.SendPropertyChanging
		entity.ProgramComponent = Nothing
	End Sub
End Class

<Table(Name:="dbo.ProgramComponentByIdea")>  _
Partial Public Class ProgramComponentByIdea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdIdea As System.Nullable(Of Integer)
	
	Private _IdProgramComponent As System.Nullable(Of Integer)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdIdeaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdIdeaChanged()
    End Sub
    Partial Private Sub OnIdProgramComponentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProgramComponentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdIdea", DbType:="Int")>  _
	Public Property IdIdea() As System.Nullable(Of Integer)
		Get
			Return Me._IdIdea
		End Get
		Set
			If (Me._IdIdea.Equals(value) = false) Then
				Me.OnIdIdeaChanging(value)
				Me.SendPropertyChanging
				Me._IdIdea = value
				Me.SendPropertyChanged("IdIdea")
				Me.OnIdIdeaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProgramComponent", DbType:="Int")>  _
	Public Property IdProgramComponent() As System.Nullable(Of Integer)
		Get
			Return Me._IdProgramComponent
		End Get
		Set
			If (Me._IdProgramComponent.Equals(value) = false) Then
				Me.OnIdProgramComponentChanging(value)
				Me.SendPropertyChanging
				Me._IdProgramComponent = value
				Me.SendPropertyChanged("IdProgramComponent")
				Me.OnIdProgramComponentChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ProgramComponentByProject")>  _
Partial Public Class ProgramComponentByProject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProject As Integer
	
	Private _IdProgramComponent As Integer
	
	Private _ProgramComponent As EntityRef(Of ProgramComponent)
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnIdProgramComponentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProgramComponentChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProgramComponent = CType(Nothing, EntityRef(Of ProgramComponent))
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProgramComponent", DbType:="Int NOT NULL")>  _
	Public Property IdProgramComponent() As Integer
		Get
			Return Me._IdProgramComponent
		End Get
		Set
			If ((Me._IdProgramComponent = value)  _
						= false) Then
				If Me._ProgramComponent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProgramComponentChanging(value)
				Me.SendPropertyChanging
				Me._IdProgramComponent = value
				Me.SendPropertyChanged("IdProgramComponent")
				Me.OnIdProgramComponentChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProgramComponent_ProgramComponentByProject", Storage:="_ProgramComponent", ThisKey:="IdProgramComponent", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property ProgramComponent() As ProgramComponent
		Get
			Return Me._ProgramComponent.Entity
		End Get
		Set
			Dim previousValue As ProgramComponent = Me._ProgramComponent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProgramComponent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProgramComponent.Entity = Nothing
					previousValue.ProgramComponentByProject.Remove(Me)
				End If
				Me._ProgramComponent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProgramComponentByProject.Add(Me)
					Me._IdProgramComponent = value.Id
				Else
					Me._IdProgramComponent = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProgramComponent")
			End If
		End Set
	End Property
	
	<Association(Name:="Project_ProgramComponentByProject", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.ProgramComponentByProject.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProgramComponentByProject.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Project")>  _
Partial Public Class Project
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdIdea As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Objective As String
	
	Private _Antecedent As String
	
	Private _Justification As String
	
	Private _BeginDate As System.Nullable(Of Date)
	
	Private _Duration As String
	
	Private _ZoneDescription As String
	
	Private _Population As String
	
	Private _StrategicDescription As String
	
	Private _Results As String
	
	Private _Source As String
	
	Private _Purpose As String
	
	Private _TotalCost As System.Nullable(Of Decimal)
	
	Private _FSCContribution As System.Nullable(Of Decimal)
	
	Private _CounterpartValue As System.Nullable(Of Decimal)
	
	Private _EffectiveBudget As Integer
	
	Private _Attachment As String
	
	Private _IdPhase As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _idKey As System.Nullable(Of Integer)
	
	Private _isLastVersion As System.Nullable(Of Boolean)
	
	Private _IdProcessInstance As System.Nullable(Of Integer)
	
	Private _IdActivityInstance As System.Nullable(Of Integer)
	
	Private _Typeapproval As String
	
	Private _editablemoney As System.Nullable(Of Char)
	
	Private _editabletime As System.Nullable(Of Char)
	
	Private _editableresults As System.Nullable(Of Char)
	
	Private _completiondate As System.Nullable(Of Date)
	
	Private _ResultsKnowledgeManagement As String
	
	Private _ResultsInstalledCapacity As String
	
	Private _Activity As EntitySet(Of Activity)
	
	Private _CloseRegistry As EntitySet(Of CloseRegistry)
	
	Private _ContractRequest As EntitySet(Of ContractRequest)
	
	Private _Execution As EntitySet(Of Execution)
	
	Private _ExecutionContractualPlanRegistryDetails As EntitySet(Of ExecutionContractualPlanRegistryDetails)
	
	Private _Explanatory As EntitySet(Of Explanatory)
	
	Private _Forum As EntitySet(Of Forum)
	
	Private _Inquest As EntitySet(Of Inquest)
	
	Private _Objective1 As EntitySet(Of Objective)
	
	Private _OperatorByProject As EntitySet(Of OperatorByProject)
	
	Private _Paymentflow As EntitySet(Of Paymentflow)
	
	Private _Proceeding_Logs As EntitySet(Of Proceeding_Logs)
	
	Private _ProgramComponentByProject As EntitySet(Of ProgramComponentByProject)
	
	Private _ProjectLocation As EntitySet(Of ProjectLocation)
	
	Private _SourceByProject As EntitySet(Of SourceByProject)
	
	Private _ThirdByProject As EntitySet(Of ThirdByProject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdIdeaChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdIdeaChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnObjectiveChanging(value As String)
    End Sub
    Partial Private Sub OnObjectiveChanged()
    End Sub
    Partial Private Sub OnAntecedentChanging(value As String)
    End Sub
    Partial Private Sub OnAntecedentChanged()
    End Sub
    Partial Private Sub OnJustificationChanging(value As String)
    End Sub
    Partial Private Sub OnJustificationChanged()
    End Sub
    Partial Private Sub OnBeginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBeginDateChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As String)
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    Partial Private Sub OnZoneDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnZoneDescriptionChanged()
    End Sub
    Partial Private Sub OnPopulationChanging(value As String)
    End Sub
    Partial Private Sub OnPopulationChanged()
    End Sub
    Partial Private Sub OnStrategicDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnStrategicDescriptionChanged()
    End Sub
    Partial Private Sub OnResultsChanging(value As String)
    End Sub
    Partial Private Sub OnResultsChanged()
    End Sub
    Partial Private Sub OnSourceChanging(value As String)
    End Sub
    Partial Private Sub OnSourceChanged()
    End Sub
    Partial Private Sub OnPurposeChanging(value As String)
    End Sub
    Partial Private Sub OnPurposeChanged()
    End Sub
    Partial Private Sub OnTotalCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalCostChanged()
    End Sub
    Partial Private Sub OnFSCContributionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFSCContributionChanged()
    End Sub
    Partial Private Sub OnCounterpartValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCounterpartValueChanged()
    End Sub
    Partial Private Sub OnEffectiveBudgetChanging(value As Integer)
    End Sub
    Partial Private Sub OnEffectiveBudgetChanged()
    End Sub
    Partial Private Sub OnAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnAttachmentChanged()
    End Sub
    Partial Private Sub OnIdPhaseChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPhaseChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnidKeyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidKeyChanged()
    End Sub
    Partial Private Sub OnisLastVersionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisLastVersionChanged()
    End Sub
    Partial Private Sub OnIdProcessInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProcessInstanceChanged()
    End Sub
    Partial Private Sub OnIdActivityInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdActivityInstanceChanged()
    End Sub
    Partial Private Sub OnTypeapprovalChanging(value As String)
    End Sub
    Partial Private Sub OnTypeapprovalChanged()
    End Sub
    Partial Private Sub OneditablemoneyChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OneditablemoneyChanged()
    End Sub
    Partial Private Sub OneditabletimeChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OneditabletimeChanged()
    End Sub
    Partial Private Sub OneditableresultsChanging(value As System.Nullable(Of Char))
    End Sub
    Partial Private Sub OneditableresultsChanged()
    End Sub
    Partial Private Sub OncompletiondateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OncompletiondateChanged()
    End Sub
    Partial Private Sub OnResultsKnowledgeManagementChanging(value As String)
    End Sub
    Partial Private Sub OnResultsKnowledgeManagementChanged()
    End Sub
    Partial Private Sub OnResultsInstalledCapacityChanging(value As String)
    End Sub
    Partial Private Sub OnResultsInstalledCapacityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Activity = New EntitySet(Of Activity)(AddressOf Me.attach_Activity, AddressOf Me.detach_Activity)
		Me._CloseRegistry = New EntitySet(Of CloseRegistry)(AddressOf Me.attach_CloseRegistry, AddressOf Me.detach_CloseRegistry)
		Me._ContractRequest = New EntitySet(Of ContractRequest)(AddressOf Me.attach_ContractRequest, AddressOf Me.detach_ContractRequest)
		Me._Execution = New EntitySet(Of Execution)(AddressOf Me.attach_Execution, AddressOf Me.detach_Execution)
		Me._ExecutionContractualPlanRegistryDetails = New EntitySet(Of ExecutionContractualPlanRegistryDetails)(AddressOf Me.attach_ExecutionContractualPlanRegistryDetails, AddressOf Me.detach_ExecutionContractualPlanRegistryDetails)
		Me._Explanatory = New EntitySet(Of Explanatory)(AddressOf Me.attach_Explanatory, AddressOf Me.detach_Explanatory)
		Me._Forum = New EntitySet(Of Forum)(AddressOf Me.attach_Forum, AddressOf Me.detach_Forum)
		Me._Inquest = New EntitySet(Of Inquest)(AddressOf Me.attach_Inquest, AddressOf Me.detach_Inquest)
		Me._Objective1 = New EntitySet(Of Objective)(AddressOf Me.attach_Objective1, AddressOf Me.detach_Objective1)
		Me._OperatorByProject = New EntitySet(Of OperatorByProject)(AddressOf Me.attach_OperatorByProject, AddressOf Me.detach_OperatorByProject)
		Me._Paymentflow = New EntitySet(Of Paymentflow)(AddressOf Me.attach_Paymentflow, AddressOf Me.detach_Paymentflow)
		Me._Proceeding_Logs = New EntitySet(Of Proceeding_Logs)(AddressOf Me.attach_Proceeding_Logs, AddressOf Me.detach_Proceeding_Logs)
		Me._ProgramComponentByProject = New EntitySet(Of ProgramComponentByProject)(AddressOf Me.attach_ProgramComponentByProject, AddressOf Me.detach_ProgramComponentByProject)
		Me._ProjectLocation = New EntitySet(Of ProjectLocation)(AddressOf Me.attach_ProjectLocation, AddressOf Me.detach_ProjectLocation)
		Me._SourceByProject = New EntitySet(Of SourceByProject)(AddressOf Me.attach_SourceByProject, AddressOf Me.detach_SourceByProject)
		Me._ThirdByProject = New EntitySet(Of ThirdByProject)(AddressOf Me.attach_ThirdByProject, AddressOf Me.detach_ThirdByProject)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdIdea", DbType:="Int NOT NULL")>  _
	Public Property IdIdea() As Integer
		Get
			Return Me._IdIdea
		End Get
		Set
			If ((Me._IdIdea = value)  _
						= false) Then
				Me.OnIdIdeaChanging(value)
				Me.SendPropertyChanging
				Me._IdIdea = value
				Me.SendPropertyChanged("IdIdea")
				Me.OnIdIdeaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Objective", DbType:="VarChar(MAX)")>  _
	Public Property Objective() As String
		Get
			Return Me._Objective
		End Get
		Set
			If (String.Equals(Me._Objective, value) = false) Then
				Me.OnObjectiveChanging(value)
				Me.SendPropertyChanging
				Me._Objective = value
				Me.SendPropertyChanged("Objective")
				Me.OnObjectiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Antecedent", DbType:="VarChar(MAX)")>  _
	Public Property Antecedent() As String
		Get
			Return Me._Antecedent
		End Get
		Set
			If (String.Equals(Me._Antecedent, value) = false) Then
				Me.OnAntecedentChanging(value)
				Me.SendPropertyChanging
				Me._Antecedent = value
				Me.SendPropertyChanged("Antecedent")
				Me.OnAntecedentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Justification", DbType:="VarChar(MAX)")>  _
	Public Property Justification() As String
		Get
			Return Me._Justification
		End Get
		Set
			If (String.Equals(Me._Justification, value) = false) Then
				Me.OnJustificationChanging(value)
				Me.SendPropertyChanging
				Me._Justification = value
				Me.SendPropertyChanged("Justification")
				Me.OnJustificationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginDate", DbType:="DateTime")>  _
	Public Property BeginDate() As System.Nullable(Of Date)
		Get
			Return Me._BeginDate
		End Get
		Set
			If (Me._BeginDate.Equals(value) = false) Then
				Me.OnBeginDateChanging(value)
				Me.SendPropertyChanging
				Me._BeginDate = value
				Me.SendPropertyChanged("BeginDate")
				Me.OnBeginDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Duration", DbType:="VarChar(MAX)")>  _
	Public Property Duration() As String
		Get
			Return Me._Duration
		End Get
		Set
			If (String.Equals(Me._Duration, value) = false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ZoneDescription", DbType:="VarChar(MAX)")>  _
	Public Property ZoneDescription() As String
		Get
			Return Me._ZoneDescription
		End Get
		Set
			If (String.Equals(Me._ZoneDescription, value) = false) Then
				Me.OnZoneDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._ZoneDescription = value
				Me.SendPropertyChanged("ZoneDescription")
				Me.OnZoneDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Population", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Population() As String
		Get
			Return Me._Population
		End Get
		Set
			If (String.Equals(Me._Population, value) = false) Then
				Me.OnPopulationChanging(value)
				Me.SendPropertyChanging
				Me._Population = value
				Me.SendPropertyChanged("Population")
				Me.OnPopulationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_StrategicDescription", DbType:="VarChar(MAX)")>  _
	Public Property StrategicDescription() As String
		Get
			Return Me._StrategicDescription
		End Get
		Set
			If (String.Equals(Me._StrategicDescription, value) = false) Then
				Me.OnStrategicDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._StrategicDescription = value
				Me.SendPropertyChanged("StrategicDescription")
				Me.OnStrategicDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Results", DbType:="VarChar(MAX)")>  _
	Public Property Results() As String
		Get
			Return Me._Results
		End Get
		Set
			If (String.Equals(Me._Results, value) = false) Then
				Me.OnResultsChanging(value)
				Me.SendPropertyChanging
				Me._Results = value
				Me.SendPropertyChanged("Results")
				Me.OnResultsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Source", DbType:="VarChar(MAX)")>  _
	Public Property Source() As String
		Get
			Return Me._Source
		End Get
		Set
			If (String.Equals(Me._Source, value) = false) Then
				Me.OnSourceChanging(value)
				Me.SendPropertyChanging
				Me._Source = value
				Me.SendPropertyChanged("Source")
				Me.OnSourceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Purpose", DbType:="VarChar(MAX)")>  _
	Public Property Purpose() As String
		Get
			Return Me._Purpose
		End Get
		Set
			If (String.Equals(Me._Purpose, value) = false) Then
				Me.OnPurposeChanging(value)
				Me.SendPropertyChanging
				Me._Purpose = value
				Me.SendPropertyChanged("Purpose")
				Me.OnPurposeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalCost", DbType:="Decimal(30,0)")>  _
	Public Property TotalCost() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalCost
		End Get
		Set
			If (Me._TotalCost.Equals(value) = false) Then
				Me.OnTotalCostChanging(value)
				Me.SendPropertyChanging
				Me._TotalCost = value
				Me.SendPropertyChanged("TotalCost")
				Me.OnTotalCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FSCContribution", DbType:="Decimal(30,3)")>  _
	Public Property FSCContribution() As System.Nullable(Of Decimal)
		Get
			Return Me._FSCContribution
		End Get
		Set
			If (Me._FSCContribution.Equals(value) = false) Then
				Me.OnFSCContributionChanging(value)
				Me.SendPropertyChanging
				Me._FSCContribution = value
				Me.SendPropertyChanged("FSCContribution")
				Me.OnFSCContributionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CounterpartValue", DbType:="Decimal(30,3)")>  _
	Public Property CounterpartValue() As System.Nullable(Of Decimal)
		Get
			Return Me._CounterpartValue
		End Get
		Set
			If (Me._CounterpartValue.Equals(value) = false) Then
				Me.OnCounterpartValueChanging(value)
				Me.SendPropertyChanging
				Me._CounterpartValue = value
				Me.SendPropertyChanged("CounterpartValue")
				Me.OnCounterpartValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EffectiveBudget", DbType:="Int NOT NULL")>  _
	Public Property EffectiveBudget() As Integer
		Get
			Return Me._EffectiveBudget
		End Get
		Set
			If ((Me._EffectiveBudget = value)  _
						= false) Then
				Me.OnEffectiveBudgetChanging(value)
				Me.SendPropertyChanging
				Me._EffectiveBudget = value
				Me.SendPropertyChanged("EffectiveBudget")
				Me.OnEffectiveBudgetChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Attachment", DbType:="VarChar(MAX)")>  _
	Public Property Attachment() As String
		Get
			Return Me._Attachment
		End Get
		Set
			If (String.Equals(Me._Attachment, value) = false) Then
				Me.OnAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._Attachment = value
				Me.SendPropertyChanged("Attachment")
				Me.OnAttachmentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdPhase", DbType:="Int NOT NULL")>  _
	Public Property IdPhase() As Integer
		Get
			Return Me._IdPhase
		End Get
		Set
			If ((Me._IdPhase = value)  _
						= false) Then
				Me.OnIdPhaseChanging(value)
				Me.SendPropertyChanging
				Me._IdPhase = value
				Me.SendPropertyChanged("IdPhase")
				Me.OnIdPhaseChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idKey", DbType:="Int")>  _
	Public Property idKey() As System.Nullable(Of Integer)
		Get
			Return Me._idKey
		End Get
		Set
			If (Me._idKey.Equals(value) = false) Then
				Me.OnidKeyChanging(value)
				Me.SendPropertyChanging
				Me._idKey = value
				Me.SendPropertyChanged("idKey")
				Me.OnidKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isLastVersion", DbType:="Bit")>  _
	Public Property isLastVersion() As System.Nullable(Of Boolean)
		Get
			Return Me._isLastVersion
		End Get
		Set
			If (Me._isLastVersion.Equals(value) = false) Then
				Me.OnisLastVersionChanging(value)
				Me.SendPropertyChanging
				Me._isLastVersion = value
				Me.SendPropertyChanged("isLastVersion")
				Me.OnisLastVersionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProcessInstance", DbType:="Int")>  _
	Public Property IdProcessInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdProcessInstance
		End Get
		Set
			If (Me._IdProcessInstance.Equals(value) = false) Then
				Me.OnIdProcessInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdProcessInstance = value
				Me.SendPropertyChanged("IdProcessInstance")
				Me.OnIdProcessInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdActivityInstance", DbType:="Int")>  _
	Public Property IdActivityInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdActivityInstance
		End Get
		Set
			If (Me._IdActivityInstance.Equals(value) = false) Then
				Me.OnIdActivityInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdActivityInstance = value
				Me.SendPropertyChanged("IdActivityInstance")
				Me.OnIdActivityInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Typeapproval", DbType:="VarChar(50)")>  _
	Public Property Typeapproval() As String
		Get
			Return Me._Typeapproval
		End Get
		Set
			If (String.Equals(Me._Typeapproval, value) = false) Then
				Me.OnTypeapprovalChanging(value)
				Me.SendPropertyChanging
				Me._Typeapproval = value
				Me.SendPropertyChanged("Typeapproval")
				Me.OnTypeapprovalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_editablemoney", DbType:="Char(1)")>  _
	Public Property editablemoney() As System.Nullable(Of Char)
		Get
			Return Me._editablemoney
		End Get
		Set
			If (Me._editablemoney.Equals(value) = false) Then
				Me.OneditablemoneyChanging(value)
				Me.SendPropertyChanging
				Me._editablemoney = value
				Me.SendPropertyChanged("editablemoney")
				Me.OneditablemoneyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_editabletime", DbType:="Char(1)")>  _
	Public Property editabletime() As System.Nullable(Of Char)
		Get
			Return Me._editabletime
		End Get
		Set
			If (Me._editabletime.Equals(value) = false) Then
				Me.OneditabletimeChanging(value)
				Me.SendPropertyChanging
				Me._editabletime = value
				Me.SendPropertyChanged("editabletime")
				Me.OneditabletimeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_editableresults", DbType:="Char(1)")>  _
	Public Property editableresults() As System.Nullable(Of Char)
		Get
			Return Me._editableresults
		End Get
		Set
			If (Me._editableresults.Equals(value) = false) Then
				Me.OneditableresultsChanging(value)
				Me.SendPropertyChanging
				Me._editableresults = value
				Me.SendPropertyChanged("editableresults")
				Me.OneditableresultsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_completiondate", DbType:="DateTime")>  _
	Public Property completiondate() As System.Nullable(Of Date)
		Get
			Return Me._completiondate
		End Get
		Set
			If (Me._completiondate.Equals(value) = false) Then
				Me.OncompletiondateChanging(value)
				Me.SendPropertyChanging
				Me._completiondate = value
				Me.SendPropertyChanged("completiondate")
				Me.OncompletiondateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ResultsKnowledgeManagement", DbType:="VarChar(MAX)")>  _
	Public Property ResultsKnowledgeManagement() As String
		Get
			Return Me._ResultsKnowledgeManagement
		End Get
		Set
			If (String.Equals(Me._ResultsKnowledgeManagement, value) = false) Then
				Me.OnResultsKnowledgeManagementChanging(value)
				Me.SendPropertyChanging
				Me._ResultsKnowledgeManagement = value
				Me.SendPropertyChanged("ResultsKnowledgeManagement")
				Me.OnResultsKnowledgeManagementChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ResultsInstalledCapacity", DbType:="VarChar(MAX)")>  _
	Public Property ResultsInstalledCapacity() As String
		Get
			Return Me._ResultsInstalledCapacity
		End Get
		Set
			If (String.Equals(Me._ResultsInstalledCapacity, value) = false) Then
				Me.OnResultsInstalledCapacityChanging(value)
				Me.SendPropertyChanging
				Me._ResultsInstalledCapacity = value
				Me.SendPropertyChanged("ResultsInstalledCapacity")
				Me.OnResultsInstalledCapacityChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_Activity", Storage:="_Activity", ThisKey:="Id", OtherKey:="IdProyect")>  _
	Public Property Activity() As EntitySet(Of Activity)
		Get
			Return Me._Activity
		End Get
		Set
			Me._Activity.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_CloseRegistry", Storage:="_CloseRegistry", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property CloseRegistry() As EntitySet(Of CloseRegistry)
		Get
			Return Me._CloseRegistry
		End Get
		Set
			Me._CloseRegistry.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_ContractRequest", Storage:="_ContractRequest", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property ContractRequest() As EntitySet(Of ContractRequest)
		Get
			Return Me._ContractRequest
		End Get
		Set
			Me._ContractRequest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Execution", Storage:="_Execution", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property Execution() As EntitySet(Of Execution)
		Get
			Return Me._Execution
		End Get
		Set
			Me._Execution.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_ExecutionContractualPlanRegistryDetails", Storage:="_ExecutionContractualPlanRegistryDetails", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property ExecutionContractualPlanRegistryDetails() As EntitySet(Of ExecutionContractualPlanRegistryDetails)
		Get
			Return Me._ExecutionContractualPlanRegistryDetails
		End Get
		Set
			Me._ExecutionContractualPlanRegistryDetails.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Explanatory", Storage:="_Explanatory", ThisKey:="Id", OtherKey:="idproject")>  _
	Public Property Explanatory() As EntitySet(Of Explanatory)
		Get
			Return Me._Explanatory
		End Get
		Set
			Me._Explanatory.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Forum", Storage:="_Forum", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property Forum() As EntitySet(Of Forum)
		Get
			Return Me._Forum
		End Get
		Set
			Me._Forum.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Inquest", Storage:="_Inquest", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property Inquest() As EntitySet(Of Inquest)
		Get
			Return Me._Inquest
		End Get
		Set
			Me._Inquest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Objective", Storage:="_Objective1", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property Objective1() As EntitySet(Of Objective)
		Get
			Return Me._Objective1
		End Get
		Set
			Me._Objective1.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_OperatorByProject", Storage:="_OperatorByProject", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property OperatorByProject() As EntitySet(Of OperatorByProject)
		Get
			Return Me._OperatorByProject
		End Get
		Set
			Me._OperatorByProject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Paymentflow", Storage:="_Paymentflow", ThisKey:="Id", OtherKey:="idproject")>  _
	Public Property Paymentflow() As EntitySet(Of Paymentflow)
		Get
			Return Me._Paymentflow
		End Get
		Set
			Me._Paymentflow.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_Proceeding_Logs", Storage:="_Proceeding_Logs", ThisKey:="Id", OtherKey:="Project_Id")>  _
	Public Property Proceeding_Logs() As EntitySet(Of Proceeding_Logs)
		Get
			Return Me._Proceeding_Logs
		End Get
		Set
			Me._Proceeding_Logs.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_ProgramComponentByProject", Storage:="_ProgramComponentByProject", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property ProgramComponentByProject() As EntitySet(Of ProgramComponentByProject)
		Get
			Return Me._ProgramComponentByProject
		End Get
		Set
			Me._ProgramComponentByProject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_ProjectLocation", Storage:="_ProjectLocation", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property ProjectLocation() As EntitySet(Of ProjectLocation)
		Get
			Return Me._ProjectLocation
		End Get
		Set
			Me._ProjectLocation.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_SourceByProject", Storage:="_SourceByProject", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property SourceByProject() As EntitySet(Of SourceByProject)
		Get
			Return Me._SourceByProject
		End Get
		Set
			Me._SourceByProject.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Project_ThirdByProject", Storage:="_ThirdByProject", ThisKey:="Id", OtherKey:="IdProject")>  _
	Public Property ThirdByProject() As EntitySet(Of ThirdByProject)
		Get
			Return Me._ThirdByProject
		End Get
		Set
			Me._ThirdByProject.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Activity(ByVal entity As Activity)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Activity(ByVal entity As Activity)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_CloseRegistry(ByVal entity As CloseRegistry)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_CloseRegistry(ByVal entity As CloseRegistry)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_ContractRequest(ByVal entity As ContractRequest)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_ContractRequest(ByVal entity As ContractRequest)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_Execution(ByVal entity As Execution)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Execution(ByVal entity As Execution)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_ExecutionContractualPlanRegistryDetails(ByVal entity As ExecutionContractualPlanRegistryDetails)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_ExecutionContractualPlanRegistryDetails(ByVal entity As ExecutionContractualPlanRegistryDetails)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_Explanatory(ByVal entity As Explanatory)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Explanatory(ByVal entity As Explanatory)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_Forum(ByVal entity As Forum)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Forum(ByVal entity As Forum)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_Inquest(ByVal entity As Inquest)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Inquest(ByVal entity As Inquest)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_Objective1(ByVal entity As Objective)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Objective1(ByVal entity As Objective)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_OperatorByProject(ByVal entity As OperatorByProject)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_OperatorByProject(ByVal entity As OperatorByProject)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_Paymentflow(ByVal entity As Paymentflow)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Paymentflow(ByVal entity As Paymentflow)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_Proceeding_Logs(ByVal entity As Proceeding_Logs)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_Proceeding_Logs(ByVal entity As Proceeding_Logs)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_ProgramComponentByProject(ByVal entity As ProgramComponentByProject)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_ProgramComponentByProject(ByVal entity As ProgramComponentByProject)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_ProjectLocation(ByVal entity As ProjectLocation)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_ProjectLocation(ByVal entity As ProjectLocation)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_SourceByProject(ByVal entity As SourceByProject)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_SourceByProject(ByVal entity As SourceByProject)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
	
	Private Sub attach_ThirdByProject(ByVal entity As ThirdByProject)
		Me.SendPropertyChanging
		entity.Project = Me
	End Sub
	
	Private Sub detach_ThirdByProject(ByVal entity As ThirdByProject)
		Me.SendPropertyChanging
		entity.Project = Nothing
	End Sub
End Class

<Table(Name:="dbo.ProjectApprovalRecord")>  _
Partial Public Class ProjectApprovalRecord
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProject As Integer
	
	Private _Code As String
	
	Private _Comments As String
	
	Private _Attachment As String
	
	Private _ApprovalDate As System.Nullable(Of Date)
	
	Private _ActNumber As String
	
	Private _ApprovedValue As System.Nullable(Of Decimal)
	
	Private _Approved As System.Nullable(Of Integer)
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _IdProcessInstance As System.Nullable(Of Integer)
	
	Private _IdActivityInstance As System.Nullable(Of Integer)
	
	Private _codeapprovedidea As String
	
	Private _Ididea As System.Nullable(Of Integer)
	
	Private _aportFSC As System.Nullable(Of Decimal)
	
	Private _aportOtros As System.Nullable(Of Decimal)
	
	Private _Idea As EntityRef(Of Idea)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnAttachmentChanged()
    End Sub
    Partial Private Sub OnApprovalDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApprovalDateChanged()
    End Sub
    Partial Private Sub OnActNumberChanging(value As String)
    End Sub
    Partial Private Sub OnActNumberChanged()
    End Sub
    Partial Private Sub OnApprovedValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnApprovedValueChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnIdProcessInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProcessInstanceChanged()
    End Sub
    Partial Private Sub OnIdActivityInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdActivityInstanceChanged()
    End Sub
    Partial Private Sub OncodeapprovedideaChanging(value As String)
    End Sub
    Partial Private Sub OncodeapprovedideaChanged()
    End Sub
    Partial Private Sub OnIdideaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdideaChanged()
    End Sub
    Partial Private Sub OnaportFSCChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnaportFSCChanged()
    End Sub
    Partial Private Sub OnaportOtrosChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnaportOtrosChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Idea = CType(Nothing, EntityRef(Of Idea))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comments", DbType:="VarChar(255)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Attachment", DbType:="VarChar(255)")>  _
	Public Property Attachment() As String
		Get
			Return Me._Attachment
		End Get
		Set
			If (String.Equals(Me._Attachment, value) = false) Then
				Me.OnAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._Attachment = value
				Me.SendPropertyChanged("Attachment")
				Me.OnAttachmentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ApprovalDate", DbType:="DateTime")>  _
	Public Property ApprovalDate() As System.Nullable(Of Date)
		Get
			Return Me._ApprovalDate
		End Get
		Set
			If (Me._ApprovalDate.Equals(value) = false) Then
				Me.OnApprovalDateChanging(value)
				Me.SendPropertyChanging
				Me._ApprovalDate = value
				Me.SendPropertyChanged("ApprovalDate")
				Me.OnApprovalDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActNumber", DbType:="VarChar(50)")>  _
	Public Property ActNumber() As String
		Get
			Return Me._ActNumber
		End Get
		Set
			If (String.Equals(Me._ActNumber, value) = false) Then
				Me.OnActNumberChanging(value)
				Me.SendPropertyChanging
				Me._ActNumber = value
				Me.SendPropertyChanged("ActNumber")
				Me.OnActNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ApprovedValue", DbType:="Decimal(30,0)")>  _
	Public Property ApprovedValue() As System.Nullable(Of Decimal)
		Get
			Return Me._ApprovedValue
		End Get
		Set
			If (Me._ApprovedValue.Equals(value) = false) Then
				Me.OnApprovedValueChanging(value)
				Me.SendPropertyChanging
				Me._ApprovedValue = value
				Me.SendPropertyChanged("ApprovedValue")
				Me.OnApprovedValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Approved", DbType:="Int")>  _
	Public Property Approved() As System.Nullable(Of Integer)
		Get
			Return Me._Approved
		End Get
		Set
			If (Me._Approved.Equals(value) = false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProcessInstance", DbType:="Int")>  _
	Public Property IdProcessInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdProcessInstance
		End Get
		Set
			If (Me._IdProcessInstance.Equals(value) = false) Then
				Me.OnIdProcessInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdProcessInstance = value
				Me.SendPropertyChanged("IdProcessInstance")
				Me.OnIdProcessInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdActivityInstance", DbType:="Int")>  _
	Public Property IdActivityInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdActivityInstance
		End Get
		Set
			If (Me._IdActivityInstance.Equals(value) = false) Then
				Me.OnIdActivityInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdActivityInstance = value
				Me.SendPropertyChanged("IdActivityInstance")
				Me.OnIdActivityInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_codeapprovedidea", DbType:="VarChar(MAX)")>  _
	Public Property codeapprovedidea() As String
		Get
			Return Me._codeapprovedidea
		End Get
		Set
			If (String.Equals(Me._codeapprovedidea, value) = false) Then
				Me.OncodeapprovedideaChanging(value)
				Me.SendPropertyChanging
				Me._codeapprovedidea = value
				Me.SendPropertyChanged("codeapprovedidea")
				Me.OncodeapprovedideaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Ididea", DbType:="Int")>  _
	Public Property Ididea() As System.Nullable(Of Integer)
		Get
			Return Me._Ididea
		End Get
		Set
			If (Me._Ididea.Equals(value) = false) Then
				If Me._Idea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdideaChanging(value)
				Me.SendPropertyChanging
				Me._Ididea = value
				Me.SendPropertyChanged("Ididea")
				Me.OnIdideaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_aportFSC", DbType:="Decimal(30,0)")>  _
	Public Property aportFSC() As System.Nullable(Of Decimal)
		Get
			Return Me._aportFSC
		End Get
		Set
			If (Me._aportFSC.Equals(value) = false) Then
				Me.OnaportFSCChanging(value)
				Me.SendPropertyChanging
				Me._aportFSC = value
				Me.SendPropertyChanged("aportFSC")
				Me.OnaportFSCChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_aportOtros", DbType:="Decimal(30,0)")>  _
	Public Property aportOtros() As System.Nullable(Of Decimal)
		Get
			Return Me._aportOtros
		End Get
		Set
			If (Me._aportOtros.Equals(value) = false) Then
				Me.OnaportOtrosChanging(value)
				Me.SendPropertyChanging
				Me._aportOtros = value
				Me.SendPropertyChanged("aportOtros")
				Me.OnaportOtrosChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Idea_ProjectApprovalRecord", Storage:="_Idea", ThisKey:="Ididea", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Idea() As Idea
		Get
			Return Me._Idea.Entity
		End Get
		Set
			Dim previousValue As Idea = Me._Idea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Idea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Idea.Entity = Nothing
					previousValue.ProjectApprovalRecord.Remove(Me)
				End If
				Me._Idea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProjectApprovalRecord.Add(Me)
					Me._Ididea = value.Id
				Else
					Me._Ididea = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Idea")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ProjectLocation")>  _
Partial Public Class ProjectLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProject As Integer
	
	Private _IdCity As Integer
	
	Private _iddepto As System.Nullable(Of Integer)
	
	Private _deptoname As String
	
	Private _cityname As String
	
	Private _Project As EntityRef(Of Project)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnIdCityChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCityChanged()
    End Sub
    Partial Private Sub OniddeptoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OniddeptoChanged()
    End Sub
    Partial Private Sub OndeptonameChanging(value As String)
    End Sub
    Partial Private Sub OndeptonameChanged()
    End Sub
    Partial Private Sub OncitynameChanging(value As String)
    End Sub
    Partial Private Sub OncitynameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Project = CType(Nothing, EntityRef(Of Project))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdCity", DbType:="Int NOT NULL")>  _
	Public Property IdCity() As Integer
		Get
			Return Me._IdCity
		End Get
		Set
			If ((Me._IdCity = value)  _
						= false) Then
				Me.OnIdCityChanging(value)
				Me.SendPropertyChanging
				Me._IdCity = value
				Me.SendPropertyChanged("IdCity")
				Me.OnIdCityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_iddepto", DbType:="Int")>  _
	Public Property iddepto() As System.Nullable(Of Integer)
		Get
			Return Me._iddepto
		End Get
		Set
			If (Me._iddepto.Equals(value) = false) Then
				Me.OniddeptoChanging(value)
				Me.SendPropertyChanging
				Me._iddepto = value
				Me.SendPropertyChanged("iddepto")
				Me.OniddeptoChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_deptoname", DbType:="NVarChar(50)")>  _
	Public Property deptoname() As String
		Get
			Return Me._deptoname
		End Get
		Set
			If (String.Equals(Me._deptoname, value) = false) Then
				Me.OndeptonameChanging(value)
				Me.SendPropertyChanging
				Me._deptoname = value
				Me.SendPropertyChanged("deptoname")
				Me.OndeptonameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_cityname", DbType:="NVarChar(50)")>  _
	Public Property cityname() As String
		Get
			Return Me._cityname
		End Get
		Set
			If (String.Equals(Me._cityname, value) = false) Then
				Me.OncitynameChanging(value)
				Me.SendPropertyChanging
				Me._cityname = value
				Me.SendPropertyChanged("cityname")
				Me.OncitynameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_ProjectLocation", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.ProjectLocation.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProjectLocation.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ProjectPhase")>  _
Partial Public Class ProjectPhase
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code As String
	
	Private _name As String
	
	Private _isEnabled As Boolean
	
	Private _Component As EntitySet(Of Component)
	
	Private _SubActivity As EntitySet(Of SubActivity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As String)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub OnnameChanging(value As String)
    End Sub
    Partial Private Sub OnnameChanged()
    End Sub
    Partial Private Sub OnisEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnisEnabledChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Component = New EntitySet(Of Component)(AddressOf Me.attach_Component, AddressOf Me.detach_Component)
		Me._SubActivity = New EntitySet(Of SubActivity)(AddressOf Me.attach_SubActivity, AddressOf Me.detach_SubActivity)
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property name() As String
		Get
			Return Me._name
		End Get
		Set
			If (String.Equals(Me._name, value) = false) Then
				Me.OnnameChanging(value)
				Me.SendPropertyChanging
				Me._name = value
				Me.SendPropertyChanged("name")
				Me.OnnameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isEnabled", DbType:="Bit NOT NULL")>  _
	Public Property isEnabled() As Boolean
		Get
			Return Me._isEnabled
		End Get
		Set
			If ((Me._isEnabled = value)  _
						= false) Then
				Me.OnisEnabledChanging(value)
				Me.SendPropertyChanging
				Me._isEnabled = value
				Me.SendPropertyChanged("isEnabled")
				Me.OnisEnabledChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ProjectPhase_Component", Storage:="_Component", ThisKey:="id", OtherKey:="IdPhase")>  _
	Public Property Component() As EntitySet(Of Component)
		Get
			Return Me._Component
		End Get
		Set
			Me._Component.Assign(value)
		End Set
	End Property
	
	<Association(Name:="ProjectPhase_SubActivity", Storage:="_SubActivity", ThisKey:="id", OtherKey:="IdPhase")>  _
	Public Property SubActivity() As EntitySet(Of SubActivity)
		Get
			Return Me._SubActivity
		End Get
		Set
			Me._SubActivity.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Component(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.ProjectPhase = Me
	End Sub
	
	Private Sub detach_Component(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.ProjectPhase = Nothing
	End Sub
	
	Private Sub attach_SubActivity(ByVal entity As SubActivity)
		Me.SendPropertyChanging
		entity.ProjectPhase = Me
	End Sub
	
	Private Sub detach_SubActivity(ByVal entity As SubActivity)
		Me.SendPropertyChanging
		entity.ProjectPhase = Nothing
	End Sub
End Class

<Table(Name:="dbo.Proposal")>  _
Partial Public Class Proposal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdSummoning As System.Nullable(Of Integer)
	
	Private _Operator As String
	
	Private _OperatorNit As String
	
	Private _ProjectName As String
	
	Private _Target As String
	
	Private _TargetPopulation As String
	
	Private _ExpectedResults As String
	
	Private _TotalValue As System.Nullable(Of Decimal)
	
	Private _InputFSC As System.Nullable(Of Decimal)
	
	Private _InputOtherSources As System.Nullable(Of Decimal)
	
	Private _BriefProjectDescription As String
	
	Private _Score As System.Nullable(Of Decimal)
	
	Private _Result As String
	
	Private _ResponsibleReview As System.Nullable(Of Integer)
	
	Private _ReviewDate As System.Nullable(Of Date)
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _IdProcessInstance As System.Nullable(Of Integer)
	
	Private _IdActivityInstance As System.Nullable(Of Integer)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _LocationByProposal As EntitySet(Of LocationByProposal)
	
	Private _Summoning As EntityRef(Of Summoning)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdSummoningChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSummoningChanged()
    End Sub
    Partial Private Sub OnOperatorChanging(value As String)
    End Sub
    Partial Private Sub OnOperatorChanged()
    End Sub
    Partial Private Sub OnOperatorNitChanging(value As String)
    End Sub
    Partial Private Sub OnOperatorNitChanged()
    End Sub
    Partial Private Sub OnProjectNameChanging(value As String)
    End Sub
    Partial Private Sub OnProjectNameChanged()
    End Sub
    Partial Private Sub OnTargetChanging(value As String)
    End Sub
    Partial Private Sub OnTargetChanged()
    End Sub
    Partial Private Sub OnTargetPopulationChanging(value As String)
    End Sub
    Partial Private Sub OnTargetPopulationChanged()
    End Sub
    Partial Private Sub OnExpectedResultsChanging(value As String)
    End Sub
    Partial Private Sub OnExpectedResultsChanged()
    End Sub
    Partial Private Sub OnTotalValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalValueChanged()
    End Sub
    Partial Private Sub OnInputFSCChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnInputFSCChanged()
    End Sub
    Partial Private Sub OnInputOtherSourcesChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnInputOtherSourcesChanged()
    End Sub
    Partial Private Sub OnBriefProjectDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnBriefProjectDescriptionChanged()
    End Sub
    Partial Private Sub OnScoreChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnScoreChanged()
    End Sub
    Partial Private Sub OnResultChanging(value As String)
    End Sub
    Partial Private Sub OnResultChanged()
    End Sub
    Partial Private Sub OnResponsibleReviewChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnResponsibleReviewChanged()
    End Sub
    Partial Private Sub OnReviewDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnReviewDateChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnIdProcessInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProcessInstanceChanged()
    End Sub
    Partial Private Sub OnIdActivityInstanceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdActivityInstanceChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._LocationByProposal = New EntitySet(Of LocationByProposal)(AddressOf Me.attach_LocationByProposal, AddressOf Me.detach_LocationByProposal)
		Me._Summoning = CType(Nothing, EntityRef(Of Summoning))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdSummoning", DbType:="Int")>  _
	Public Property IdSummoning() As System.Nullable(Of Integer)
		Get
			Return Me._IdSummoning
		End Get
		Set
			If (Me._IdSummoning.Equals(value) = false) Then
				If Me._Summoning.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdSummoningChanging(value)
				Me.SendPropertyChanging
				Me._IdSummoning = value
				Me.SendPropertyChanged("IdSummoning")
				Me.OnIdSummoningChanged
			End If
		End Set
	End Property
	
	<Column(Name:="Operator", Storage:="_Operator", DbType:="VarChar(255)")>  _
	Public Property [Operator]() As String
		Get
			Return Me._Operator
		End Get
		Set
			If (String.Equals(Me._Operator, value) = false) Then
				Me.OnOperatorChanging(value)
				Me.SendPropertyChanging
				Me._Operator = value
				Me.SendPropertyChanged("[Operator]")
				Me.OnOperatorChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OperatorNit", DbType:="VarChar(50)")>  _
	Public Property OperatorNit() As String
		Get
			Return Me._OperatorNit
		End Get
		Set
			If (String.Equals(Me._OperatorNit, value) = false) Then
				Me.OnOperatorNitChanging(value)
				Me.SendPropertyChanging
				Me._OperatorNit = value
				Me.SendPropertyChanged("OperatorNit")
				Me.OnOperatorNitChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProjectName", DbType:="VarChar(1500)")>  _
	Public Property ProjectName() As String
		Get
			Return Me._ProjectName
		End Get
		Set
			If (String.Equals(Me._ProjectName, value) = false) Then
				Me.OnProjectNameChanging(value)
				Me.SendPropertyChanging
				Me._ProjectName = value
				Me.SendPropertyChanged("ProjectName")
				Me.OnProjectNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Target", DbType:="VarChar(255)")>  _
	Public Property Target() As String
		Get
			Return Me._Target
		End Get
		Set
			If (String.Equals(Me._Target, value) = false) Then
				Me.OnTargetChanging(value)
				Me.SendPropertyChanging
				Me._Target = value
				Me.SendPropertyChanged("Target")
				Me.OnTargetChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TargetPopulation", DbType:="VarChar(255)")>  _
	Public Property TargetPopulation() As String
		Get
			Return Me._TargetPopulation
		End Get
		Set
			If (String.Equals(Me._TargetPopulation, value) = false) Then
				Me.OnTargetPopulationChanging(value)
				Me.SendPropertyChanging
				Me._TargetPopulation = value
				Me.SendPropertyChanged("TargetPopulation")
				Me.OnTargetPopulationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ExpectedResults", DbType:="VarChar(1500)")>  _
	Public Property ExpectedResults() As String
		Get
			Return Me._ExpectedResults
		End Get
		Set
			If (String.Equals(Me._ExpectedResults, value) = false) Then
				Me.OnExpectedResultsChanging(value)
				Me.SendPropertyChanging
				Me._ExpectedResults = value
				Me.SendPropertyChanged("ExpectedResults")
				Me.OnExpectedResultsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalValue", DbType:="Decimal(17,2)")>  _
	Public Property TotalValue() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalValue
		End Get
		Set
			If (Me._TotalValue.Equals(value) = false) Then
				Me.OnTotalValueChanging(value)
				Me.SendPropertyChanging
				Me._TotalValue = value
				Me.SendPropertyChanged("TotalValue")
				Me.OnTotalValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_InputFSC", DbType:="Decimal(17,2)")>  _
	Public Property InputFSC() As System.Nullable(Of Decimal)
		Get
			Return Me._InputFSC
		End Get
		Set
			If (Me._InputFSC.Equals(value) = false) Then
				Me.OnInputFSCChanging(value)
				Me.SendPropertyChanging
				Me._InputFSC = value
				Me.SendPropertyChanged("InputFSC")
				Me.OnInputFSCChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_InputOtherSources", DbType:="Decimal(17,2)")>  _
	Public Property InputOtherSources() As System.Nullable(Of Decimal)
		Get
			Return Me._InputOtherSources
		End Get
		Set
			If (Me._InputOtherSources.Equals(value) = false) Then
				Me.OnInputOtherSourcesChanging(value)
				Me.SendPropertyChanging
				Me._InputOtherSources = value
				Me.SendPropertyChanged("InputOtherSources")
				Me.OnInputOtherSourcesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BriefProjectDescription", DbType:="VarChar(255)")>  _
	Public Property BriefProjectDescription() As String
		Get
			Return Me._BriefProjectDescription
		End Get
		Set
			If (String.Equals(Me._BriefProjectDescription, value) = false) Then
				Me.OnBriefProjectDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._BriefProjectDescription = value
				Me.SendPropertyChanged("BriefProjectDescription")
				Me.OnBriefProjectDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Score", DbType:="Decimal(17,2)")>  _
	Public Property Score() As System.Nullable(Of Decimal)
		Get
			Return Me._Score
		End Get
		Set
			If (Me._Score.Equals(value) = false) Then
				Me.OnScoreChanging(value)
				Me.SendPropertyChanging
				Me._Score = value
				Me.SendPropertyChanged("Score")
				Me.OnScoreChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Result", DbType:="VarChar(255)")>  _
	Public Property Result() As String
		Get
			Return Me._Result
		End Get
		Set
			If (String.Equals(Me._Result, value) = false) Then
				Me.OnResultChanging(value)
				Me.SendPropertyChanging
				Me._Result = value
				Me.SendPropertyChanged("Result")
				Me.OnResultChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ResponsibleReview", DbType:="Int")>  _
	Public Property ResponsibleReview() As System.Nullable(Of Integer)
		Get
			Return Me._ResponsibleReview
		End Get
		Set
			If (Me._ResponsibleReview.Equals(value) = false) Then
				Me.OnResponsibleReviewChanging(value)
				Me.SendPropertyChanging
				Me._ResponsibleReview = value
				Me.SendPropertyChanged("ResponsibleReview")
				Me.OnResponsibleReviewChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReviewDate", DbType:="DateTime")>  _
	Public Property ReviewDate() As System.Nullable(Of Date)
		Get
			Return Me._ReviewDate
		End Get
		Set
			If (Me._ReviewDate.Equals(value) = false) Then
				Me.OnReviewDateChanging(value)
				Me.SendPropertyChanging
				Me._ReviewDate = value
				Me.SendPropertyChanged("ReviewDate")
				Me.OnReviewDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProcessInstance", DbType:="Int")>  _
	Public Property IdProcessInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdProcessInstance
		End Get
		Set
			If (Me._IdProcessInstance.Equals(value) = false) Then
				Me.OnIdProcessInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdProcessInstance = value
				Me.SendPropertyChanged("IdProcessInstance")
				Me.OnIdProcessInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdActivityInstance", DbType:="Int")>  _
	Public Property IdActivityInstance() As System.Nullable(Of Integer)
		Get
			Return Me._IdActivityInstance
		End Get
		Set
			If (Me._IdActivityInstance.Equals(value) = false) Then
				Me.OnIdActivityInstanceChanging(value)
				Me.SendPropertyChanging
				Me._IdActivityInstance = value
				Me.SendPropertyChanged("IdActivityInstance")
				Me.OnIdActivityInstanceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Proposal_LocationByProposal", Storage:="_LocationByProposal", ThisKey:="Id", OtherKey:="IdProposal")>  _
	Public Property LocationByProposal() As EntitySet(Of LocationByProposal)
		Get
			Return Me._LocationByProposal
		End Get
		Set
			Me._LocationByProposal.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Summoning_Proposal", Storage:="_Summoning", ThisKey:="IdSummoning", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Summoning() As Summoning
		Get
			Return Me._Summoning.Entity
		End Get
		Set
			Dim previousValue As Summoning = Me._Summoning.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Summoning.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Summoning.Entity = Nothing
					previousValue.Proposal.Remove(Me)
				End If
				Me._Summoning.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Proposal.Add(Me)
					Me._IdSummoning = value.Id
				Else
					Me._IdSummoning = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Summoning")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_LocationByProposal(ByVal entity As LocationByProposal)
		Me.SendPropertyChanging
		entity.Proposal = Me
	End Sub
	
	Private Sub detach_LocationByProposal(ByVal entity As LocationByProposal)
		Me.SendPropertyChanging
		entity.Proposal = Nothing
	End Sub
End Class

<Table(Name:="dbo.QuestionsByInquestContent")>  _
Partial Public Class QuestionsByInquestContent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdInquestContent As System.Nullable(Of Integer)
	
	Private _QuestionText As String
	
	Private _QuestionType As String
	
	Private _AnswersByQuestion As EntitySet(Of AnswersByQuestion)
	
	Private _AnswersByResolvedInquest As EntitySet(Of AnswersByResolvedInquest)
	
	Private _InquestContent As EntityRef(Of InquestContent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdInquestContentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdInquestContentChanged()
    End Sub
    Partial Private Sub OnQuestionTextChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionTextChanged()
    End Sub
    Partial Private Sub OnQuestionTypeChanging(value As String)
    End Sub
    Partial Private Sub OnQuestionTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnswersByQuestion = New EntitySet(Of AnswersByQuestion)(AddressOf Me.attach_AnswersByQuestion, AddressOf Me.detach_AnswersByQuestion)
		Me._AnswersByResolvedInquest = New EntitySet(Of AnswersByResolvedInquest)(AddressOf Me.attach_AnswersByResolvedInquest, AddressOf Me.detach_AnswersByResolvedInquest)
		Me._InquestContent = CType(Nothing, EntityRef(Of InquestContent))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdInquestContent", DbType:="Int")>  _
	Public Property IdInquestContent() As System.Nullable(Of Integer)
		Get
			Return Me._IdInquestContent
		End Get
		Set
			If (Me._IdInquestContent.Equals(value) = false) Then
				If Me._InquestContent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdInquestContentChanging(value)
				Me.SendPropertyChanging
				Me._IdInquestContent = value
				Me.SendPropertyChanged("IdInquestContent")
				Me.OnIdInquestContentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_QuestionText", DbType:="VarChar(255)")>  _
	Public Property QuestionText() As String
		Get
			Return Me._QuestionText
		End Get
		Set
			If (String.Equals(Me._QuestionText, value) = false) Then
				Me.OnQuestionTextChanging(value)
				Me.SendPropertyChanging
				Me._QuestionText = value
				Me.SendPropertyChanged("QuestionText")
				Me.OnQuestionTextChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_QuestionType", DbType:="VarChar(255)")>  _
	Public Property QuestionType() As String
		Get
			Return Me._QuestionType
		End Get
		Set
			If (String.Equals(Me._QuestionType, value) = false) Then
				Me.OnQuestionTypeChanging(value)
				Me.SendPropertyChanging
				Me._QuestionType = value
				Me.SendPropertyChanged("QuestionType")
				Me.OnQuestionTypeChanged
			End If
		End Set
	End Property
	
	<Association(Name:="QuestionsByInquestContent_AnswersByQuestion", Storage:="_AnswersByQuestion", ThisKey:="Id", OtherKey:="IdQuestionsByInquestContent")>  _
	Public Property AnswersByQuestion() As EntitySet(Of AnswersByQuestion)
		Get
			Return Me._AnswersByQuestion
		End Get
		Set
			Me._AnswersByQuestion.Assign(value)
		End Set
	End Property
	
	<Association(Name:="QuestionsByInquestContent_AnswersByResolvedInquest", Storage:="_AnswersByResolvedInquest", ThisKey:="Id", OtherKey:="IdQuestionsByInquestContent")>  _
	Public Property AnswersByResolvedInquest() As EntitySet(Of AnswersByResolvedInquest)
		Get
			Return Me._AnswersByResolvedInquest
		End Get
		Set
			Me._AnswersByResolvedInquest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="InquestContent_QuestionsByInquestContent", Storage:="_InquestContent", ThisKey:="IdInquestContent", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property InquestContent() As InquestContent
		Get
			Return Me._InquestContent.Entity
		End Get
		Set
			Dim previousValue As InquestContent = Me._InquestContent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._InquestContent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._InquestContent.Entity = Nothing
					previousValue.QuestionsByInquestContent.Remove(Me)
				End If
				Me._InquestContent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.QuestionsByInquestContent.Add(Me)
					Me._IdInquestContent = value.Id
				Else
					Me._IdInquestContent = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("InquestContent")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AnswersByQuestion(ByVal entity As AnswersByQuestion)
		Me.SendPropertyChanging
		entity.QuestionsByInquestContent = Me
	End Sub
	
	Private Sub detach_AnswersByQuestion(ByVal entity As AnswersByQuestion)
		Me.SendPropertyChanging
		entity.QuestionsByInquestContent = Nothing
	End Sub
	
	Private Sub attach_AnswersByResolvedInquest(ByVal entity As AnswersByResolvedInquest)
		Me.SendPropertyChanging
		entity.QuestionsByInquestContent = Me
	End Sub
	
	Private Sub detach_AnswersByResolvedInquest(ByVal entity As AnswersByResolvedInquest)
		Me.SendPropertyChanging
		entity.QuestionsByInquestContent = Nothing
	End Sub
End Class

<Table(Name:="dbo.Reply")>  _
Partial Public Class Reply
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdForum As Integer
	
	Private _IdUser As Integer
	
	Private _Subject As String
	
	Private _Attachment As String
	
	Private _UpdateDate As Date
	
	Private _CreateDate As Date
	
	Private _Forum As EntityRef(Of Forum)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdForumChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdForumChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnSubjectChanged()
    End Sub
    Partial Private Sub OnAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnAttachmentChanged()
    End Sub
    Partial Private Sub OnUpdateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnUpdateDateChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Forum = CType(Nothing, EntityRef(Of Forum))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdForum", DbType:="Int NOT NULL")>  _
	Public Property IdForum() As Integer
		Get
			Return Me._IdForum
		End Get
		Set
			If ((Me._IdForum = value)  _
						= false) Then
				If Me._Forum.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdForumChanging(value)
				Me.SendPropertyChanging
				Me._IdForum = value
				Me.SendPropertyChanged("IdForum")
				Me.OnIdForumChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Subject", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Subject() As String
		Get
			Return Me._Subject
		End Get
		Set
			If (String.Equals(Me._Subject, value) = false) Then
				Me.OnSubjectChanging(value)
				Me.SendPropertyChanging
				Me._Subject = value
				Me.SendPropertyChanged("Subject")
				Me.OnSubjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Attachment", DbType:="VarChar(255)")>  _
	Public Property Attachment() As String
		Get
			Return Me._Attachment
		End Get
		Set
			If (String.Equals(Me._Attachment, value) = false) Then
				Me.OnAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._Attachment = value
				Me.SendPropertyChanged("Attachment")
				Me.OnAttachmentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_UpdateDate", DbType:="DateTime NOT NULL")>  _
	Public Property UpdateDate() As Date
		Get
			Return Me._UpdateDate
		End Get
		Set
			If ((Me._UpdateDate = value)  _
						= false) Then
				Me.OnUpdateDateChanging(value)
				Me.SendPropertyChanging
				Me._UpdateDate = value
				Me.SendPropertyChanged("UpdateDate")
				Me.OnUpdateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Forum_Reply", Storage:="_Forum", ThisKey:="IdForum", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Forum() As Forum
		Get
			Return Me._Forum.Entity
		End Get
		Set
			Dim previousValue As Forum = Me._Forum.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Forum.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Forum.Entity = Nothing
					previousValue.Reply.Remove(Me)
				End If
				Me._Forum.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Reply.Add(Me)
					Me._IdForum = value.Id
				Else
					Me._IdForum = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Forum")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ResolvedInquest")>  _
Partial Public Class ResolvedInquest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdInquestContent As System.Nullable(Of Integer)
	
	Private _Comments As String
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _AnswersByResolvedInquest As EntitySet(Of AnswersByResolvedInquest)
	
	Private _InquestContent As EntityRef(Of InquestContent)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdInquestContentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdInquestContentChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AnswersByResolvedInquest = New EntitySet(Of AnswersByResolvedInquest)(AddressOf Me.attach_AnswersByResolvedInquest, AddressOf Me.detach_AnswersByResolvedInquest)
		Me._InquestContent = CType(Nothing, EntityRef(Of InquestContent))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdInquestContent", DbType:="Int")>  _
	Public Property IdInquestContent() As System.Nullable(Of Integer)
		Get
			Return Me._IdInquestContent
		End Get
		Set
			If (Me._IdInquestContent.Equals(value) = false) Then
				If Me._InquestContent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdInquestContentChanging(value)
				Me.SendPropertyChanging
				Me._IdInquestContent = value
				Me.SendPropertyChanged("IdInquestContent")
				Me.OnIdInquestContentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comments", DbType:="VarChar(255)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ResolvedInquest_AnswersByResolvedInquest", Storage:="_AnswersByResolvedInquest", ThisKey:="Id", OtherKey:="IdResolvedInquest")>  _
	Public Property AnswersByResolvedInquest() As EntitySet(Of AnswersByResolvedInquest)
		Get
			Return Me._AnswersByResolvedInquest
		End Get
		Set
			Me._AnswersByResolvedInquest.Assign(value)
		End Set
	End Property
	
	<Association(Name:="InquestContent_ResolvedInquest", Storage:="_InquestContent", ThisKey:="IdInquestContent", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property InquestContent() As InquestContent
		Get
			Return Me._InquestContent.Entity
		End Get
		Set
			Dim previousValue As InquestContent = Me._InquestContent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._InquestContent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._InquestContent.Entity = Nothing
					previousValue.ResolvedInquest.Remove(Me)
				End If
				Me._InquestContent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ResolvedInquest.Add(Me)
					Me._IdInquestContent = value.Id
				Else
					Me._IdInquestContent = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("InquestContent")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AnswersByResolvedInquest(ByVal entity As AnswersByResolvedInquest)
		Me.SendPropertyChanging
		entity.ResolvedInquest = Me
	End Sub
	
	Private Sub detach_AnswersByResolvedInquest(ByVal entity As AnswersByResolvedInquest)
		Me.SendPropertyChanging
		entity.ResolvedInquest = Nothing
	End Sub
End Class

<Table(Name:="dbo.resultsmensaje")>  _
Partial Public Class resultsmensaje
	
	Private _id As Integer
	
	Private _valuesresult As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_valuesresult", DbType:="Int")>  _
	Public Property valuesresult() As System.Nullable(Of Integer)
		Get
			Return Me._valuesresult
		End Get
		Set
			If (Me._valuesresult.Equals(value) = false) Then
				Me._valuesresult = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.Risk")>  _
Partial Public Class Risk
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _WhatCanHappen As String
	
	Private _RiskImpact As Byte
	
	Private _OcurrenceProbability As Byte
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _ComponentByRisk As EntitySet(Of ComponentByRisk)
	
	Private _MitigationByRisk As EntitySet(Of MitigationByRisk)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnWhatCanHappenChanging(value As String)
    End Sub
    Partial Private Sub OnWhatCanHappenChanged()
    End Sub
    Partial Private Sub OnRiskImpactChanging(value As Byte)
    End Sub
    Partial Private Sub OnRiskImpactChanged()
    End Sub
    Partial Private Sub OnOcurrenceProbabilityChanging(value As Byte)
    End Sub
    Partial Private Sub OnOcurrenceProbabilityChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ComponentByRisk = New EntitySet(Of ComponentByRisk)(AddressOf Me.attach_ComponentByRisk, AddressOf Me.detach_ComponentByRisk)
		Me._MitigationByRisk = New EntitySet(Of MitigationByRisk)(AddressOf Me.attach_MitigationByRisk, AddressOf Me.detach_MitigationByRisk)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(50)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_WhatCanHappen", DbType:="VarChar(500)")>  _
	Public Property WhatCanHappen() As String
		Get
			Return Me._WhatCanHappen
		End Get
		Set
			If (String.Equals(Me._WhatCanHappen, value) = false) Then
				Me.OnWhatCanHappenChanging(value)
				Me.SendPropertyChanging
				Me._WhatCanHappen = value
				Me.SendPropertyChanged("WhatCanHappen")
				Me.OnWhatCanHappenChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RiskImpact", DbType:="TinyInt NOT NULL")>  _
	Public Property RiskImpact() As Byte
		Get
			Return Me._RiskImpact
		End Get
		Set
			If ((Me._RiskImpact = value)  _
						= false) Then
				Me.OnRiskImpactChanging(value)
				Me.SendPropertyChanging
				Me._RiskImpact = value
				Me.SendPropertyChanged("RiskImpact")
				Me.OnRiskImpactChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OcurrenceProbability", DbType:="TinyInt NOT NULL")>  _
	Public Property OcurrenceProbability() As Byte
		Get
			Return Me._OcurrenceProbability
		End Get
		Set
			If ((Me._OcurrenceProbability = value)  _
						= false) Then
				Me.OnOcurrenceProbabilityChanging(value)
				Me.SendPropertyChanging
				Me._OcurrenceProbability = value
				Me.SendPropertyChanged("OcurrenceProbability")
				Me.OnOcurrenceProbabilityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Risk_ComponentByRisk", Storage:="_ComponentByRisk", ThisKey:="Id", OtherKey:="IdRisk")>  _
	Public Property ComponentByRisk() As EntitySet(Of ComponentByRisk)
		Get
			Return Me._ComponentByRisk
		End Get
		Set
			Me._ComponentByRisk.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Risk_MitigationByRisk", Storage:="_MitigationByRisk", ThisKey:="Id", OtherKey:="IdRisk")>  _
	Public Property MitigationByRisk() As EntitySet(Of MitigationByRisk)
		Get
			Return Me._MitigationByRisk
		End Get
		Set
			Me._MitigationByRisk.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ComponentByRisk(ByVal entity As ComponentByRisk)
		Me.SendPropertyChanging
		entity.Risk = Me
	End Sub
	
	Private Sub detach_ComponentByRisk(ByVal entity As ComponentByRisk)
		Me.SendPropertyChanging
		entity.Risk = Nothing
	End Sub
	
	Private Sub attach_MitigationByRisk(ByVal entity As MitigationByRisk)
		Me.SendPropertyChanging
		entity.Risk = Me
	End Sub
	
	Private Sub detach_MitigationByRisk(ByVal entity As MitigationByRisk)
		Me.SendPropertyChanging
		entity.Risk = Nothing
	End Sub
End Class

<Table(Name:="dbo.Source")>  _
Partial Public Class Source
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Enabled As System.Nullable(Of Boolean)
	
	Private _IdUser As System.Nullable(Of Integer)
	
	Private _CreateDate As System.Nullable(Of Date)
	
	Private _SourceByProject As EntitySet(Of SourceByProject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SourceByProject = New EntitySet(Of SourceByProject)(AddressOf Me.attach_SourceByProject, AddressOf Me.detach_SourceByProject)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit")>  _
	Public Property Enabled() As System.Nullable(Of Boolean)
		Get
			Return Me._Enabled
		End Get
		Set
			If (Me._Enabled.Equals(value) = false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int")>  _
	Public Property IdUser() As System.Nullable(Of Integer)
		Get
			Return Me._IdUser
		End Get
		Set
			If (Me._IdUser.Equals(value) = false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime")>  _
	Public Property CreateDate() As System.Nullable(Of Date)
		Get
			Return Me._CreateDate
		End Get
		Set
			If (Me._CreateDate.Equals(value) = false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Source_SourceByProject", Storage:="_SourceByProject", ThisKey:="Id", OtherKey:="IdSource")>  _
	Public Property SourceByProject() As EntitySet(Of SourceByProject)
		Get
			Return Me._SourceByProject
		End Get
		Set
			Me._SourceByProject.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SourceByProject(ByVal entity As SourceByProject)
		Me.SendPropertyChanging
		entity.Source = Me
	End Sub
	
	Private Sub detach_SourceByProject(ByVal entity As SourceByProject)
		Me.SendPropertyChanging
		entity.Source = Nothing
	End Sub
End Class

<Table(Name:="dbo.SourceByProject")>  _
Partial Public Class SourceByProject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdSource As System.Nullable(Of Integer)
	
	Private _IdProject As System.Nullable(Of Integer)
	
	Private _Project As EntityRef(Of Project)
	
	Private _Source As EntityRef(Of Source)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdSourceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSourceChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Project = CType(Nothing, EntityRef(Of Project))
		Me._Source = CType(Nothing, EntityRef(Of Source))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdSource", DbType:="Int")>  _
	Public Property IdSource() As System.Nullable(Of Integer)
		Get
			Return Me._IdSource
		End Get
		Set
			If (Me._IdSource.Equals(value) = false) Then
				If Me._Source.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdSourceChanging(value)
				Me.SendPropertyChanging
				Me._IdSource = value
				Me.SendPropertyChanged("IdSource")
				Me.OnIdSourceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int")>  _
	Public Property IdProject() As System.Nullable(Of Integer)
		Get
			Return Me._IdProject
		End Get
		Set
			If (Me._IdProject.Equals(value) = false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_SourceByProject", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.SourceByProject.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SourceByProject.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	<Association(Name:="Source_SourceByProject", Storage:="_Source", ThisKey:="IdSource", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Source() As Source
		Get
			Return Me._Source.Entity
		End Get
		Set
			Dim previousValue As Source = Me._Source.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Source.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Source.Entity = Nothing
					previousValue.SourceByProject.Remove(Me)
				End If
				Me._Source.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SourceByProject.Add(Me)
					Me._IdSource = value.Id
				Else
					Me._IdSource = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Source")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.StrategicActivity")>  _
Partial Public Class StrategicActivity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _IdStrategy As Integer
	
	Private _BeginDate As Date
	
	Private _EndDate As Date
	
	Private _EstimatedValue As String
	
	Private _IdResponsible As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _Strategy As EntityRef(Of Strategy)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIdStrategyChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdStrategyChanged()
    End Sub
    Partial Private Sub OnBeginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnBeginDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As Date)
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnEstimatedValueChanging(value As String)
    End Sub
    Partial Private Sub OnEstimatedValueChanged()
    End Sub
    Partial Private Sub OnIdResponsibleChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdResponsibleChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Strategy = CType(Nothing, EntityRef(Of Strategy))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdStrategy", DbType:="Int NOT NULL")>  _
	Public Property IdStrategy() As Integer
		Get
			Return Me._IdStrategy
		End Get
		Set
			If ((Me._IdStrategy = value)  _
						= false) Then
				If Me._Strategy.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdStrategyChanging(value)
				Me.SendPropertyChanging
				Me._IdStrategy = value
				Me.SendPropertyChanged("IdStrategy")
				Me.OnIdStrategyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginDate", DbType:="DateTime NOT NULL")>  _
	Public Property BeginDate() As Date
		Get
			Return Me._BeginDate
		End Get
		Set
			If ((Me._BeginDate = value)  _
						= false) Then
				Me.OnBeginDateChanging(value)
				Me.SendPropertyChanging
				Me._BeginDate = value
				Me.SendPropertyChanged("BeginDate")
				Me.OnBeginDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndDate", DbType:="DateTime NOT NULL")>  _
	Public Property EndDate() As Date
		Get
			Return Me._EndDate
		End Get
		Set
			If ((Me._EndDate = value)  _
						= false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EstimatedValue", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property EstimatedValue() As String
		Get
			Return Me._EstimatedValue
		End Get
		Set
			If (String.Equals(Me._EstimatedValue, value) = false) Then
				Me.OnEstimatedValueChanging(value)
				Me.SendPropertyChanging
				Me._EstimatedValue = value
				Me.SendPropertyChanged("EstimatedValue")
				Me.OnEstimatedValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdResponsible", DbType:="Int NOT NULL")>  _
	Public Property IdResponsible() As Integer
		Get
			Return Me._IdResponsible
		End Get
		Set
			If ((Me._IdResponsible = value)  _
						= false) Then
				Me.OnIdResponsibleChanging(value)
				Me.SendPropertyChanging
				Me._IdResponsible = value
				Me.SendPropertyChanged("IdResponsible")
				Me.OnIdResponsibleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Strategy_StrategicActivity", Storage:="_Strategy", ThisKey:="IdStrategy", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Strategy() As Strategy
		Get
			Return Me._Strategy.Entity
		End Get
		Set
			Dim previousValue As Strategy = Me._Strategy.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Strategy.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Strategy.Entity = Nothing
					previousValue.StrategicActivity.Remove(Me)
				End If
				Me._Strategy.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.StrategicActivity.Add(Me)
					Me._IdStrategy = value.Id
				Else
					Me._IdStrategy = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Strategy")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.StrategicLine")>  _
Partial Public Class StrategicLine
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IdStrategicObjective As Integer
	
	Private _IdManagment As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _Program As EntitySet(Of Program)
	
	Private _Management As EntityRef(Of Management)
	
	Private _StrategicObjective As EntityRef(Of StrategicObjective)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdStrategicObjectiveChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdStrategicObjectiveChanged()
    End Sub
    Partial Private Sub OnIdManagmentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdManagmentChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Program = New EntitySet(Of Program)(AddressOf Me.attach_Program, AddressOf Me.detach_Program)
		Me._Management = CType(Nothing, EntityRef(Of Management))
		Me._StrategicObjective = CType(Nothing, EntityRef(Of StrategicObjective))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdStrategicObjective", DbType:="Int NOT NULL")>  _
	Public Property IdStrategicObjective() As Integer
		Get
			Return Me._IdStrategicObjective
		End Get
		Set
			If ((Me._IdStrategicObjective = value)  _
						= false) Then
				If Me._StrategicObjective.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdStrategicObjectiveChanging(value)
				Me.SendPropertyChanging
				Me._IdStrategicObjective = value
				Me.SendPropertyChanged("IdStrategicObjective")
				Me.OnIdStrategicObjectiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdManagment", DbType:="Int NOT NULL")>  _
	Public Property IdManagment() As Integer
		Get
			Return Me._IdManagment
		End Get
		Set
			If ((Me._IdManagment = value)  _
						= false) Then
				If Me._Management.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdManagmentChanging(value)
				Me.SendPropertyChanging
				Me._IdManagment = value
				Me.SendPropertyChanged("IdManagment")
				Me.OnIdManagmentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="StrategicLine_Program", Storage:="_Program", ThisKey:="Id", OtherKey:="IdStrategicLine")>  _
	Public Property Program() As EntitySet(Of Program)
		Get
			Return Me._Program
		End Get
		Set
			Me._Program.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Management_StrategicLine", Storage:="_Management", ThisKey:="IdManagment", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Management() As Management
		Get
			Return Me._Management.Entity
		End Get
		Set
			Dim previousValue As Management = Me._Management.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Management.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Management.Entity = Nothing
					previousValue.StrategicLine.Remove(Me)
				End If
				Me._Management.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.StrategicLine.Add(Me)
					Me._IdManagment = value.id
				Else
					Me._IdManagment = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Management")
			End If
		End Set
	End Property
	
	<Association(Name:="StrategicObjective_StrategicLine", Storage:="_StrategicObjective", ThisKey:="IdStrategicObjective", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property StrategicObjective() As StrategicObjective
		Get
			Return Me._StrategicObjective.Entity
		End Get
		Set
			Dim previousValue As StrategicObjective = Me._StrategicObjective.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StrategicObjective.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StrategicObjective.Entity = Nothing
					previousValue.StrategicLine.Remove(Me)
				End If
				Me._StrategicObjective.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.StrategicLine.Add(Me)
					Me._IdStrategicObjective = value.id
				Else
					Me._IdStrategicObjective = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("StrategicObjective")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Program(ByVal entity As Program)
		Me.SendPropertyChanging
		entity.StrategicLine = Me
	End Sub
	
	Private Sub detach_Program(ByVal entity As Program)
		Me.SendPropertyChanging
		entity.StrategicLine = Nothing
	End Sub
End Class

<Table(Name:="dbo.StrategicObjective")>  _
Partial Public Class StrategicObjective
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Year As Integer
	
	Private _IdPerspective As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _StrategicLine As EntitySet(Of StrategicLine)
	
	Private _Strategy As EntitySet(Of Strategy)
	
	Private _Perspective As EntityRef(Of Perspective)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnYearChanging(value As Integer)
    End Sub
    Partial Private Sub OnYearChanged()
    End Sub
    Partial Private Sub OnIdPerspectiveChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPerspectiveChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._StrategicLine = New EntitySet(Of StrategicLine)(AddressOf Me.attach_StrategicLine, AddressOf Me.detach_StrategicLine)
		Me._Strategy = New EntitySet(Of Strategy)(AddressOf Me.attach_Strategy, AddressOf Me.detach_Strategy)
		Me._Perspective = CType(Nothing, EntityRef(Of Perspective))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Year", DbType:="Int NOT NULL")>  _
	Public Property Year() As Integer
		Get
			Return Me._Year
		End Get
		Set
			If ((Me._Year = value)  _
						= false) Then
				Me.OnYearChanging(value)
				Me.SendPropertyChanging
				Me._Year = value
				Me.SendPropertyChanged("Year")
				Me.OnYearChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdPerspective", DbType:="Int NOT NULL")>  _
	Public Property IdPerspective() As Integer
		Get
			Return Me._IdPerspective
		End Get
		Set
			If ((Me._IdPerspective = value)  _
						= false) Then
				If Me._Perspective.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdPerspectiveChanging(value)
				Me.SendPropertyChanging
				Me._IdPerspective = value
				Me.SendPropertyChanged("IdPerspective")
				Me.OnIdPerspectiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="StrategicObjective_StrategicLine", Storage:="_StrategicLine", ThisKey:="id", OtherKey:="IdStrategicObjective")>  _
	Public Property StrategicLine() As EntitySet(Of StrategicLine)
		Get
			Return Me._StrategicLine
		End Get
		Set
			Me._StrategicLine.Assign(value)
		End Set
	End Property
	
	<Association(Name:="StrategicObjective_Strategy", Storage:="_Strategy", ThisKey:="id", OtherKey:="IdStrategicObjective")>  _
	Public Property Strategy() As EntitySet(Of Strategy)
		Get
			Return Me._Strategy
		End Get
		Set
			Me._Strategy.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Perspective_StrategicObjective", Storage:="_Perspective", ThisKey:="IdPerspective", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Perspective() As Perspective
		Get
			Return Me._Perspective.Entity
		End Get
		Set
			Dim previousValue As Perspective = Me._Perspective.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Perspective.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Perspective.Entity = Nothing
					previousValue.StrategicObjective.Remove(Me)
				End If
				Me._Perspective.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.StrategicObjective.Add(Me)
					Me._IdPerspective = value.Id
				Else
					Me._IdPerspective = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Perspective")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_StrategicLine(ByVal entity As StrategicLine)
		Me.SendPropertyChanging
		entity.StrategicObjective = Me
	End Sub
	
	Private Sub detach_StrategicLine(ByVal entity As StrategicLine)
		Me.SendPropertyChanging
		entity.StrategicObjective = Nothing
	End Sub
	
	Private Sub attach_Strategy(ByVal entity As Strategy)
		Me.SendPropertyChanging
		entity.StrategicObjective = Me
	End Sub
	
	Private Sub detach_Strategy(ByVal entity As Strategy)
		Me.SendPropertyChanging
		entity.StrategicObjective = Nothing
	End Sub
End Class

<Table(Name:="dbo.Strategy")>  _
Partial Public Class Strategy
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _IdStrategicObjective As Integer
	
	Private _IdManagment As Integer
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _StrategicActivity As EntitySet(Of StrategicActivity)
	
	Private _Management As EntityRef(Of Management)
	
	Private _StrategicObjective As EntityRef(Of StrategicObjective)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdStrategicObjectiveChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdStrategicObjectiveChanged()
    End Sub
    Partial Private Sub OnIdManagmentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdManagmentChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._StrategicActivity = New EntitySet(Of StrategicActivity)(AddressOf Me.attach_StrategicActivity, AddressOf Me.detach_StrategicActivity)
		Me._Management = CType(Nothing, EntityRef(Of Management))
		Me._StrategicObjective = CType(Nothing, EntityRef(Of StrategicObjective))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdStrategicObjective", DbType:="Int NOT NULL")>  _
	Public Property IdStrategicObjective() As Integer
		Get
			Return Me._IdStrategicObjective
		End Get
		Set
			If ((Me._IdStrategicObjective = value)  _
						= false) Then
				If Me._StrategicObjective.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdStrategicObjectiveChanging(value)
				Me.SendPropertyChanging
				Me._IdStrategicObjective = value
				Me.SendPropertyChanged("IdStrategicObjective")
				Me.OnIdStrategicObjectiveChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdManagment", DbType:="Int NOT NULL")>  _
	Public Property IdManagment() As Integer
		Get
			Return Me._IdManagment
		End Get
		Set
			If ((Me._IdManagment = value)  _
						= false) Then
				If Me._Management.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdManagmentChanging(value)
				Me.SendPropertyChanging
				Me._IdManagment = value
				Me.SendPropertyChanged("IdManagment")
				Me.OnIdManagmentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Strategy_StrategicActivity", Storage:="_StrategicActivity", ThisKey:="Id", OtherKey:="IdStrategy")>  _
	Public Property StrategicActivity() As EntitySet(Of StrategicActivity)
		Get
			Return Me._StrategicActivity
		End Get
		Set
			Me._StrategicActivity.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Management_Strategy", Storage:="_Management", ThisKey:="IdManagment", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Management() As Management
		Get
			Return Me._Management.Entity
		End Get
		Set
			Dim previousValue As Management = Me._Management.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Management.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Management.Entity = Nothing
					previousValue.Strategy.Remove(Me)
				End If
				Me._Management.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Strategy.Add(Me)
					Me._IdManagment = value.id
				Else
					Me._IdManagment = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Management")
			End If
		End Set
	End Property
	
	<Association(Name:="StrategicObjective_Strategy", Storage:="_StrategicObjective", ThisKey:="IdStrategicObjective", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property StrategicObjective() As StrategicObjective
		Get
			Return Me._StrategicObjective.Entity
		End Get
		Set
			Dim previousValue As StrategicObjective = Me._StrategicObjective.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._StrategicObjective.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._StrategicObjective.Entity = Nothing
					previousValue.Strategy.Remove(Me)
				End If
				Me._StrategicObjective.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Strategy.Add(Me)
					Me._IdStrategicObjective = value.id
				Else
					Me._IdStrategicObjective = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("StrategicObjective")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_StrategicActivity(ByVal entity As StrategicActivity)
		Me.SendPropertyChanging
		entity.Strategy = Me
	End Sub
	
	Private Sub detach_StrategicActivity(ByVal entity As StrategicActivity)
		Me.SendPropertyChanging
		entity.Strategy = Nothing
	End Sub
End Class

<Table(Name:="dbo.SubActivity")>  _
Partial Public Class SubActivity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdActivity As Integer
	
	Private _Type As Integer
	
	Private _Number As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _IdResponsible As Integer
	
	Private _BeginDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _TotalCost As System.Nullable(Of Decimal)
	
	Private _Duration As Integer
	
	Private _FSCContribution As System.Nullable(Of Decimal)
	
	Private _OFContribution As System.Nullable(Of Decimal)
	
	Private _Attachment As String
	
	Private _CriticalPath As System.Nullable(Of Boolean)
	
	Private _RequiresApproval As System.Nullable(Of Boolean)
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _idKey As System.Nullable(Of Integer)
	
	Private _isLastVersion As System.Nullable(Of Boolean)
	
	Private _IdPhase As System.Nullable(Of Integer)
	
	Private _reponsible As String
	
	Private _SubactivityByThird As EntitySet(Of SubactivityByThird)
	
	Private _SubActivityInformationRegistry As EntitySet(Of SubActivityInformationRegistry)
	
	Private _Activity As EntityRef(Of Activity)
	
	Private _ProjectPhase As EntityRef(Of ProjectPhase)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdActivityChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdActivityChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnNumberChanging(value As String)
    End Sub
    Partial Private Sub OnNumberChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIdResponsibleChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdResponsibleChanged()
    End Sub
    Partial Private Sub OnBeginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBeginDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnTotalCostChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalCostChanged()
    End Sub
    Partial Private Sub OnDurationChanging(value As Integer)
    End Sub
    Partial Private Sub OnDurationChanged()
    End Sub
    Partial Private Sub OnFSCContributionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFSCContributionChanged()
    End Sub
    Partial Private Sub OnOFContributionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOFContributionChanged()
    End Sub
    Partial Private Sub OnAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnAttachmentChanged()
    End Sub
    Partial Private Sub OnCriticalPathChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCriticalPathChanged()
    End Sub
    Partial Private Sub OnRequiresApprovalChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRequiresApprovalChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnidKeyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnidKeyChanged()
    End Sub
    Partial Private Sub OnisLastVersionChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnisLastVersionChanged()
    End Sub
    Partial Private Sub OnIdPhaseChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPhaseChanged()
    End Sub
    Partial Private Sub OnreponsibleChanging(value As String)
    End Sub
    Partial Private Sub OnreponsibleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SubactivityByThird = New EntitySet(Of SubactivityByThird)(AddressOf Me.attach_SubactivityByThird, AddressOf Me.detach_SubactivityByThird)
		Me._SubActivityInformationRegistry = New EntitySet(Of SubActivityInformationRegistry)(AddressOf Me.attach_SubActivityInformationRegistry, AddressOf Me.detach_SubActivityInformationRegistry)
		Me._Activity = CType(Nothing, EntityRef(Of Activity))
		Me._ProjectPhase = CType(Nothing, EntityRef(Of ProjectPhase))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdActivity", DbType:="Int NOT NULL")>  _
	Public Property IdActivity() As Integer
		Get
			Return Me._IdActivity
		End Get
		Set
			If ((Me._IdActivity = value)  _
						= false) Then
				If Me._Activity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdActivityChanging(value)
				Me.SendPropertyChanging
				Me._IdActivity = value
				Me.SendPropertyChanged("IdActivity")
				Me.OnIdActivityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Type", DbType:="Int NOT NULL")>  _
	Public Property Type() As Integer
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Number", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Number() As String
		Get
			Return Me._Number
		End Get
		Set
			If (String.Equals(Me._Number, value) = false) Then
				Me.OnNumberChanging(value)
				Me.SendPropertyChanging
				Me._Number = value
				Me.SendPropertyChanged("Number")
				Me.OnNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(500)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdResponsible", DbType:="Int NOT NULL")>  _
	Public Property IdResponsible() As Integer
		Get
			Return Me._IdResponsible
		End Get
		Set
			If ((Me._IdResponsible = value)  _
						= false) Then
				Me.OnIdResponsibleChanging(value)
				Me.SendPropertyChanging
				Me._IdResponsible = value
				Me.SendPropertyChanged("IdResponsible")
				Me.OnIdResponsibleChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginDate", DbType:="DateTime")>  _
	Public Property BeginDate() As System.Nullable(Of Date)
		Get
			Return Me._BeginDate
		End Get
		Set
			If (Me._BeginDate.Equals(value) = false) Then
				Me.OnBeginDateChanging(value)
				Me.SendPropertyChanging
				Me._BeginDate = value
				Me.SendPropertyChanged("BeginDate")
				Me.OnBeginDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalCost", DbType:="Decimal(18,3)")>  _
	Public Property TotalCost() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalCost
		End Get
		Set
			If (Me._TotalCost.Equals(value) = false) Then
				Me.OnTotalCostChanging(value)
				Me.SendPropertyChanging
				Me._TotalCost = value
				Me.SendPropertyChanged("TotalCost")
				Me.OnTotalCostChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Duration", DbType:="Int NOT NULL")>  _
	Public Property Duration() As Integer
		Get
			Return Me._Duration
		End Get
		Set
			If ((Me._Duration = value)  _
						= false) Then
				Me.OnDurationChanging(value)
				Me.SendPropertyChanging
				Me._Duration = value
				Me.SendPropertyChanged("Duration")
				Me.OnDurationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FSCContribution", DbType:="Decimal(18,3)")>  _
	Public Property FSCContribution() As System.Nullable(Of Decimal)
		Get
			Return Me._FSCContribution
		End Get
		Set
			If (Me._FSCContribution.Equals(value) = false) Then
				Me.OnFSCContributionChanging(value)
				Me.SendPropertyChanging
				Me._FSCContribution = value
				Me.SendPropertyChanged("FSCContribution")
				Me.OnFSCContributionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OFContribution", DbType:="Decimal(18,3)")>  _
	Public Property OFContribution() As System.Nullable(Of Decimal)
		Get
			Return Me._OFContribution
		End Get
		Set
			If (Me._OFContribution.Equals(value) = false) Then
				Me.OnOFContributionChanging(value)
				Me.SendPropertyChanging
				Me._OFContribution = value
				Me.SendPropertyChanged("OFContribution")
				Me.OnOFContributionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Attachment", DbType:="VarChar(255)")>  _
	Public Property Attachment() As String
		Get
			Return Me._Attachment
		End Get
		Set
			If (String.Equals(Me._Attachment, value) = false) Then
				Me.OnAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._Attachment = value
				Me.SendPropertyChanged("Attachment")
				Me.OnAttachmentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CriticalPath", DbType:="Bit")>  _
	Public Property CriticalPath() As System.Nullable(Of Boolean)
		Get
			Return Me._CriticalPath
		End Get
		Set
			If (Me._CriticalPath.Equals(value) = false) Then
				Me.OnCriticalPathChanging(value)
				Me.SendPropertyChanging
				Me._CriticalPath = value
				Me.SendPropertyChanged("CriticalPath")
				Me.OnCriticalPathChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiresApproval", DbType:="Bit")>  _
	Public Property RequiresApproval() As System.Nullable(Of Boolean)
		Get
			Return Me._RequiresApproval
		End Get
		Set
			If (Me._RequiresApproval.Equals(value) = false) Then
				Me.OnRequiresApprovalChanging(value)
				Me.SendPropertyChanging
				Me._RequiresApproval = value
				Me.SendPropertyChanged("RequiresApproval")
				Me.OnRequiresApprovalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_idKey", DbType:="Int")>  _
	Public Property idKey() As System.Nullable(Of Integer)
		Get
			Return Me._idKey
		End Get
		Set
			If (Me._idKey.Equals(value) = false) Then
				Me.OnidKeyChanging(value)
				Me.SendPropertyChanging
				Me._idKey = value
				Me.SendPropertyChanged("idKey")
				Me.OnidKeyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_isLastVersion", DbType:="Bit")>  _
	Public Property isLastVersion() As System.Nullable(Of Boolean)
		Get
			Return Me._isLastVersion
		End Get
		Set
			If (Me._isLastVersion.Equals(value) = false) Then
				Me.OnisLastVersionChanging(value)
				Me.SendPropertyChanging
				Me._isLastVersion = value
				Me.SendPropertyChanged("isLastVersion")
				Me.OnisLastVersionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdPhase", DbType:="Int")>  _
	Public Property IdPhase() As System.Nullable(Of Integer)
		Get
			Return Me._IdPhase
		End Get
		Set
			If (Me._IdPhase.Equals(value) = false) Then
				If Me._ProjectPhase.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdPhaseChanging(value)
				Me.SendPropertyChanging
				Me._IdPhase = value
				Me.SendPropertyChanged("IdPhase")
				Me.OnIdPhaseChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_reponsible", DbType:="VarChar(200)")>  _
	Public Property reponsible() As String
		Get
			Return Me._reponsible
		End Get
		Set
			If (String.Equals(Me._reponsible, value) = false) Then
				Me.OnreponsibleChanging(value)
				Me.SendPropertyChanging
				Me._reponsible = value
				Me.SendPropertyChanged("reponsible")
				Me.OnreponsibleChanged
			End If
		End Set
	End Property
	
	<Association(Name:="SubActivity_SubactivityByThird", Storage:="_SubactivityByThird", ThisKey:="Id", OtherKey:="IdSubActivity")>  _
	Public Property SubactivityByThird() As EntitySet(Of SubactivityByThird)
		Get
			Return Me._SubactivityByThird
		End Get
		Set
			Me._SubactivityByThird.Assign(value)
		End Set
	End Property
	
	<Association(Name:="SubActivity_SubActivityInformationRegistry", Storage:="_SubActivityInformationRegistry", ThisKey:="Id", OtherKey:="IdSubActivity")>  _
	Public Property SubActivityInformationRegistry() As EntitySet(Of SubActivityInformationRegistry)
		Get
			Return Me._SubActivityInformationRegistry
		End Get
		Set
			Me._SubActivityInformationRegistry.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Activity_SubActivity", Storage:="_Activity", ThisKey:="IdActivity", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Activity() As Activity
		Get
			Return Me._Activity.Entity
		End Get
		Set
			Dim previousValue As Activity = Me._Activity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Activity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Activity.Entity = Nothing
					previousValue.SubActivity.Remove(Me)
				End If
				Me._Activity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubActivity.Add(Me)
					Me._IdActivity = value.Id
				Else
					Me._IdActivity = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Activity")
			End If
		End Set
	End Property
	
	<Association(Name:="ProjectPhase_SubActivity", Storage:="_ProjectPhase", ThisKey:="IdPhase", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property ProjectPhase() As ProjectPhase
		Get
			Return Me._ProjectPhase.Entity
		End Get
		Set
			Dim previousValue As ProjectPhase = Me._ProjectPhase.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProjectPhase.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProjectPhase.Entity = Nothing
					previousValue.SubActivity.Remove(Me)
				End If
				Me._ProjectPhase.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubActivity.Add(Me)
					Me._IdPhase = value.id
				Else
					Me._IdPhase = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("ProjectPhase")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SubactivityByThird(ByVal entity As SubactivityByThird)
		Me.SendPropertyChanging
		entity.SubActivity = Me
	End Sub
	
	Private Sub detach_SubactivityByThird(ByVal entity As SubactivityByThird)
		Me.SendPropertyChanging
		entity.SubActivity = Nothing
	End Sub
	
	Private Sub attach_SubActivityInformationRegistry(ByVal entity As SubActivityInformationRegistry)
		Me.SendPropertyChanging
		entity.SubActivity = Me
	End Sub
	
	Private Sub detach_SubActivityInformationRegistry(ByVal entity As SubActivityInformationRegistry)
		Me.SendPropertyChanging
		entity.SubActivity = Nothing
	End Sub
End Class

<Table(Name:="dbo.SubactivityByThird")>  _
Partial Public Class SubactivityByThird
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _IdThird As System.Nullable(Of Integer)
	
	Private _IdSubActivity As System.Nullable(Of Integer)
	
	Private _SubActivity As EntityRef(Of SubActivity)
	
	Private _Third As EntityRef(Of Third)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OnIdThirdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdThirdChanged()
    End Sub
    Partial Private Sub OnIdSubActivityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSubActivityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SubActivity = CType(Nothing, EntityRef(Of SubActivity))
		Me._Third = CType(Nothing, EntityRef(Of Third))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdThird", DbType:="Int")>  _
	Public Property IdThird() As System.Nullable(Of Integer)
		Get
			Return Me._IdThird
		End Get
		Set
			If (Me._IdThird.Equals(value) = false) Then
				If Me._Third.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdThirdChanging(value)
				Me.SendPropertyChanging
				Me._IdThird = value
				Me.SendPropertyChanged("IdThird")
				Me.OnIdThirdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdSubActivity", DbType:="Int")>  _
	Public Property IdSubActivity() As System.Nullable(Of Integer)
		Get
			Return Me._IdSubActivity
		End Get
		Set
			If (Me._IdSubActivity.Equals(value) = false) Then
				If Me._SubActivity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdSubActivityChanging(value)
				Me.SendPropertyChanging
				Me._IdSubActivity = value
				Me.SendPropertyChanged("IdSubActivity")
				Me.OnIdSubActivityChanged
			End If
		End Set
	End Property
	
	<Association(Name:="SubActivity_SubactivityByThird", Storage:="_SubActivity", ThisKey:="IdSubActivity", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property SubActivity() As SubActivity
		Get
			Return Me._SubActivity.Entity
		End Get
		Set
			Dim previousValue As SubActivity = Me._SubActivity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SubActivity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SubActivity.Entity = Nothing
					previousValue.SubactivityByThird.Remove(Me)
				End If
				Me._SubActivity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubactivityByThird.Add(Me)
					Me._IdSubActivity = value.Id
				Else
					Me._IdSubActivity = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("SubActivity")
			End If
		End Set
	End Property
	
	<Association(Name:="Third_SubactivityByThird", Storage:="_Third", ThisKey:="IdThird", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Third() As Third
		Get
			Return Me._Third.Entity
		End Get
		Set
			Dim previousValue As Third = Me._Third.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Third.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Third.Entity = Nothing
					previousValue.SubactivityByThird.Remove(Me)
				End If
				Me._Third.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubactivityByThird.Add(Me)
					Me._IdThird = value.Id
				Else
					Me._IdThird = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Third")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.SubActivityInformationRegistry")>  _
Partial Public Class SubActivityInformationRegistry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdSubActivity As Integer
	
	Private _Description As String
	
	Private _BeginDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _Comments As String
	
	Private _Attachment As String
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _State As System.Nullable(Of Integer)
	
	Private _Observation As String
	
	Private _Indicator As String
	
	Private _SubActivity As EntityRef(Of SubActivity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdSubActivityChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdSubActivityChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnBeginDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnBeginDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnAttachmentChanging(value As String)
    End Sub
    Partial Private Sub OnAttachmentChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnStateChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStateChanged()
    End Sub
    Partial Private Sub OnObservationChanging(value As String)
    End Sub
    Partial Private Sub OnObservationChanged()
    End Sub
    Partial Private Sub OnIndicatorChanging(value As String)
    End Sub
    Partial Private Sub OnIndicatorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SubActivity = CType(Nothing, EntityRef(Of SubActivity))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdSubActivity", DbType:="Int NOT NULL")>  _
	Public Property IdSubActivity() As Integer
		Get
			Return Me._IdSubActivity
		End Get
		Set
			If ((Me._IdSubActivity = value)  _
						= false) Then
				If Me._SubActivity.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdSubActivityChanging(value)
				Me.SendPropertyChanging
				Me._IdSubActivity = value
				Me.SendPropertyChanged("IdSubActivity")
				Me.OnIdSubActivityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(300)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginDate", DbType:="DateTime")>  _
	Public Property BeginDate() As System.Nullable(Of Date)
		Get
			Return Me._BeginDate
		End Get
		Set
			If (Me._BeginDate.Equals(value) = false) Then
				Me.OnBeginDateChanging(value)
				Me.SendPropertyChanging
				Me._BeginDate = value
				Me.SendPropertyChanged("BeginDate")
				Me.OnBeginDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Comments", DbType:="NVarChar(300)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Attachment", DbType:="NVarChar(255)")>  _
	Public Property Attachment() As String
		Get
			Return Me._Attachment
		End Get
		Set
			If (String.Equals(Me._Attachment, value) = false) Then
				Me.OnAttachmentChanging(value)
				Me.SendPropertyChanging
				Me._Attachment = value
				Me.SendPropertyChanged("Attachment")
				Me.OnAttachmentChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_State", DbType:="Int")>  _
	Public Property State() As System.Nullable(Of Integer)
		Get
			Return Me._State
		End Get
		Set
			If (Me._State.Equals(value) = false) Then
				Me.OnStateChanging(value)
				Me.SendPropertyChanging
				Me._State = value
				Me.SendPropertyChanged("State")
				Me.OnStateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Observation", DbType:="NVarChar(MAX)")>  _
	Public Property Observation() As String
		Get
			Return Me._Observation
		End Get
		Set
			If (String.Equals(Me._Observation, value) = false) Then
				Me.OnObservationChanging(value)
				Me.SendPropertyChanging
				Me._Observation = value
				Me.SendPropertyChanged("Observation")
				Me.OnObservationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Indicator", DbType:="NVarChar(50)")>  _
	Public Property Indicator() As String
		Get
			Return Me._Indicator
		End Get
		Set
			If (String.Equals(Me._Indicator, value) = false) Then
				Me.OnIndicatorChanging(value)
				Me.SendPropertyChanging
				Me._Indicator = value
				Me.SendPropertyChanged("Indicator")
				Me.OnIndicatorChanged
			End If
		End Set
	End Property
	
	<Association(Name:="SubActivity_SubActivityInformationRegistry", Storage:="_SubActivity", ThisKey:="IdSubActivity", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property SubActivity() As SubActivity
		Get
			Return Me._SubActivity.Entity
		End Get
		Set
			Dim previousValue As SubActivity = Me._SubActivity.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SubActivity.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SubActivity.Entity = Nothing
					previousValue.SubActivityInformationRegistry.Remove(Me)
				End If
				Me._SubActivity.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubActivityInformationRegistry.Add(Me)
					Me._IdSubActivity = value.Id
				Else
					Me._IdSubActivity = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SubActivity")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.SubjectAndValueByContractRequest")>  _
Partial Public Class SubjectAndValueByContractRequest
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdContractRequest As Integer
	
	Private _SubjectContract As String
	
	Private _ProductsOrDeliverables As String
	
	Private _ContractValue As System.Nullable(Of Decimal)
	
	Private _ContributionAmount As System.Nullable(Of Decimal)
	
	Private _FeesConsultantByInstitution As System.Nullable(Of Decimal)
	
	Private _TotalFeesIntegralConsultant As System.Nullable(Of Decimal)
	
	Private _ContributionAmountRecipientInstitution As System.Nullable(Of Decimal)
	
	Private _IdCurrency As System.Nullable(Of Integer)
	
	Private _ContractRequest As EntityRef(Of ContractRequest)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdContractRequestChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdContractRequestChanged()
    End Sub
    Partial Private Sub OnSubjectContractChanging(value As String)
    End Sub
    Partial Private Sub OnSubjectContractChanged()
    End Sub
    Partial Private Sub OnProductsOrDeliverablesChanging(value As String)
    End Sub
    Partial Private Sub OnProductsOrDeliverablesChanged()
    End Sub
    Partial Private Sub OnContractValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnContractValueChanged()
    End Sub
    Partial Private Sub OnContributionAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnContributionAmountChanged()
    End Sub
    Partial Private Sub OnFeesConsultantByInstitutionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFeesConsultantByInstitutionChanged()
    End Sub
    Partial Private Sub OnTotalFeesIntegralConsultantChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTotalFeesIntegralConsultantChanged()
    End Sub
    Partial Private Sub OnContributionAmountRecipientInstitutionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnContributionAmountRecipientInstitutionChanged()
    End Sub
    Partial Private Sub OnIdCurrencyChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCurrencyChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContractRequest = CType(Nothing, EntityRef(Of ContractRequest))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdContractRequest", DbType:="Int NOT NULL")>  _
	Public Property IdContractRequest() As Integer
		Get
			Return Me._IdContractRequest
		End Get
		Set
			If ((Me._IdContractRequest = value)  _
						= false) Then
				If Me._ContractRequest.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdContractRequestChanging(value)
				Me.SendPropertyChanging
				Me._IdContractRequest = value
				Me.SendPropertyChanged("IdContractRequest")
				Me.OnIdContractRequestChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SubjectContract", DbType:="VarChar(255)")>  _
	Public Property SubjectContract() As String
		Get
			Return Me._SubjectContract
		End Get
		Set
			If (String.Equals(Me._SubjectContract, value) = false) Then
				Me.OnSubjectContractChanging(value)
				Me.SendPropertyChanging
				Me._SubjectContract = value
				Me.SendPropertyChanged("SubjectContract")
				Me.OnSubjectContractChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductsOrDeliverables", DbType:="VarChar(255)")>  _
	Public Property ProductsOrDeliverables() As String
		Get
			Return Me._ProductsOrDeliverables
		End Get
		Set
			If (String.Equals(Me._ProductsOrDeliverables, value) = false) Then
				Me.OnProductsOrDeliverablesChanging(value)
				Me.SendPropertyChanging
				Me._ProductsOrDeliverables = value
				Me.SendPropertyChanged("ProductsOrDeliverables")
				Me.OnProductsOrDeliverablesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractValue", DbType:="Decimal(17,2)")>  _
	Public Property ContractValue() As System.Nullable(Of Decimal)
		Get
			Return Me._ContractValue
		End Get
		Set
			If (Me._ContractValue.Equals(value) = false) Then
				Me.OnContractValueChanging(value)
				Me.SendPropertyChanging
				Me._ContractValue = value
				Me.SendPropertyChanged("ContractValue")
				Me.OnContractValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContributionAmount", DbType:="Decimal(17,2)")>  _
	Public Property ContributionAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._ContributionAmount
		End Get
		Set
			If (Me._ContributionAmount.Equals(value) = false) Then
				Me.OnContributionAmountChanging(value)
				Me.SendPropertyChanging
				Me._ContributionAmount = value
				Me.SendPropertyChanged("ContributionAmount")
				Me.OnContributionAmountChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FeesConsultantByInstitution", DbType:="Decimal(17,2)")>  _
	Public Property FeesConsultantByInstitution() As System.Nullable(Of Decimal)
		Get
			Return Me._FeesConsultantByInstitution
		End Get
		Set
			If (Me._FeesConsultantByInstitution.Equals(value) = false) Then
				Me.OnFeesConsultantByInstitutionChanging(value)
				Me.SendPropertyChanging
				Me._FeesConsultantByInstitution = value
				Me.SendPropertyChanged("FeesConsultantByInstitution")
				Me.OnFeesConsultantByInstitutionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalFeesIntegralConsultant", DbType:="Decimal(17,2)")>  _
	Public Property TotalFeesIntegralConsultant() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalFeesIntegralConsultant
		End Get
		Set
			If (Me._TotalFeesIntegralConsultant.Equals(value) = false) Then
				Me.OnTotalFeesIntegralConsultantChanging(value)
				Me.SendPropertyChanging
				Me._TotalFeesIntegralConsultant = value
				Me.SendPropertyChanged("TotalFeesIntegralConsultant")
				Me.OnTotalFeesIntegralConsultantChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContributionAmountRecipientInstitution", DbType:="Decimal(17,2)")>  _
	Public Property ContributionAmountRecipientInstitution() As System.Nullable(Of Decimal)
		Get
			Return Me._ContributionAmountRecipientInstitution
		End Get
		Set
			If (Me._ContributionAmountRecipientInstitution.Equals(value) = false) Then
				Me.OnContributionAmountRecipientInstitutionChanging(value)
				Me.SendPropertyChanging
				Me._ContributionAmountRecipientInstitution = value
				Me.SendPropertyChanged("ContributionAmountRecipientInstitution")
				Me.OnContributionAmountRecipientInstitutionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdCurrency", DbType:="Int")>  _
	Public Property IdCurrency() As System.Nullable(Of Integer)
		Get
			Return Me._IdCurrency
		End Get
		Set
			If (Me._IdCurrency.Equals(value) = false) Then
				Me.OnIdCurrencyChanging(value)
				Me.SendPropertyChanging
				Me._IdCurrency = value
				Me.SendPropertyChanged("IdCurrency")
				Me.OnIdCurrencyChanged
			End If
		End Set
	End Property
	
	<Association(Name:="ContractRequest_SubjectAndValueByContractRequest", Storage:="_ContractRequest", ThisKey:="IdContractRequest", OtherKey:="RequestNumber", IsForeignKey:=true)>  _
	Public Property ContractRequest() As ContractRequest
		Get
			Return Me._ContractRequest.Entity
		End Get
		Set
			Dim previousValue As ContractRequest = Me._ContractRequest.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractRequest.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractRequest.Entity = Nothing
					previousValue.SubjectAndValueByContractRequest.Remove(Me)
				End If
				Me._ContractRequest.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubjectAndValueByContractRequest.Add(Me)
					Me._IdContractRequest = value.RequestNumber
				Else
					Me._IdContractRequest = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ContractRequest")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.SubType")>  _
Partial Public Class SubType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code As String
	
	Private _Name As String
	
	Private _IdType As Integer
	
	Private _Type As EntityRef(Of Type)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As String)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdTypeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Type = CType(Nothing, EntityRef(Of Type))
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code", DbType:="VarChar(50)")>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdType", DbType:="Int NOT NULL")>  _
	Public Property IdType() As Integer
		Get
			Return Me._IdType
		End Get
		Set
			If ((Me._IdType = value)  _
						= false) Then
				If Me._Type.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdTypeChanging(value)
				Me.SendPropertyChanging
				Me._IdType = value
				Me.SendPropertyChanged("IdType")
				Me.OnIdTypeChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Type_SubType", Storage:="_Type", ThisKey:="IdType", OtherKey:="id", IsForeignKey:=true)>  _
	Public Property Type() As Type
		Get
			Return Me._Type.Entity
		End Get
		Set
			Dim previousValue As Type = Me._Type.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Type.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Type.Entity = Nothing
					previousValue.SubType.Remove(Me)
				End If
				Me._Type.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SubType.Add(Me)
					Me._IdType = value.id
				Else
					Me._IdType = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Type")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Summoning")>  _
Partial Public Class Summoning
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _IdProject As Integer
	
	Private _BeginDate As Date
	
	Private _EndDate As Date
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _Proposal As EntitySet(Of Proposal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnBeginDateChanging(value As Date)
    End Sub
    Partial Private Sub OnBeginDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As Date)
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Proposal = New EntitySet(Of Proposal)(AddressOf Me.attach_Proposal, AddressOf Me.detach_Proposal)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginDate", DbType:="DateTime NOT NULL")>  _
	Public Property BeginDate() As Date
		Get
			Return Me._BeginDate
		End Get
		Set
			If ((Me._BeginDate = value)  _
						= false) Then
				Me.OnBeginDateChanging(value)
				Me.SendPropertyChanging
				Me._BeginDate = value
				Me.SendPropertyChanged("BeginDate")
				Me.OnBeginDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndDate", DbType:="DateTime NOT NULL")>  _
	Public Property EndDate() As Date
		Get
			Return Me._EndDate
		End Get
		Set
			If ((Me._EndDate = value)  _
						= false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Summoning_Proposal", Storage:="_Proposal", ThisKey:="Id", OtherKey:="IdSummoning")>  _
	Public Property Proposal() As EntitySet(Of Proposal)
		Get
			Return Me._Proposal
		End Get
		Set
			Me._Proposal.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Proposal(ByVal entity As Proposal)
		Me.SendPropertyChanging
		entity.Summoning = Me
	End Sub
	
	Private Sub detach_Proposal(ByVal entity As Proposal)
		Me.SendPropertyChanging
		entity.Summoning = Nothing
	End Sub
End Class

<Table(Name:="dbo.SupplierEvaluation")>  _
Partial Public Class SupplierEvaluation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdSupplier As System.Nullable(Of Integer)
	
	Private _ContractNumber As String
	
	Private _ContractStartDate As System.Nullable(Of Date)
	
	Private _ContractEndDate As System.Nullable(Of Date)
	
	Private _ContractSubject As String
	
	Private _ContractValue As System.Nullable(Of Decimal)
	
	Private _IDUser As Integer
	
	Private _CreateDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdSupplierChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSupplierChanged()
    End Sub
    Partial Private Sub OnContractNumberChanging(value As String)
    End Sub
    Partial Private Sub OnContractNumberChanged()
    End Sub
    Partial Private Sub OnContractStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnContractStartDateChanged()
    End Sub
    Partial Private Sub OnContractEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnContractEndDateChanged()
    End Sub
    Partial Private Sub OnContractSubjectChanging(value As String)
    End Sub
    Partial Private Sub OnContractSubjectChanged()
    End Sub
    Partial Private Sub OnContractValueChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnContractValueChanged()
    End Sub
    Partial Private Sub OnIDUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdSupplier", DbType:="Int")>  _
	Public Property IdSupplier() As System.Nullable(Of Integer)
		Get
			Return Me._IdSupplier
		End Get
		Set
			If (Me._IdSupplier.Equals(value) = false) Then
				Me.OnIdSupplierChanging(value)
				Me.SendPropertyChanging
				Me._IdSupplier = value
				Me.SendPropertyChanged("IdSupplier")
				Me.OnIdSupplierChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractNumber", DbType:="VarChar(50)")>  _
	Public Property ContractNumber() As String
		Get
			Return Me._ContractNumber
		End Get
		Set
			If (String.Equals(Me._ContractNumber, value) = false) Then
				Me.OnContractNumberChanging(value)
				Me.SendPropertyChanging
				Me._ContractNumber = value
				Me.SendPropertyChanged("ContractNumber")
				Me.OnContractNumberChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractStartDate", DbType:="DateTime")>  _
	Public Property ContractStartDate() As System.Nullable(Of Date)
		Get
			Return Me._ContractStartDate
		End Get
		Set
			If (Me._ContractStartDate.Equals(value) = false) Then
				Me.OnContractStartDateChanging(value)
				Me.SendPropertyChanging
				Me._ContractStartDate = value
				Me.SendPropertyChanged("ContractStartDate")
				Me.OnContractStartDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractEndDate", DbType:="DateTime")>  _
	Public Property ContractEndDate() As System.Nullable(Of Date)
		Get
			Return Me._ContractEndDate
		End Get
		Set
			If (Me._ContractEndDate.Equals(value) = false) Then
				Me.OnContractEndDateChanging(value)
				Me.SendPropertyChanging
				Me._ContractEndDate = value
				Me.SendPropertyChanged("ContractEndDate")
				Me.OnContractEndDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractSubject", DbType:="VarChar(255)")>  _
	Public Property ContractSubject() As String
		Get
			Return Me._ContractSubject
		End Get
		Set
			If (String.Equals(Me._ContractSubject, value) = false) Then
				Me.OnContractSubjectChanging(value)
				Me.SendPropertyChanging
				Me._ContractSubject = value
				Me.SendPropertyChanged("ContractSubject")
				Me.OnContractSubjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractValue", DbType:="Decimal(17,2)")>  _
	Public Property ContractValue() As System.Nullable(Of Decimal)
		Get
			Return Me._ContractValue
		End Get
		Set
			If (Me._ContractValue.Equals(value) = false) Then
				Me.OnContractValueChanging(value)
				Me.SendPropertyChanging
				Me._ContractValue = value
				Me.SendPropertyChanged("ContractValue")
				Me.OnContractValueChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IDUser", DbType:="Int NOT NULL")>  _
	Public Property IDUser() As Integer
		Get
			Return Me._IDUser
		End Get
		Set
			If ((Me._IDUser = value)  _
						= false) Then
				Me.OnIDUserChanging(value)
				Me.SendPropertyChanging
				Me._IDUser = value
				Me.SendPropertyChanged("IDUser")
				Me.OnIDUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.SupplierQualification")>  _
Partial Public Class SupplierQualification
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdSupplierEvaluation As System.Nullable(Of Integer)
	
	Private _ContractSubject As System.Nullable(Of Integer)
	
	Private _ContractualObligations As System.Nullable(Of Integer)
	
	Private _DefinedGoals As System.Nullable(Of Integer)
	
	Private _AgreedDeadlines As System.Nullable(Of Integer)
	
	Private _TotalityDeliveredProducts As System.Nullable(Of Integer)
	
	Private _RequestsMadeByFSC As System.Nullable(Of Integer)
	
	Private _DeliveryProductsServices As System.Nullable(Of Integer)
	
	Private _Reporting As System.Nullable(Of Integer)
	
	Private _ProductQuality As System.Nullable(Of Integer)
	
	Private _ReportsQuality As System.Nullable(Of Integer)
	
	Private _AccompanimentQuality As System.Nullable(Of Integer)
	
	Private _AttentionComplaintsClaims As System.Nullable(Of Integer)
	
	Private _ReturnedProducts As System.Nullable(Of Integer)
	
	Private _ProductValueAdded As System.Nullable(Of Integer)
	
	Private _AccompanimentValueAdded As System.Nullable(Of Integer)
	
	Private _ReportsValueAdded As System.Nullable(Of Integer)
	
	Private _ProjectPlaneacion As System.Nullable(Of Integer)
	
	Private _MethodologyImplemented As System.Nullable(Of Integer)
	
	Private _DevelopmentProjectOrganization As System.Nullable(Of Integer)
	
	Private _JointActivities As System.Nullable(Of Integer)
	
	Private _ProjectControl As System.Nullable(Of Integer)
	
	Private _ServiceStaffCompetence As System.Nullable(Of Integer)
	
	Private _SupplierCompetence As System.Nullable(Of Integer)
	
	Private _InformationConfidentiality As System.Nullable(Of Integer)
	
	Private _CompliancePercentage As System.Nullable(Of Decimal)
	
	Private _OpportunityPercentage As System.Nullable(Of Decimal)
	
	Private _QualityPercentage As System.Nullable(Of Decimal)
	
	Private _AddedValuePercentage As System.Nullable(Of Decimal)
	
	Private _MethodologyPercentage As System.Nullable(Of Decimal)
	
	Private _ServiceStaffCompetencePercentage As System.Nullable(Of Decimal)
	
	Private _ConfidentialityPercentage As System.Nullable(Of Decimal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdSupplierEvaluationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdSupplierEvaluationChanged()
    End Sub
    Partial Private Sub OnContractSubjectChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContractSubjectChanged()
    End Sub
    Partial Private Sub OnContractualObligationsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContractualObligationsChanged()
    End Sub
    Partial Private Sub OnDefinedGoalsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDefinedGoalsChanged()
    End Sub
    Partial Private Sub OnAgreedDeadlinesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAgreedDeadlinesChanged()
    End Sub
    Partial Private Sub OnTotalityDeliveredProductsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalityDeliveredProductsChanged()
    End Sub
    Partial Private Sub OnRequestsMadeByFSCChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnRequestsMadeByFSCChanged()
    End Sub
    Partial Private Sub OnDeliveryProductsServicesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDeliveryProductsServicesChanged()
    End Sub
    Partial Private Sub OnReportingChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReportingChanged()
    End Sub
    Partial Private Sub OnProductQualityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductQualityChanged()
    End Sub
    Partial Private Sub OnReportsQualityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReportsQualityChanged()
    End Sub
    Partial Private Sub OnAccompanimentQualityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAccompanimentQualityChanged()
    End Sub
    Partial Private Sub OnAttentionComplaintsClaimsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAttentionComplaintsClaimsChanged()
    End Sub
    Partial Private Sub OnReturnedProductsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReturnedProductsChanged()
    End Sub
    Partial Private Sub OnProductValueAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProductValueAddedChanged()
    End Sub
    Partial Private Sub OnAccompanimentValueAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnAccompanimentValueAddedChanged()
    End Sub
    Partial Private Sub OnReportsValueAddedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnReportsValueAddedChanged()
    End Sub
    Partial Private Sub OnProjectPlaneacionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProjectPlaneacionChanged()
    End Sub
    Partial Private Sub OnMethodologyImplementedChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMethodologyImplementedChanged()
    End Sub
    Partial Private Sub OnDevelopmentProjectOrganizationChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDevelopmentProjectOrganizationChanged()
    End Sub
    Partial Private Sub OnJointActivitiesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnJointActivitiesChanged()
    End Sub
    Partial Private Sub OnProjectControlChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnProjectControlChanged()
    End Sub
    Partial Private Sub OnServiceStaffCompetenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnServiceStaffCompetenceChanged()
    End Sub
    Partial Private Sub OnSupplierCompetenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSupplierCompetenceChanged()
    End Sub
    Partial Private Sub OnInformationConfidentialityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnInformationConfidentialityChanged()
    End Sub
    Partial Private Sub OnCompliancePercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCompliancePercentageChanged()
    End Sub
    Partial Private Sub OnOpportunityPercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOpportunityPercentageChanged()
    End Sub
    Partial Private Sub OnQualityPercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnQualityPercentageChanged()
    End Sub
    Partial Private Sub OnAddedValuePercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAddedValuePercentageChanged()
    End Sub
    Partial Private Sub OnMethodologyPercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMethodologyPercentageChanged()
    End Sub
    Partial Private Sub OnServiceStaffCompetencePercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnServiceStaffCompetencePercentageChanged()
    End Sub
    Partial Private Sub OnConfidentialityPercentageChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnConfidentialityPercentageChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdSupplierEvaluation", DbType:="Int")>  _
	Public Property IdSupplierEvaluation() As System.Nullable(Of Integer)
		Get
			Return Me._IdSupplierEvaluation
		End Get
		Set
			If (Me._IdSupplierEvaluation.Equals(value) = false) Then
				Me.OnIdSupplierEvaluationChanging(value)
				Me.SendPropertyChanging
				Me._IdSupplierEvaluation = value
				Me.SendPropertyChanged("IdSupplierEvaluation")
				Me.OnIdSupplierEvaluationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractSubject", DbType:="Int")>  _
	Public Property ContractSubject() As System.Nullable(Of Integer)
		Get
			Return Me._ContractSubject
		End Get
		Set
			If (Me._ContractSubject.Equals(value) = false) Then
				Me.OnContractSubjectChanging(value)
				Me.SendPropertyChanging
				Me._ContractSubject = value
				Me.SendPropertyChanged("ContractSubject")
				Me.OnContractSubjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ContractualObligations", DbType:="Int")>  _
	Public Property ContractualObligations() As System.Nullable(Of Integer)
		Get
			Return Me._ContractualObligations
		End Get
		Set
			If (Me._ContractualObligations.Equals(value) = false) Then
				Me.OnContractualObligationsChanging(value)
				Me.SendPropertyChanging
				Me._ContractualObligations = value
				Me.SendPropertyChanged("ContractualObligations")
				Me.OnContractualObligationsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DefinedGoals", DbType:="Int")>  _
	Public Property DefinedGoals() As System.Nullable(Of Integer)
		Get
			Return Me._DefinedGoals
		End Get
		Set
			If (Me._DefinedGoals.Equals(value) = false) Then
				Me.OnDefinedGoalsChanging(value)
				Me.SendPropertyChanging
				Me._DefinedGoals = value
				Me.SendPropertyChanged("DefinedGoals")
				Me.OnDefinedGoalsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AgreedDeadlines", DbType:="Int")>  _
	Public Property AgreedDeadlines() As System.Nullable(Of Integer)
		Get
			Return Me._AgreedDeadlines
		End Get
		Set
			If (Me._AgreedDeadlines.Equals(value) = false) Then
				Me.OnAgreedDeadlinesChanging(value)
				Me.SendPropertyChanging
				Me._AgreedDeadlines = value
				Me.SendPropertyChanged("AgreedDeadlines")
				Me.OnAgreedDeadlinesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalityDeliveredProducts", DbType:="Int")>  _
	Public Property TotalityDeliveredProducts() As System.Nullable(Of Integer)
		Get
			Return Me._TotalityDeliveredProducts
		End Get
		Set
			If (Me._TotalityDeliveredProducts.Equals(value) = false) Then
				Me.OnTotalityDeliveredProductsChanging(value)
				Me.SendPropertyChanging
				Me._TotalityDeliveredProducts = value
				Me.SendPropertyChanged("TotalityDeliveredProducts")
				Me.OnTotalityDeliveredProductsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequestsMadeByFSC", DbType:="Int")>  _
	Public Property RequestsMadeByFSC() As System.Nullable(Of Integer)
		Get
			Return Me._RequestsMadeByFSC
		End Get
		Set
			If (Me._RequestsMadeByFSC.Equals(value) = false) Then
				Me.OnRequestsMadeByFSCChanging(value)
				Me.SendPropertyChanging
				Me._RequestsMadeByFSC = value
				Me.SendPropertyChanged("RequestsMadeByFSC")
				Me.OnRequestsMadeByFSCChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DeliveryProductsServices", DbType:="Int")>  _
	Public Property DeliveryProductsServices() As System.Nullable(Of Integer)
		Get
			Return Me._DeliveryProductsServices
		End Get
		Set
			If (Me._DeliveryProductsServices.Equals(value) = false) Then
				Me.OnDeliveryProductsServicesChanging(value)
				Me.SendPropertyChanging
				Me._DeliveryProductsServices = value
				Me.SendPropertyChanged("DeliveryProductsServices")
				Me.OnDeliveryProductsServicesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Reporting", DbType:="Int")>  _
	Public Property Reporting() As System.Nullable(Of Integer)
		Get
			Return Me._Reporting
		End Get
		Set
			If (Me._Reporting.Equals(value) = false) Then
				Me.OnReportingChanging(value)
				Me.SendPropertyChanging
				Me._Reporting = value
				Me.SendPropertyChanged("Reporting")
				Me.OnReportingChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductQuality", DbType:="Int")>  _
	Public Property ProductQuality() As System.Nullable(Of Integer)
		Get
			Return Me._ProductQuality
		End Get
		Set
			If (Me._ProductQuality.Equals(value) = false) Then
				Me.OnProductQualityChanging(value)
				Me.SendPropertyChanging
				Me._ProductQuality = value
				Me.SendPropertyChanged("ProductQuality")
				Me.OnProductQualityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReportsQuality", DbType:="Int")>  _
	Public Property ReportsQuality() As System.Nullable(Of Integer)
		Get
			Return Me._ReportsQuality
		End Get
		Set
			If (Me._ReportsQuality.Equals(value) = false) Then
				Me.OnReportsQualityChanging(value)
				Me.SendPropertyChanging
				Me._ReportsQuality = value
				Me.SendPropertyChanged("ReportsQuality")
				Me.OnReportsQualityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AccompanimentQuality", DbType:="Int")>  _
	Public Property AccompanimentQuality() As System.Nullable(Of Integer)
		Get
			Return Me._AccompanimentQuality
		End Get
		Set
			If (Me._AccompanimentQuality.Equals(value) = false) Then
				Me.OnAccompanimentQualityChanging(value)
				Me.SendPropertyChanging
				Me._AccompanimentQuality = value
				Me.SendPropertyChanged("AccompanimentQuality")
				Me.OnAccompanimentQualityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AttentionComplaintsClaims", DbType:="Int")>  _
	Public Property AttentionComplaintsClaims() As System.Nullable(Of Integer)
		Get
			Return Me._AttentionComplaintsClaims
		End Get
		Set
			If (Me._AttentionComplaintsClaims.Equals(value) = false) Then
				Me.OnAttentionComplaintsClaimsChanging(value)
				Me.SendPropertyChanging
				Me._AttentionComplaintsClaims = value
				Me.SendPropertyChanged("AttentionComplaintsClaims")
				Me.OnAttentionComplaintsClaimsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReturnedProducts", DbType:="Int")>  _
	Public Property ReturnedProducts() As System.Nullable(Of Integer)
		Get
			Return Me._ReturnedProducts
		End Get
		Set
			If (Me._ReturnedProducts.Equals(value) = false) Then
				Me.OnReturnedProductsChanging(value)
				Me.SendPropertyChanging
				Me._ReturnedProducts = value
				Me.SendPropertyChanged("ReturnedProducts")
				Me.OnReturnedProductsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProductValueAdded", DbType:="Int")>  _
	Public Property ProductValueAdded() As System.Nullable(Of Integer)
		Get
			Return Me._ProductValueAdded
		End Get
		Set
			If (Me._ProductValueAdded.Equals(value) = false) Then
				Me.OnProductValueAddedChanging(value)
				Me.SendPropertyChanging
				Me._ProductValueAdded = value
				Me.SendPropertyChanged("ProductValueAdded")
				Me.OnProductValueAddedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AccompanimentValueAdded", DbType:="Int")>  _
	Public Property AccompanimentValueAdded() As System.Nullable(Of Integer)
		Get
			Return Me._AccompanimentValueAdded
		End Get
		Set
			If (Me._AccompanimentValueAdded.Equals(value) = false) Then
				Me.OnAccompanimentValueAddedChanging(value)
				Me.SendPropertyChanging
				Me._AccompanimentValueAdded = value
				Me.SendPropertyChanged("AccompanimentValueAdded")
				Me.OnAccompanimentValueAddedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ReportsValueAdded", DbType:="Int")>  _
	Public Property ReportsValueAdded() As System.Nullable(Of Integer)
		Get
			Return Me._ReportsValueAdded
		End Get
		Set
			If (Me._ReportsValueAdded.Equals(value) = false) Then
				Me.OnReportsValueAddedChanging(value)
				Me.SendPropertyChanging
				Me._ReportsValueAdded = value
				Me.SendPropertyChanged("ReportsValueAdded")
				Me.OnReportsValueAddedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProjectPlaneacion", DbType:="Int")>  _
	Public Property ProjectPlaneacion() As System.Nullable(Of Integer)
		Get
			Return Me._ProjectPlaneacion
		End Get
		Set
			If (Me._ProjectPlaneacion.Equals(value) = false) Then
				Me.OnProjectPlaneacionChanging(value)
				Me.SendPropertyChanging
				Me._ProjectPlaneacion = value
				Me.SendPropertyChanged("ProjectPlaneacion")
				Me.OnProjectPlaneacionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MethodologyImplemented", DbType:="Int")>  _
	Public Property MethodologyImplemented() As System.Nullable(Of Integer)
		Get
			Return Me._MethodologyImplemented
		End Get
		Set
			If (Me._MethodologyImplemented.Equals(value) = false) Then
				Me.OnMethodologyImplementedChanging(value)
				Me.SendPropertyChanging
				Me._MethodologyImplemented = value
				Me.SendPropertyChanged("MethodologyImplemented")
				Me.OnMethodologyImplementedChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_DevelopmentProjectOrganization", DbType:="Int")>  _
	Public Property DevelopmentProjectOrganization() As System.Nullable(Of Integer)
		Get
			Return Me._DevelopmentProjectOrganization
		End Get
		Set
			If (Me._DevelopmentProjectOrganization.Equals(value) = false) Then
				Me.OnDevelopmentProjectOrganizationChanging(value)
				Me.SendPropertyChanging
				Me._DevelopmentProjectOrganization = value
				Me.SendPropertyChanged("DevelopmentProjectOrganization")
				Me.OnDevelopmentProjectOrganizationChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_JointActivities", DbType:="Int")>  _
	Public Property JointActivities() As System.Nullable(Of Integer)
		Get
			Return Me._JointActivities
		End Get
		Set
			If (Me._JointActivities.Equals(value) = false) Then
				Me.OnJointActivitiesChanging(value)
				Me.SendPropertyChanging
				Me._JointActivities = value
				Me.SendPropertyChanged("JointActivities")
				Me.OnJointActivitiesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProjectControl", DbType:="Int")>  _
	Public Property ProjectControl() As System.Nullable(Of Integer)
		Get
			Return Me._ProjectControl
		End Get
		Set
			If (Me._ProjectControl.Equals(value) = false) Then
				Me.OnProjectControlChanging(value)
				Me.SendPropertyChanging
				Me._ProjectControl = value
				Me.SendPropertyChanged("ProjectControl")
				Me.OnProjectControlChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ServiceStaffCompetence", DbType:="Int")>  _
	Public Property ServiceStaffCompetence() As System.Nullable(Of Integer)
		Get
			Return Me._ServiceStaffCompetence
		End Get
		Set
			If (Me._ServiceStaffCompetence.Equals(value) = false) Then
				Me.OnServiceStaffCompetenceChanging(value)
				Me.SendPropertyChanging
				Me._ServiceStaffCompetence = value
				Me.SendPropertyChanged("ServiceStaffCompetence")
				Me.OnServiceStaffCompetenceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_SupplierCompetence", DbType:="Int")>  _
	Public Property SupplierCompetence() As System.Nullable(Of Integer)
		Get
			Return Me._SupplierCompetence
		End Get
		Set
			If (Me._SupplierCompetence.Equals(value) = false) Then
				Me.OnSupplierCompetenceChanging(value)
				Me.SendPropertyChanging
				Me._SupplierCompetence = value
				Me.SendPropertyChanged("SupplierCompetence")
				Me.OnSupplierCompetenceChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_InformationConfidentiality", DbType:="Int")>  _
	Public Property InformationConfidentiality() As System.Nullable(Of Integer)
		Get
			Return Me._InformationConfidentiality
		End Get
		Set
			If (Me._InformationConfidentiality.Equals(value) = false) Then
				Me.OnInformationConfidentialityChanging(value)
				Me.SendPropertyChanging
				Me._InformationConfidentiality = value
				Me.SendPropertyChanged("InformationConfidentiality")
				Me.OnInformationConfidentialityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CompliancePercentage", DbType:="Decimal(5,2)")>  _
	Public Property CompliancePercentage() As System.Nullable(Of Decimal)
		Get
			Return Me._CompliancePercentage
		End Get
		Set
			If (Me._CompliancePercentage.Equals(value) = false) Then
				Me.OnCompliancePercentageChanging(value)
				Me.SendPropertyChanging
				Me._CompliancePercentage = value
				Me.SendPropertyChanged("CompliancePercentage")
				Me.OnCompliancePercentageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_OpportunityPercentage", DbType:="Decimal(5,2)")>  _
	Public Property OpportunityPercentage() As System.Nullable(Of Decimal)
		Get
			Return Me._OpportunityPercentage
		End Get
		Set
			If (Me._OpportunityPercentage.Equals(value) = false) Then
				Me.OnOpportunityPercentageChanging(value)
				Me.SendPropertyChanging
				Me._OpportunityPercentage = value
				Me.SendPropertyChanged("OpportunityPercentage")
				Me.OnOpportunityPercentageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_QualityPercentage", DbType:="Decimal(5,2)")>  _
	Public Property QualityPercentage() As System.Nullable(Of Decimal)
		Get
			Return Me._QualityPercentage
		End Get
		Set
			If (Me._QualityPercentage.Equals(value) = false) Then
				Me.OnQualityPercentageChanging(value)
				Me.SendPropertyChanging
				Me._QualityPercentage = value
				Me.SendPropertyChanged("QualityPercentage")
				Me.OnQualityPercentageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_AddedValuePercentage", DbType:="Decimal(5,2)")>  _
	Public Property AddedValuePercentage() As System.Nullable(Of Decimal)
		Get
			Return Me._AddedValuePercentage
		End Get
		Set
			If (Me._AddedValuePercentage.Equals(value) = false) Then
				Me.OnAddedValuePercentageChanging(value)
				Me.SendPropertyChanging
				Me._AddedValuePercentage = value
				Me.SendPropertyChanged("AddedValuePercentage")
				Me.OnAddedValuePercentageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_MethodologyPercentage", DbType:="Decimal(5,2)")>  _
	Public Property MethodologyPercentage() As System.Nullable(Of Decimal)
		Get
			Return Me._MethodologyPercentage
		End Get
		Set
			If (Me._MethodologyPercentage.Equals(value) = false) Then
				Me.OnMethodologyPercentageChanging(value)
				Me.SendPropertyChanging
				Me._MethodologyPercentage = value
				Me.SendPropertyChanged("MethodologyPercentage")
				Me.OnMethodologyPercentageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ServiceStaffCompetencePercentage", DbType:="Decimal(5,2)")>  _
	Public Property ServiceStaffCompetencePercentage() As System.Nullable(Of Decimal)
		Get
			Return Me._ServiceStaffCompetencePercentage
		End Get
		Set
			If (Me._ServiceStaffCompetencePercentage.Equals(value) = false) Then
				Me.OnServiceStaffCompetencePercentageChanging(value)
				Me.SendPropertyChanging
				Me._ServiceStaffCompetencePercentage = value
				Me.SendPropertyChanged("ServiceStaffCompetencePercentage")
				Me.OnServiceStaffCompetencePercentageChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ConfidentialityPercentage", DbType:="Decimal(5,2)")>  _
	Public Property ConfidentialityPercentage() As System.Nullable(Of Decimal)
		Get
			Return Me._ConfidentialityPercentage
		End Get
		Set
			If (Me._ConfidentialityPercentage.Equals(value) = false) Then
				Me.OnConfidentialityPercentageChanging(value)
				Me.SendPropertyChanging
				Me._ConfidentialityPercentage = value
				Me.SendPropertyChanged("ConfidentialityPercentage")
				Me.OnConfidentialityPercentageChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.TEMP_BORRAR_DEF")>  _
Partial Public Class TEMP_BORRAR_DEF
	
	Private _id As Integer
	
	Private _idproyect As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_idproyect", DbType:="Int")>  _
	Public Property idproyect() As System.Nullable(Of Integer)
		Get
			Return Me._idproyect
		End Get
		Set
			If (Me._idproyect.Equals(value) = false) Then
				Me._idproyect = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.TEMP_DEPURADOR")>  _
Partial Public Class TEMP_DEPURADOR
	
	Private _id As Integer
	
	Private _idproyect As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_idproyect", DbType:="Int")>  _
	Public Property idproyect() As System.Nullable(Of Integer)
		Get
			Return Me._idproyect
		End Get
		Set
			If (Me._idproyect.Equals(value) = false) Then
				Me._idproyect = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.TemporaryActivities")>  _
Partial Public Class TemporaryActivities
	
	Private _Cod_project As String
	
	Private _Cod_activity As String
	
	Private _Activity As String
	
	Private _Cod_subactivity As String
	
	Private _subactivity As String
	
	Private _Subactivity_previous As String
	
	Private _Nit_Actors As String
	
	Private _Actors As String
	
	Private _responsible As String
	
	Private _Star_date As System.Nullable(Of Date)
	
	Private _End_date As System.Nullable(Of Date)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Cod_project", DbType:="VarChar(MAX)")>  _
	Public Property Cod_project() As String
		Get
			Return Me._Cod_project
		End Get
		Set
			If (String.Equals(Me._Cod_project, value) = false) Then
				Me._Cod_project = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Cod_activity", DbType:="VarChar(MAX)")>  _
	Public Property Cod_activity() As String
		Get
			Return Me._Cod_activity
		End Get
		Set
			If (String.Equals(Me._Cod_activity, value) = false) Then
				Me._Cod_activity = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Activity", DbType:="VarChar(MAX)")>  _
	Public Property Activity() As String
		Get
			Return Me._Activity
		End Get
		Set
			If (String.Equals(Me._Activity, value) = false) Then
				Me._Activity = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Cod_subactivity", DbType:="VarChar(MAX)")>  _
	Public Property Cod_subactivity() As String
		Get
			Return Me._Cod_subactivity
		End Get
		Set
			If (String.Equals(Me._Cod_subactivity, value) = false) Then
				Me._Cod_subactivity = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_subactivity", DbType:="VarChar(MAX)")>  _
	Public Property subactivity() As String
		Get
			Return Me._subactivity
		End Get
		Set
			If (String.Equals(Me._subactivity, value) = false) Then
				Me._subactivity = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Subactivity_previous", DbType:="VarChar(50)")>  _
	Public Property Subactivity_previous() As String
		Get
			Return Me._Subactivity_previous
		End Get
		Set
			If (String.Equals(Me._Subactivity_previous, value) = false) Then
				Me._Subactivity_previous = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Nit_Actors", DbType:="VarChar(MAX)")>  _
	Public Property Nit_Actors() As String
		Get
			Return Me._Nit_Actors
		End Get
		Set
			If (String.Equals(Me._Nit_Actors, value) = false) Then
				Me._Nit_Actors = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Actors", DbType:="VarChar(MAX)")>  _
	Public Property Actors() As String
		Get
			Return Me._Actors
		End Get
		Set
			If (String.Equals(Me._Actors, value) = false) Then
				Me._Actors = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_responsible", DbType:="VarChar(MAX)")>  _
	Public Property responsible() As String
		Get
			Return Me._responsible
		End Get
		Set
			If (String.Equals(Me._responsible, value) = false) Then
				Me._responsible = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Star_date", DbType:="DateTime")>  _
	Public Property Star_date() As System.Nullable(Of Date)
		Get
			Return Me._Star_date
		End Get
		Set
			If (Me._Star_date.Equals(value) = false) Then
				Me._Star_date = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_End_date", DbType:="DateTime")>  _
	Public Property End_date() As System.Nullable(Of Date)
		Get
			Return Me._End_date
		End Get
		Set
			If (Me._End_date.Equals(value) = false) Then
				Me._End_date = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.Testimony")>  _
Partial Public Class Testimony
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdExecution As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _Age As String
	
	Private _Sex As String
	
	Private _Phone As String
	
	Private _IdCity As System.Nullable(Of Integer)
	
	Private _Description As String
	
	Private _Email As String
	
	Private _ProjectRole As String
	
	Private _Execution As EntityRef(Of Execution)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdExecutionChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdExecutionChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As String)
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnSexChanging(value As String)
    End Sub
    Partial Private Sub OnSexChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnIdCityChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdCityChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnProjectRoleChanging(value As String)
    End Sub
    Partial Private Sub OnProjectRoleChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Execution = CType(Nothing, EntityRef(Of Execution))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdExecution", DbType:="Int")>  _
	Public Property IdExecution() As System.Nullable(Of Integer)
		Get
			Return Me._IdExecution
		End Get
		Set
			If (Me._IdExecution.Equals(value) = false) Then
				If Me._Execution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdExecutionChanging(value)
				Me.SendPropertyChanging
				Me._IdExecution = value
				Me.SendPropertyChanged("IdExecution")
				Me.OnIdExecutionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="NVarChar(100)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Age", DbType:="NVarChar(50)")>  _
	Public Property Age() As String
		Get
			Return Me._Age
		End Get
		Set
			If (String.Equals(Me._Age, value) = false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Sex", DbType:="NVarChar(50)")>  _
	Public Property Sex() As String
		Get
			Return Me._Sex
		End Get
		Set
			If (String.Equals(Me._Sex, value) = false) Then
				Me.OnSexChanging(value)
				Me.SendPropertyChanging
				Me._Sex = value
				Me.SendPropertyChanged("Sex")
				Me.OnSexChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdCity", DbType:="Int")>  _
	Public Property IdCity() As System.Nullable(Of Integer)
		Get
			Return Me._IdCity
		End Get
		Set
			If (Me._IdCity.Equals(value) = false) Then
				Me.OnIdCityChanging(value)
				Me.SendPropertyChanging
				Me._IdCity = value
				Me.SendPropertyChanged("IdCity")
				Me.OnIdCityChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="NVarChar(255)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Email", DbType:="NVarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_ProjectRole", DbType:="NVarChar(100)")>  _
	Public Property ProjectRole() As String
		Get
			Return Me._ProjectRole
		End Get
		Set
			If (String.Equals(Me._ProjectRole, value) = false) Then
				Me.OnProjectRoleChanging(value)
				Me.SendPropertyChanging
				Me._ProjectRole = value
				Me.SendPropertyChanged("ProjectRole")
				Me.OnProjectRoleChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Execution_Testimony", Storage:="_Execution", ThisKey:="IdExecution", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Execution() As Execution
		Get
			Return Me._Execution.Entity
		End Get
		Set
			Dim previousValue As Execution = Me._Execution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Execution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Execution.Entity = Nothing
					previousValue.Testimony.Remove(Me)
				End If
				Me._Execution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Testimony.Add(Me)
					Me._IdExecution = value.Id
				Else
					Me._IdExecution = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Execution")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.Third")>  _
Partial Public Class Third
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Code As String
	
	Private _Name As String
	
	Private _contact As String
	
	Private _documents As String
	
	Private _phone As String
	
	Private _email As String
	
	Private _Actions As String
	
	Private _Experiences As String
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _PersonaNatural As System.Nullable(Of Boolean)
	
	Private _RepresentanteLegal As String
	
	Private _SubactivityByThird As EntitySet(Of SubactivityByThird)
	
	Private _ThirdByIdea As EntitySet(Of ThirdByIdea)
	
	Private _ThirdByProject As EntitySet(Of ThirdByProject)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OncontactChanging(value As String)
    End Sub
    Partial Private Sub OncontactChanged()
    End Sub
    Partial Private Sub OndocumentsChanging(value As String)
    End Sub
    Partial Private Sub OndocumentsChanged()
    End Sub
    Partial Private Sub OnphoneChanging(value As String)
    End Sub
    Partial Private Sub OnphoneChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OnActionsChanging(value As String)
    End Sub
    Partial Private Sub OnActionsChanged()
    End Sub
    Partial Private Sub OnExperiencesChanging(value As String)
    End Sub
    Partial Private Sub OnExperiencesChanged()
    End Sub
    Partial Private Sub OnEnabledChanging(value As Boolean)
    End Sub
    Partial Private Sub OnEnabledChanged()
    End Sub
    Partial Private Sub OnIdUserChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUserChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnPersonaNaturalChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPersonaNaturalChanged()
    End Sub
    Partial Private Sub OnRepresentanteLegalChanging(value As String)
    End Sub
    Partial Private Sub OnRepresentanteLegalChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SubactivityByThird = New EntitySet(Of SubactivityByThird)(AddressOf Me.attach_SubactivityByThird, AddressOf Me.detach_SubactivityByThird)
		Me._ThirdByIdea = New EntitySet(Of ThirdByIdea)(AddressOf Me.attach_ThirdByIdea, AddressOf Me.detach_ThirdByIdea)
		Me._ThirdByProject = New EntitySet(Of ThirdByProject)(AddressOf Me.attach_ThirdByProject, AddressOf Me.detach_ThirdByProject)
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Code", DbType:="VarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(255)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_contact", DbType:="VarChar(255)")>  _
	Public Property contact() As String
		Get
			Return Me._contact
		End Get
		Set
			If (String.Equals(Me._contact, value) = false) Then
				Me.OncontactChanging(value)
				Me.SendPropertyChanging
				Me._contact = value
				Me.SendPropertyChanged("contact")
				Me.OncontactChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_documents", DbType:="VarChar(50)")>  _
	Public Property documents() As String
		Get
			Return Me._documents
		End Get
		Set
			If (String.Equals(Me._documents, value) = false) Then
				Me.OndocumentsChanging(value)
				Me.SendPropertyChanging
				Me._documents = value
				Me.SendPropertyChanged("documents")
				Me.OndocumentsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_phone", DbType:="VarChar(50)")>  _
	Public Property phone() As String
		Get
			Return Me._phone
		End Get
		Set
			If (String.Equals(Me._phone, value) = false) Then
				Me.OnphoneChanging(value)
				Me.SendPropertyChanging
				Me._phone = value
				Me.SendPropertyChanged("phone")
				Me.OnphoneChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_email", DbType:="VarChar(500)")>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Actions", DbType:="VarChar(MAX)")>  _
	Public Property Actions() As String
		Get
			Return Me._Actions
		End Get
		Set
			If (String.Equals(Me._Actions, value) = false) Then
				Me.OnActionsChanging(value)
				Me.SendPropertyChanging
				Me._Actions = value
				Me.SendPropertyChanged("Actions")
				Me.OnActionsChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Experiences", DbType:="VarChar(MAX)")>  _
	Public Property Experiences() As String
		Get
			Return Me._Experiences
		End Get
		Set
			If (String.Equals(Me._Experiences, value) = false) Then
				Me.OnExperiencesChanging(value)
				Me.SendPropertyChanging
				Me._Experiences = value
				Me.SendPropertyChanged("Experiences")
				Me.OnExperiencesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me.OnEnabledChanging(value)
				Me.SendPropertyChanging
				Me._Enabled = value
				Me.SendPropertyChanged("Enabled")
				Me.OnEnabledChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me.OnIdUserChanging(value)
				Me.SendPropertyChanging
				Me._IdUser = value
				Me.SendPropertyChanged("IdUser")
				Me.OnIdUserChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_PersonaNatural", DbType:="Bit")>  _
	Public Property PersonaNatural() As System.Nullable(Of Boolean)
		Get
			Return Me._PersonaNatural
		End Get
		Set
			If (Me._PersonaNatural.Equals(value) = false) Then
				Me.OnPersonaNaturalChanging(value)
				Me.SendPropertyChanging
				Me._PersonaNatural = value
				Me.SendPropertyChanged("PersonaNatural")
				Me.OnPersonaNaturalChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_RepresentanteLegal", DbType:="VarChar(255)")>  _
	Public Property RepresentanteLegal() As String
		Get
			Return Me._RepresentanteLegal
		End Get
		Set
			If (String.Equals(Me._RepresentanteLegal, value) = false) Then
				Me.OnRepresentanteLegalChanging(value)
				Me.SendPropertyChanging
				Me._RepresentanteLegal = value
				Me.SendPropertyChanged("RepresentanteLegal")
				Me.OnRepresentanteLegalChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Third_SubactivityByThird", Storage:="_SubactivityByThird", ThisKey:="Id", OtherKey:="IdThird")>  _
	Public Property SubactivityByThird() As EntitySet(Of SubactivityByThird)
		Get
			Return Me._SubactivityByThird
		End Get
		Set
			Me._SubactivityByThird.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Third_ThirdByIdea", Storage:="_ThirdByIdea", ThisKey:="Id", OtherKey:="IdThird")>  _
	Public Property ThirdByIdea() As EntitySet(Of ThirdByIdea)
		Get
			Return Me._ThirdByIdea
		End Get
		Set
			Me._ThirdByIdea.Assign(value)
		End Set
	End Property
	
	<Association(Name:="Third_ThirdByProject", Storage:="_ThirdByProject", ThisKey:="Id", OtherKey:="IdThird")>  _
	Public Property ThirdByProject() As EntitySet(Of ThirdByProject)
		Get
			Return Me._ThirdByProject
		End Get
		Set
			Me._ThirdByProject.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SubactivityByThird(ByVal entity As SubactivityByThird)
		Me.SendPropertyChanging
		entity.Third = Me
	End Sub
	
	Private Sub detach_SubactivityByThird(ByVal entity As SubactivityByThird)
		Me.SendPropertyChanging
		entity.Third = Nothing
	End Sub
	
	Private Sub attach_ThirdByIdea(ByVal entity As ThirdByIdea)
		Me.SendPropertyChanging
		entity.Third = Me
	End Sub
	
	Private Sub detach_ThirdByIdea(ByVal entity As ThirdByIdea)
		Me.SendPropertyChanging
		entity.Third = Nothing
	End Sub
	
	Private Sub attach_ThirdByProject(ByVal entity As ThirdByProject)
		Me.SendPropertyChanging
		entity.Third = Me
	End Sub
	
	Private Sub detach_ThirdByProject(ByVal entity As ThirdByProject)
		Me.SendPropertyChanging
		entity.Third = Nothing
	End Sub
End Class

<Table(Name:="dbo.ThirdByIdea")>  _
Partial Public Class ThirdByIdea
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdIdea As System.Nullable(Of Integer)
	
	Private _IdThird As System.Nullable(Of Integer)
	
	Private _Type As String
	
	Private _Vrmoney As String
	
	Private _VrSpecies As String
	
	Private _FSCorCounterpartContribution As String
	
	Private _Idea As EntityRef(Of Idea)
	
	Private _Third As EntityRef(Of Third)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdIdeaChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdIdeaChanged()
    End Sub
    Partial Private Sub OnIdThirdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdThirdChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnVrmoneyChanging(value As String)
    End Sub
    Partial Private Sub OnVrmoneyChanged()
    End Sub
    Partial Private Sub OnVrSpeciesChanging(value As String)
    End Sub
    Partial Private Sub OnVrSpeciesChanged()
    End Sub
    Partial Private Sub OnFSCorCounterpartContributionChanging(value As String)
    End Sub
    Partial Private Sub OnFSCorCounterpartContributionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Idea = CType(Nothing, EntityRef(Of Idea))
		Me._Third = CType(Nothing, EntityRef(Of Third))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdIdea", DbType:="Int")>  _
	Public Property IdIdea() As System.Nullable(Of Integer)
		Get
			Return Me._IdIdea
		End Get
		Set
			If (Me._IdIdea.Equals(value) = false) Then
				If Me._Idea.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdIdeaChanging(value)
				Me.SendPropertyChanging
				Me._IdIdea = value
				Me.SendPropertyChanged("IdIdea")
				Me.OnIdIdeaChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdThird", DbType:="Int")>  _
	Public Property IdThird() As System.Nullable(Of Integer)
		Get
			Return Me._IdThird
		End Get
		Set
			If (Me._IdThird.Equals(value) = false) Then
				If Me._Third.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdThirdChanging(value)
				Me.SendPropertyChanging
				Me._IdThird = value
				Me.SendPropertyChanged("IdThird")
				Me.OnIdThirdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Type", DbType:="NVarChar(250)")>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Vrmoney", DbType:="VarChar(50)")>  _
	Public Property Vrmoney() As String
		Get
			Return Me._Vrmoney
		End Get
		Set
			If (String.Equals(Me._Vrmoney, value) = false) Then
				Me.OnVrmoneyChanging(value)
				Me.SendPropertyChanging
				Me._Vrmoney = value
				Me.SendPropertyChanged("Vrmoney")
				Me.OnVrmoneyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VrSpecies", DbType:="VarChar(50)")>  _
	Public Property VrSpecies() As String
		Get
			Return Me._VrSpecies
		End Get
		Set
			If (String.Equals(Me._VrSpecies, value) = false) Then
				Me.OnVrSpeciesChanging(value)
				Me.SendPropertyChanging
				Me._VrSpecies = value
				Me.SendPropertyChanged("VrSpecies")
				Me.OnVrSpeciesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FSCorCounterpartContribution", DbType:="VarChar(50)")>  _
	Public Property FSCorCounterpartContribution() As String
		Get
			Return Me._FSCorCounterpartContribution
		End Get
		Set
			If (String.Equals(Me._FSCorCounterpartContribution, value) = false) Then
				Me.OnFSCorCounterpartContributionChanging(value)
				Me.SendPropertyChanging
				Me._FSCorCounterpartContribution = value
				Me.SendPropertyChanged("FSCorCounterpartContribution")
				Me.OnFSCorCounterpartContributionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Idea_ThirdByIdea", Storage:="_Idea", ThisKey:="IdIdea", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Idea() As Idea
		Get
			Return Me._Idea.Entity
		End Get
		Set
			Dim previousValue As Idea = Me._Idea.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Idea.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Idea.Entity = Nothing
					previousValue.ThirdByIdea.Remove(Me)
				End If
				Me._Idea.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ThirdByIdea.Add(Me)
					Me._IdIdea = value.Id
				Else
					Me._IdIdea = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Idea")
			End If
		End Set
	End Property
	
	<Association(Name:="Third_ThirdByIdea", Storage:="_Third", ThisKey:="IdThird", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Third() As Third
		Get
			Return Me._Third.Entity
		End Get
		Set
			Dim previousValue As Third = Me._Third.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Third.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Third.Entity = Nothing
					previousValue.ThirdByIdea.Remove(Me)
				End If
				Me._Third.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ThirdByIdea.Add(Me)
					Me._IdThird = value.Id
				Else
					Me._IdThird = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Third")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.ThirdByProject")>  _
Partial Public Class ThirdByProject
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdProject As Integer
	
	Private _IdThird As System.Nullable(Of Integer)
	
	Private _Type As String
	
	Private _Vrmoney As String
	
	Private _VrSpecies As String
	
	Private _FSCorCounterpartContribution As String
	
	Private _Project As EntityRef(Of Project)
	
	Private _Third As EntityRef(Of Third)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdProjectChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdProjectChanged()
    End Sub
    Partial Private Sub OnIdThirdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdThirdChanged()
    End Sub
    Partial Private Sub OnTypeChanging(value As String)
    End Sub
    Partial Private Sub OnTypeChanged()
    End Sub
    Partial Private Sub OnVrmoneyChanging(value As String)
    End Sub
    Partial Private Sub OnVrmoneyChanged()
    End Sub
    Partial Private Sub OnVrSpeciesChanging(value As String)
    End Sub
    Partial Private Sub OnVrSpeciesChanged()
    End Sub
    Partial Private Sub OnFSCorCounterpartContributionChanging(value As String)
    End Sub
    Partial Private Sub OnFSCorCounterpartContributionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Project = CType(Nothing, EntityRef(Of Project))
		Me._Third = CType(Nothing, EntityRef(Of Third))
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdProject", DbType:="Int NOT NULL")>  _
	Public Property IdProject() As Integer
		Get
			Return Me._IdProject
		End Get
		Set
			If ((Me._IdProject = value)  _
						= false) Then
				If Me._Project.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdProjectChanging(value)
				Me.SendPropertyChanging
				Me._IdProject = value
				Me.SendPropertyChanged("IdProject")
				Me.OnIdProjectChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdThird", DbType:="Int")>  _
	Public Property IdThird() As System.Nullable(Of Integer)
		Get
			Return Me._IdThird
		End Get
		Set
			If (Me._IdThird.Equals(value) = false) Then
				If Me._Third.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException
				End If
				Me.OnIdThirdChanging(value)
				Me.SendPropertyChanging
				Me._IdThird = value
				Me.SendPropertyChanged("IdThird")
				Me.OnIdThirdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Type", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Type() As String
		Get
			Return Me._Type
		End Get
		Set
			If (String.Equals(Me._Type, value) = false) Then
				Me.OnTypeChanging(value)
				Me.SendPropertyChanging
				Me._Type = value
				Me.SendPropertyChanged("Type")
				Me.OnTypeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Vrmoney", DbType:="VarChar(50)")>  _
	Public Property Vrmoney() As String
		Get
			Return Me._Vrmoney
		End Get
		Set
			If (String.Equals(Me._Vrmoney, value) = false) Then
				Me.OnVrmoneyChanging(value)
				Me.SendPropertyChanging
				Me._Vrmoney = value
				Me.SendPropertyChanged("Vrmoney")
				Me.OnVrmoneyChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_VrSpecies", DbType:="VarChar(50)")>  _
	Public Property VrSpecies() As String
		Get
			Return Me._VrSpecies
		End Get
		Set
			If (String.Equals(Me._VrSpecies, value) = false) Then
				Me.OnVrSpeciesChanging(value)
				Me.SendPropertyChanging
				Me._VrSpecies = value
				Me.SendPropertyChanged("VrSpecies")
				Me.OnVrSpeciesChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_FSCorCounterpartContribution", DbType:="VarChar(50)")>  _
	Public Property FSCorCounterpartContribution() As String
		Get
			Return Me._FSCorCounterpartContribution
		End Get
		Set
			If (String.Equals(Me._FSCorCounterpartContribution, value) = false) Then
				Me.OnFSCorCounterpartContributionChanging(value)
				Me.SendPropertyChanging
				Me._FSCorCounterpartContribution = value
				Me.SendPropertyChanged("FSCorCounterpartContribution")
				Me.OnFSCorCounterpartContributionChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Project_ThirdByProject", Storage:="_Project", ThisKey:="IdProject", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Project() As Project
		Get
			Return Me._Project.Entity
		End Get
		Set
			Dim previousValue As Project = Me._Project.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Project.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Project.Entity = Nothing
					previousValue.ThirdByProject.Remove(Me)
				End If
				Me._Project.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ThirdByProject.Add(Me)
					Me._IdProject = value.Id
				Else
					Me._IdProject = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Project")
			End If
		End Set
	End Property
	
	<Association(Name:="Third_ThirdByProject", Storage:="_Third", ThisKey:="IdThird", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Third() As Third
		Get
			Return Me._Third.Entity
		End Get
		Set
			Dim previousValue As Third = Me._Third.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Third.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Third.Entity = Nothing
					previousValue.ThirdByProject.Remove(Me)
				End If
				Me._Third.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ThirdByProject.Add(Me)
					Me._IdThird = value.Id
				Else
					Me._IdThird = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Third")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.TmpSubActivity")>  _
Partial Public Class TmpSubActivity
	
	Private _Id As Integer
	
	Private _IdActivity As Integer
	
	Private _Type As Integer
	
	Private _Number As String
	
	Private _Name As String
	
	Private _Description As String
	
	Private _IdResponsible As Integer
	
	Private _BeginDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _TotalCost As System.Nullable(Of Decimal)
	
	Private _Duration As Integer
	
	Private _FSCContribution As System.Nullable(Of Decimal)
	
	Private _OFContribution As System.Nullable(Of Decimal)
	
	Private _Attachment As String
	
	Private _CriticalPath As System.Nullable(Of Boolean)
	
	Private _RequiresApproval As System.Nullable(Of Boolean)
	
	Private _Enabled As Boolean
	
	Private _IdUser As Integer
	
	Private _CreateDate As Date
	
	Private _idKey As System.Nullable(Of Integer)
	
	Private _isLastVersion As System.Nullable(Of Boolean)
	
	Private _IdPhase As System.Nullable(Of Integer)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdActivity", DbType:="Int NOT NULL")>  _
	Public Property IdActivity() As Integer
		Get
			Return Me._IdActivity
		End Get
		Set
			If ((Me._IdActivity = value)  _
						= false) Then
				Me._IdActivity = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Type", DbType:="Int NOT NULL")>  _
	Public Property Type() As Integer
		Get
			Return Me._Type
		End Get
		Set
			If ((Me._Type = value)  _
						= false) Then
				Me._Type = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Number", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Number() As String
		Get
			Return Me._Number
		End Get
		Set
			If (String.Equals(Me._Number, value) = false) Then
				Me._Number = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Description", DbType:="VarChar(500)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdResponsible", DbType:="Int NOT NULL")>  _
	Public Property IdResponsible() As Integer
		Get
			Return Me._IdResponsible
		End Get
		Set
			If ((Me._IdResponsible = value)  _
						= false) Then
				Me._IdResponsible = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_BeginDate", DbType:="DateTime")>  _
	Public Property BeginDate() As System.Nullable(Of Date)
		Get
			Return Me._BeginDate
		End Get
		Set
			If (Me._BeginDate.Equals(value) = false) Then
				Me._BeginDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me._EndDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_TotalCost", DbType:="Decimal(18,3)")>  _
	Public Property TotalCost() As System.Nullable(Of Decimal)
		Get
			Return Me._TotalCost
		End Get
		Set
			If (Me._TotalCost.Equals(value) = false) Then
				Me._TotalCost = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Duration", DbType:="Int NOT NULL")>  _
	Public Property Duration() As Integer
		Get
			Return Me._Duration
		End Get
		Set
			If ((Me._Duration = value)  _
						= false) Then
				Me._Duration = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_FSCContribution", DbType:="Decimal(18,3)")>  _
	Public Property FSCContribution() As System.Nullable(Of Decimal)
		Get
			Return Me._FSCContribution
		End Get
		Set
			If (Me._FSCContribution.Equals(value) = false) Then
				Me._FSCContribution = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_OFContribution", DbType:="Decimal(18,3)")>  _
	Public Property OFContribution() As System.Nullable(Of Decimal)
		Get
			Return Me._OFContribution
		End Get
		Set
			If (Me._OFContribution.Equals(value) = false) Then
				Me._OFContribution = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Attachment", DbType:="VarChar(255)")>  _
	Public Property Attachment() As String
		Get
			Return Me._Attachment
		End Get
		Set
			If (String.Equals(Me._Attachment, value) = false) Then
				Me._Attachment = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_CriticalPath", DbType:="Bit")>  _
	Public Property CriticalPath() As System.Nullable(Of Boolean)
		Get
			Return Me._CriticalPath
		End Get
		Set
			If (Me._CriticalPath.Equals(value) = false) Then
				Me._CriticalPath = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_RequiresApproval", DbType:="Bit")>  _
	Public Property RequiresApproval() As System.Nullable(Of Boolean)
		Get
			Return Me._RequiresApproval
		End Get
		Set
			If (Me._RequiresApproval.Equals(value) = false) Then
				Me._RequiresApproval = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_Enabled", DbType:="Bit NOT NULL")>  _
	Public Property Enabled() As Boolean
		Get
			Return Me._Enabled
		End Get
		Set
			If ((Me._Enabled = value)  _
						= false) Then
				Me._Enabled = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdUser", DbType:="Int NOT NULL")>  _
	Public Property IdUser() As Integer
		Get
			Return Me._IdUser
		End Get
		Set
			If ((Me._IdUser = value)  _
						= false) Then
				Me._IdUser = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me._CreateDate = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_idKey", DbType:="Int")>  _
	Public Property idKey() As System.Nullable(Of Integer)
		Get
			Return Me._idKey
		End Get
		Set
			If (Me._idKey.Equals(value) = false) Then
				Me._idKey = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_isLastVersion", DbType:="Bit")>  _
	Public Property isLastVersion() As System.Nullable(Of Boolean)
		Get
			Return Me._isLastVersion
		End Get
		Set
			If (Me._isLastVersion.Equals(value) = false) Then
				Me._isLastVersion = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_IdPhase", DbType:="Int")>  _
	Public Property IdPhase() As System.Nullable(Of Integer)
		Get
			Return Me._IdPhase
		End Get
		Set
			If (Me._IdPhase.Equals(value) = false) Then
				Me._IdPhase = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.Type")>  _
Partial Public Class Type
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _id As Integer
	
	Private _code As String
	
	Private _Name As String
	
	Private _SubType As EntitySet(Of SubType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnidChanging(value As Integer)
    End Sub
    Partial Private Sub OnidChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As String)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SubType = New EntitySet(Of SubType)(AddressOf Me.attach_SubType, AddressOf Me.detach_SubType)
		OnCreated
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me.OnidChanging(value)
				Me.SendPropertyChanging
				Me._id = value
				Me.SendPropertyChanged("id")
				Me.OnidChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_code", DbType:="VarChar(50)")>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Name", DbType:="VarChar(50)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Association(Name:="Type_SubType", Storage:="_SubType", ThisKey:="id", OtherKey:="IdType")>  _
	Public Property SubType() As EntitySet(Of SubType)
		Get
			Return Me._SubType
		End Get
		Set
			Me._SubType.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SubType(ByVal entity As SubType)
		Me.SendPropertyChanging
		entity.Type = Me
	End Sub
	
	Private Sub detach_SubType(ByVal entity As SubType)
		Me.SendPropertyChanging
		entity.Type = Nothing
	End Sub
End Class

<Table(Name:="dbo.TypeActas")>  _
Partial Public Class TypeActas
	
	Private _id As Integer
	
	Private _ActaName As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property id() As Integer
		Get
			Return Me._id
		End Get
		Set
			If ((Me._id = value)  _
						= false) Then
				Me._id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_ActaName", DbType:="VarChar(50)")>  _
	Public Property ActaName() As String
		Get
			Return Me._ActaName
		End Get
		Set
			If (String.Equals(Me._ActaName, value) = false) Then
				Me._ActaName = value
			End If
		End Set
	End Property
End Class

<Table(Name:="dbo.TypeContract")>  _
Partial Public Class TypeContract
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Contract As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnContractChanging(value As String)
    End Sub
    Partial Private Sub OnContractChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Column(Storage:="_Contract", DbType:="VarChar(200)")>  _
	Public Property Contract() As String
		Get
			Return Me._Contract
		End Get
		Set
			If (String.Equals(Me._Contract, value) = false) Then
				Me.OnContractChanging(value)
				Me.SendPropertyChanging
				Me._Contract = value
				Me.SendPropertyChanged("Contract")
				Me.OnContractChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Table(Name:="dbo.UsersByMailGroup")>  _
Partial Public Class UsersByMailGroup
	
	Private _Id As Integer
	
	Private _MailGroup As Integer
	
	Private _User_Id As Integer
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Column(Storage:="_Id", AutoSync:=AutoSync.Always, DbType:="Int NOT NULL IDENTITY", IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_MailGroup", DbType:="Int NOT NULL")>  _
	Public Property MailGroup() As Integer
		Get
			Return Me._MailGroup
		End Get
		Set
			If ((Me._MailGroup = value)  _
						= false) Then
				Me._MailGroup = value
			End If
		End Set
	End Property
	
	<Column(Storage:="_User_Id", DbType:="Int NOT NULL")>  _
	Public Property User_Id() As Integer
		Get
			Return Me._User_Id
		End Get
		Set
			If ((Me._User_Id = value)  _
						= false) Then
				Me._User_Id = value
			End If
		End Set
	End Property
End Class
